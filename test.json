{"text":"minimum sum possible by removing all occurrences of any array element | function to find minimum sum after deletion ; stores frequency of array elements ; traverse the array ; calculate sum ; update frequency of the current element ; stores the minimum sum required ; traverse map ; find the minimum sum obtained ; return minimum sum ; ","context":"","code":"def minSum(A, N):\n    mp = {}\n    sum = 0\n    for i in range(N):\n        sum += A[i]\n        if A[i] in mp:\n            mp[A[i]] += 1\n        else:\n            mp[A[i]] = 1\n    minSum = float('inf')\n    for it in mp:\n        minSum = min(minSum, sum - (it * mp[it]))\n    return minSum\n","test":"\narr = [4, 5, 6, 6]\nN = len(arr)\nprint(minSum(arr, N))\n","output":"9\n","fn_call":"minSum"}
{"text":"maximum difference between a pair of adjacent elements by excluding every element once | function to calculate maximum difference between adjacent elements excluding every array element once ; traverse the array ; stores the maximum diff ; check for maximum adjacent element ; exclude current element ; pdate maximum difference ; update previous value ; append the result into a vector ; print the result ; ","context":"","code":"def maxAdjacent(arr, N):\n    res = []\n    for i in range(1, N - 1):\n        prev = arr[0]\n        maxi = -1 * float('inf')\n        for j in range(1, N):\n            if (i == j):\n                continue\n            maxi = max(maxi, abs(arr[j] - prev))\n            prev = arr[j]\n        res .append(maxi)\n    for x in res:\n        print(x, end=' ')\n    print()\n","test":"\narr = [1, 3, 4, 7, 8]\nN = len(arr)\nmaxAdjacent(arr, N)\n","output":"3 4 4 \n","fn_call":"maxAdjacent"}
{"text":"count 1 s present in a range of indices [ l , r ] in a given array | function to find the size of the array if the array initially contains a single element ; base case ; p \/ 2 -> findsize ( n 2 ) p % 2 -> 1 p \/ 2 -> findsize ( n \/ 2 ) ; function to return the count of 1 s in the range [ l , r ] ; base case ; part 1 -> n \/ 2 [ 1 , siz_m ] ; update the right end point of the range to min ( siz_m , r ) ; part 2 -> n % 2 [ sizm + 1 , siz_m + 1 ] ; part 3 -> n \/ 2 [ sizm + 2 , 2 * siz_m - 1 ] same as part 1 property of symmetricity shift the coordinates according to part 1 subtract ( siz_m + 1 ) from both l , r ; ","context":"","code":"def findSize(N):\n    if (N == 0):\n        return 1\n    if (N == 1):\n        return 1\n    Size = 2 * findSize(N \/\/ 2) + 1\n    return Size\n\n\ndef CountOnes(N, L, R):\n    if (L > R):\n        return 0\n    if (N <= 1):\n        return N\n    ret = 0\n    M = N \/\/ 2\n    Siz_M = findSize(M)\n    if (L <= Siz_M):\n        ret += CountOnes(N \/\/ 2, L, min(Siz_M, R))\n    if (L <= Siz_M + 1 and Siz_M + 1 <= R):\n        ret += N % 2\n    if (Siz_M + 1 < R):\n        ret += CountOnes(N \/\/ 2, max(1, L - Siz_M - 1), R - Siz_M - 1)\n    return ret\n","test":"\nif __name__ == \"__main__\":\n    N = 7\n    L = 2\n    R = 5\n    print(CountOnes(N, L, R))\n","output":"4\n","fn_call":"CountOnes"}
{"text":"find the pair ( a , b ) with minimum lcm such that their sum is equal to n | function to check if number is prime or not ; as 1 is neither prime nor composite return false ; check if it is divided by any number then it is not prime , return false ; check if n is not divided by any number then it is prime and hence return true ; function to find the pair ( a , b ) such that sum is n & lcm is minimum ; check if the number is prime ; now , if it is not prime then find the least divisior ; check if divides n then it is a factor ; required output is a = n \/ i & b = n \/ i * ( n - 1 ) ; ","context":"","code":"def prime(n):\n    if (n == 1):\n        return False\n    for i in range(2, n + 1):\n        if i * i > n:\n            break\n        if (n % i == 0):\n            return False\n    return True\n\n\ndef minDivisior(n):\n    if (prime(n)):\n        print(1, n - 1)\n    else:\n        for i in range(2, n + 1):\n            if i * i > n:\n                break\n            if (n % i == 0):\n                print(n \/\/ i, n \/\/ i * (i - 1))\n                break\n","test":"\nN = 4\nminDivisior(N)\n","output":"2 2\n","fn_call":"minDivisior"}
{"text":"find landau 's function for a given number n | python3 program for the above approach ; to store landau 's function of the number ; function to return gcd of 2 numbers ; function to return lcm of two numbers ; function to find max lcm value among all representations of n ; calculate landau 's value ; recursive function to find different ways in which n can be written as sum of atleast one positive integers ; check if sum becomes n , consider this representation ; start from previous element in the representation till n ; include current element from representation ; call function again with reduced sum ; backtrack - remove current element from representation ; function to find the landau 's function ; using recurrence find different ways in which n can be written as a sum of atleast one + ve integers ; print the result ; ","context":"\nimport sys\nLandau = -sys .maxsize - 1\n\n","code":"def gcd(a, b):\n    if (a == 0):\n        return b\n    return gcd(b % a, a)\n\n\ndef lcm(a, b):\n    return (a * b) \/\/ gcd(a, b)\n\n\ndef findLCM(arr):\n    global Landau\n    nth_lcm = arr[0]\n    for i in range(1, len(arr)):\n        nth_lcm = lcm(nth_lcm, arr[i])\n    Landau = max(Landau, nth_lcm)\n\n\ndef findWays(arr, i, n):\n    if (n == 0):\n        findLCM(arr)\n    for j in range(i, n + 1):\n        arr .append(j)\n        findWays(arr, j, n - j)\n        arr .pop()\n\n\ndef Landau_function(n):\n    arr = []\n    findWays(arr, 1, n)\n    print(Landau)\n","test":"\nN = 4\nLandau_function(N)\n","output":"4\n","fn_call":"Landau_function"}
{"text":"check if the remainder of n | function to check if a number holds the condition ( n - 1 ) ! % n = n - 1 ; corner cases ; number divisible by 2 or 3 are not prime ; iterate from 5 and keep checking for prime ; function to check the expression for the value n ; ","context":"","code":"def isPrime(n):\n    if (n == 1):\n        return True\n    if (n <= 3):\n        return True\n    if ((n % 2 == 0) or (n % 3 == 0)):\n        return False\n    i = 5\n    while (i * i <= n):\n        if ((n % i == 0) or (n % (i + 2) == 0)):\n            return False\n            i += 6\n    return true\n\n\ndef checkExpression(n):\n    if (isPrime(n)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\nif __name__ == '__main__':\n    N = 3\n    checkExpression(N)\n","output":"Yes\n","fn_call":"checkExpression"}
{"text":"check if it is possible to split given array into k odd | function to check if array can be split in required k subsets ; store count of odd numbers ; check if element is odd ; check if split is possible ; ","context":"","code":"def checkArray(n, k, arr):\n    cnt = 0\n    for i in range(n):\n        if (arr[i] & 1):\n            cnt += 1\n    if (cnt >= k and cnt % 2 == k % 2):\n        return True\n    else:\n        return False\n","test":"\nif __name__ == '__main__':\n    arr = [1, 3, 4, 7, 5, 3, 1]\n    n = len(arr)\n    k = 4\n    if (checkArray(n, k, arr)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"checkArray"}
{"text":"sum of division of the possible pairs for the given array | python3 program to compute the sum of division of all the possible pairs for the given array ; function to compute the sum ; counting frequency of each term and finding maximum among it ; making cumulative frequency ; taking the ceil value ; nos . in [ ( n - 0.5 ) x , ( n + 0.5 ) x ) range will add n to the ans ; return the final result ; ","context":"\nfrom math import *\n\n","code":"def func(arr, n):\n    ans = 0\n    maxx = 0\n    freq = [0] * 100005\n    temp = 0\n    for i in range(n):\n        temp = arr[i]\n        freq[temp] += 1\n        maxx = max(maxx, temp)\n    for i in range(1, maxx + 1):\n        freq[i] += freq[i - 1]\n    for i in range(1, maxx + 1):\n        if (freq[i]):\n            value = 0\n            cur = ceil(0.5 * i) - 1.0\n            j = 1.5\n            while (1):\n                val = min(maxx, (ceil(i * j) - 1.0))\n                times = (freq[i] - freq[i - 1])\n                con = j - 0.5\n                ans += times * con * (freq[int(val)] - freq[int(cur)])\n                cur = val\n                if (val == maxx):\n                    break\n                j += 1\n    return int(ans)\n","test":"\nif __name__ == '__main__':\n    arr = [1, 2, 3]\n    n = len(arr)\n    print(func(arr, n))\n","output":"12\n","fn_call":"func"}
{"text":"count of elements to be inserted to make array sum twice the xor of array | function to find the minimum number of elements that need to be inserted such that the sum of the elements of the array is twice the xor of the array ; variable to store the xor of all the elements ; variable to store the sum of all elements ; loop to find the xor and the sum of the array ; if sum = 2 * xor ; no need to insert more elements ; we insert one more element which is sum ; we insert two more elements sum + xor and xor . ; print the number of elements inserted in the array ; print the elements that are inserted in the array ; ","context":"","code":"def insert_element(a, n):\n    Xor = 0\n    Sum = 0\n    for i in range(n):\n        Xor ^= a[i]\n        Sum += a[i]\n    if (Sum == 2 * Xor):\n        print(0)\n        return\n    if (Xor == 0):\n        print(1)\n        print(Sum)\n        return\n    num1 = Sum + Xor\n    num2 = Xor\n    print(2)\n    print(num1, num2)\n","test":"\nif __name__ == \"__main__\":\n    a = [1, 2, 3]\n    n = len(a)\n    insert_element(a, n)\n","output":"1\n6\n","fn_call":"insert_element"}
{"text":"check if roots of a quadratic equation are reciprocal of each other or not | function to check if the roots of a quadratic equation are reciprocal of each other or not ; ","context":"","code":"def checkSolution(a, b, c):\n    if (a == c):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\na = 2\nb = 0\nc = 2\ncheckSolution(a, b, c)\n","output":"Yes\n","fn_call":"checkSolution"}
{"text":"sunny number | python3 program for the above approach ; function check whether x is a perfect square or not ; find floating point value of square root of x . ; if square root is an integer ; function to check sunny number ; check if ( n + 1 ) is a perfect square or not ; if ( n + 1 ) is not a perfect square ; ","context":"\nfrom math import *\n\n","code":"def isPerfectSquare(x):\n    sr = sqrt(x)\n    return ((sr - floor(sr)) == 0)\n\n\ndef checkSunnyNumber(N):\n    if (isPerfectSquare(N + 1)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\nif __name__ == '__main__':\n    N = 8\n    checkSunnyNumber(N)\n","output":"Yes\n","fn_call":"checkSunnyNumber"}
{"text":"count the numbers which can convert n to 1 using given operation | function to count the numbers which can convert n to 1 using the given operation ; iterate through all the integers ; check if n can be converted to 1 ; incrementing the count if it can be converted ; ","context":"","code":"def countValues(n):\n    answer = 0\n    for i in range(2, n + 1, 1):\n        k = n\n        while (k >= i):\n            if (k % i == 0):\n                k \/\/= i\n            else:\n                k -= i\n        if (k == 1):\n            answer += 1\n    return answer\n","test":"\nif __name__ == '__main__':\n    N = 6\n    print(countValues(N))\n","output":"3\n","fn_call":"countValues"}
{"text":"find k numbers with sum equal to n and sum of their squares maximized | function that prints the required k numbers ; print 1 , k - 1 times ; print ( n - k + 1 ) ; ","context":"","code":"def printKNumbers(N, K):\n    for i in range(K - 1):\n        print(1, end=' ')\n    print(N - K + 1)\n","test":"\nif __name__ == '__main__':\n    (N, K) = (10, 3)\n    printKNumbers(N, K)\n","output":"1 1 8\n","fn_call":"printKNumbers"}
{"text":"print nth stepping or autobiographical number | function to find the nth stepping natural number ; declare the queue ; enqueue 1 , 2 , ... , 9 in this order ; perform k operation on queue ; get the ith stepping number ; perform dequeue from the queue ; if x mod 10 is not equal to 0 ; then enqueue 10 x + ( x mod 10 ) - 1 ; enqueue 10 x + ( x mod 10 ) ; if x mod 10 is not equal to 9 ; then enqueue 10 x + ( x mod 10 ) + 1 ; return the dequeued number of the k - th operation as the nth stepping number ; ","context":"","code":"def NthSmallest(K):\n    Q = []\n    for i in range(1, 10):\n        Q .append(i)\n    for i in range(1, K + 1):\n        x = Q[0]\n        Q .remove(Q[0])\n        if (x % 10 != 0):\n            Q .append(x * 10 + x % 10 - 1)\n        Q .append(x * 10 + x % 10)\n        if (x % 10 != 9):\n            Q .append(x * 10 + x % 10 + 1)\n    return x\n","test":"\nif __name__ == '__main__':\n    N = 16\n    print(NthSmallest(N))\n","output":"32\n","fn_call":"NthSmallest"}
{"text":"least number to be added to or subtracted from n to make it a perfect square | python3 implementation of the approach ; function to return the least number ; get the perfect square before and after n ; check which is nearest to n ; return the result ; ","context":"\nfrom math import sqrt\n\n","code":"def nearest(n):\n    prevSquare = int(sqrt(n))\n    nextSquare = prevSquare + 1\n    prevSquare = prevSquare * prevSquare\n    nextSquare = nextSquare * nextSquare\n    ans = (\n        prevSquare -\n        n)if (\n        n -\n        prevSquare) < (\n            nextSquare -\n            n)else (\n                nextSquare -\n        n)\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    n = 14\n    print(nearest(n))\n    n = 16\n    print(nearest(n))\n    n = 18\n    print(nearest(n))\n","output":"2\n0\n-2\n","fn_call":"nearest"}
{"text":"value of pi ( \u00ee ) up to 50 decimal places | python3 program to calculate the value of pi up to n decimal places ; function that prints the value of pi upto n decimal places ; find value of pi upto using acos ( ) function ; print value of pi upto n decimal places ; ","context":"\nfrom math import acos\n\n","code":"def printValueOfPi(N):\n    b = '{:.' + str(N) + 'f}'\n    pi = b .format(2 * acos(0.0))\n    print(pi)\n","test":"\nif __name__ == \"__main__\":\n    N = 43\n    printValueOfPi(N)\n","output":"3.1415926535897931159979634685441851615905762\n","fn_call":"printValueOfPi"}
{"text":"invert the kth most significant bit of n | python implementation of the approach ; function to convert decimal number n to its binary representation stored as an array arr [ ] ; function to convert the number represented as a binary array arr [ ] its decimal equivalent ; function to concatenate the binary numbers and return the decimal result ; number of bits in both the numbers ; convert the bits in both the gers to the arrays a [ ] and b [ ] ; the number of bits in n are less than k ; flip the kth bit ; return the decimal equivalent of the number ; ","context":"\nimport math\n\n","code":"def decBinary(arr, n):\n    k = int(math .log2(n))\n    while (n > 0):\n        arr[k] = n % 2\n        k = k - 1\n        n = n \/\/ 2\n\n\ndef binaryDec(arr, n):\n    ans = 0\n    for i in range(0, n):\n        ans = ans + (arr[i] << (n - i - 1))\n    return ans\n\n\ndef getNum(n, k):\n    l = int(math .log2(n)) + 1\n    a = [0 for i in range(0, l)]\n    decBinary(a, n)\n    if (k > l):\n        return n\n    if (a[k - 1] == 0):\n        a[k - 1] = 1\n    else:\n        a[k - 1] = 0\n    return binaryDec(a, l)\n","test":"\nn = 56\nk = 2\nprint(getNum(n, k))\n","output":"40\n","fn_call":"getNum"}
{"text":"queries for the product of first n factorials | python3 implementation of the approach ; declare result array globally ; function to precompute the product of factorials upto max ; initialize base condition if n = 0 then factorial of 0 is equal to 1 and answer for n = 0 is 1 ; iterate loop from 1 to max ; factorial ( i ) = factorial ( i - 1 ) * i ; result for current n is equal to result [ i - 1 ] multiplied by the factorial of i ; function to perform the queries ; precomputing the result timax ; perform queries ; ","context":"\nMAX = 1000000\nMOD = 10 ** 9 + 7\nresult = [0 for i in range(MAX + 1)]\nfact = [0 for i in range(MAX + 1)]\n\n","code":"def preCompute():\n    fact[0] = 1\n    result[0] = 1\n    for i in range(1, MAX + 1):\n        fact[i] = ((fact[i - 1] % MOD) * i) % MOD\n        result[i] = ((result[i - 1] % MOD) * (fact[i] % MOD)) % MOD\n\n\ndef performQueries(q, n):\n    preCompute()\n    for i in range(n):\n        print(result[q[i]])\n","test":"\nq = [4, 5]\nn = len(q)\nperformQueries(q, n)\n","output":"288\n34560\n","fn_call":"performQueries"}
{"text":"nth number in a set of multiples of a , b or c | python3 program to find nth term divisible by a , b or c ; function to return gcd of a and b ; function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c ; calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c ; function for binary search to find the nth term divisible by a , b or c ; set low to 1 and high to long_max ; if the current term is less than n then we need to increase low to mid + 1 ; if current term is greater than equal to n then high = mid ; ","context":"\nimport sys\n\n","code":"def gcd(a, b):\n    if (a == 0):\n        return b\n    return gcd(b % a, a)\n\n\ndef divTermCount(a, b, c, num):\n    return ((num \/ a) + (num \/ b) + (num \/ c) - (num \/ ((a * b) \/ gcd(a,\n                                                                      b))) - (num \/ ((c * b) \/ gcd(c,\n                                                                                                   b))) - (num \/ ((a * c) \/ gcd(a,\n                                                                                                                                c))) + (num \/ ((a * b * c) \/ gcd(gcd(a,\n                                                                                                                                                                     b),\n                                                                                                                                                                 c))))\n\n\ndef findNthTerm(a, b, c, n):\n    low = 1\n    high = sys .maxsize\n    mid = 0\n    while (low < high):\n        mid = low + (high - low) \/ 2\n        if (divTermCount(a, b, c, mid) < n):\n            low = mid + 1\n        else:\n            high = mid\n    return int(low)\n","test":"\na = 2\nb = 3\nc = 5\nn = 100\nprint(findNthTerm(a, b, c, n))\n","output":"136\n","fn_call":"findNthTerm"}
{"text":"angle between 3 given vertices in a n | function that checks whether given angle can be created using any 3 sides ; initialize x and y ; calculate the number of vertices between i and j , j and k ; calculate the angle subtended at the circumference ; angle subtended at j can be found using the fact that the sum of angles of a triangle is equal to 180 degrees ; ","context":"","code":"def calculate_angle(n, i, j, k):\n    x, y = 0, 0\n    if (i < j):\n        x = j - i\n    else:\n        x = j + n - i\n    if (j < k):\n        y = k - j\n    else:\n        y = k + n - j\n    ang1 = (180 * x) \/\/ n\n    ang2 = (180 * y) \/\/ n\n    ans = 180 - ang1 - ang2\n    return ans\n","test":"\nn = 5\na1 = 1\na2 = 2\na3 = 5\nprint(calculate_angle(n, a1, a2, a3))\n","output":"36\n","fn_call":"calculate_angle"}
{"text":"loss when two items are sold at same price and same percentage profit \/ loss | function that will find loss ; ","context":"","code":"def Loss(SP, P):\n    loss = 0\n    loss = ((2 * P * P * SP) \/ (100 * 100 - P * P))\n    print(\"Loss =\", round(loss, 3))\n","test":"\nif __name__ == \"__main__\":\n    SP, P = 2400, 30\n    Loss(SP, P)\n","output":"Loss = 474.725\n","fn_call":"Loss"}
{"text":"check for an array element that is co | python3 implementation of the approach ; stores smallest prime factor for every number ; hash to store prime factors count ; function to calculate spf ( smallestprime factor ) for every number till maxn ; separately marking spf for every even number as 2 ; checking if i is prime ; marking spf for all numbers divisible by i ; marking spf [ j ] if it is not previously marked ; function to store the prime factors after dividing by the smallest prime factor at every step ; storing the count of prime factors in hash ; function that returns true if there are no common prime factors between x and other numbers of the array ; checking whether it common prime factor with other numbers ; function that returns true if there is an element in the array which is coprime with all the other elements of the array ; using sieve for generating prime factors ; checking the common prime factors with other numbers ; ","context":"\nMAXN = 1000001\nspf = [i for i in range(MAXN)]\nhash1 = [0 for i in range(MAXN)]\n\n","code":"def sieve():\n    for i in range(4, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, MAXN):\n        if i * i >= MAXN:\n            break\n        if (spf[i] == i):\n            for j in range(i * i, MAXN, i):\n                if (spf[j] == j):\n                    spf[j] = i\n\n\ndef getFactorization(x):\n    while (x != 1):\n        temp = spf[x]\n        if (x % temp == 0):\n            hash1[spf[x]] += 1\n            x = x \/\/ spf[x]\n        while (x % temp == 0):\n            x = x \/\/ temp\n\n\ndef check(x):\n    while (x != 1):\n        temp = spf[x]\n        if (x % temp == 0 and hash1[temp] > 1):\n            return False\n        while (x % temp == 0):\n            x = x \/\/ temp\n    return True\n\n\ndef hasValidNum(arr, n):\n    sieve()\n    for i in range(n):\n        getFactorization(arr[i])\n    for i in range(n):\n        if (check(arr[i])):\n            return True\n    return False\n","test":"\narr = [2, 8, 4, 10, 6, 7]\nn = len(arr)\nif (hasValidNum(arr, n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"hasValidNum"}
{"text":"ways to remove edges from a complete graph to make odd edges | function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph ; total number of edges ; ","context":"","code":"def countWays(N):\n    E = (N * (N - 1)) \/ 2\n    if (N == 1):\n        return 0\n    return int(pow(2, E - 1))\n","test":"\nif __name__ == '__main__':\n    N = 4\n    print(countWays(N))\n","output":"32\n","fn_call":"countWays"}
{"text":"closest sum partition ( into two subsets ) of numbers from 1 to n | function to return the minimum required absolute difference ; ","context":"","code":"def minAbsDiff(n):\n    mod = n % 4\n    if (mod == 0 or mod == 3):\n        return 0\n    return 1\n","test":"\nif __name__ == \"__main__\":\n    n = 5\n    print(minAbsDiff(n))\n","output":"1\n","fn_call":"minAbsDiff"}
{"text":"check if the xor of the frequency of all digits of a number n is zero or not | python implementation of the above approach ; creating a frequency array ; finding the last digit of the number ; dividing the number by 10 to eliminate last digit ; counting frequency of each digit ; checking if the xor of all frequency is zero or not ; ","context":"","code":"def check(s):\n    freq = [0] * 10\n    while (s != 0):\n        r = s % 10\n        s = s \/\/ 10\n        freq[r] += 1\n    xor = 0\n    for i in range(10):\n        xor = xor ^ freq[i]\n    if (xor == 0):\n        return True\n    else:\n        return False\n","test":"\ns = 122233\nif (check(s)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"check"}
{"text":"print n lines of 4 numbers such that every pair among 4 numbers has a gcd k | function to print n lines ; iterate n times to print n lines ; ","context":"","code":"def printLines(n, k):\n    for i in range(n):\n        print(k * (6 * i + 1), k * (6 * i + 2),\n              k * (6 * i + 3), k * (6 * i + 5))\n","test":"\nif __name__ == \"__main__\":\n    n, k = 2, 2\n    printLines(n, k)\n","output":"2 4 6 10\n14 16 18 22\n","fn_call":"printLines"}
{"text":"Sum of first n term of Series 3 , 5 , 9 , 17 , 33. ... | Python program to find sum of n terms of the series ; Sn = n * ( 4 * n * n + 6 * n - 1 ) \/ 3 ; number of terms for the sum ; find the Sn","context":"","code":"def calculateSum(n):\n    return (2 ** (n + 1) + n - 2)\n","test":"\nn = 4\nprint(\"Sum =\", calculateSum(n))\n","output":"Sum = 34\n","fn_call":"calculateSum"}
{"text":"count the number of special strings of a given length n | python3 program to count the number of special strings of a given length n ; function to return count of special strings ; stores the answer for a particular value of n ; for n = 0 we have empty string ; for n = 1 we have 2 special strings ; calculate count of special string of length i ; fib [ n ] stores the count of special strings of length n ; ","context":"\nmod = 1000000007\n\n","code":"def count_special(n):\n    fib = [0 for i in range(n + 1)]\n    fib[0] = 1\n    fib[1] = 2\n    for i in range(2, n + 1, 1):\n        fib[i] = (fib[i - 1] % mod + fib[i - 2] % mod) % mod\n    return fib[n]\n","test":"\nif __name__ == '__main__':\n    n = 3\n    print(count_special(n))\n","output":"5\n","fn_call":"count_special"}
{"text":"counts path in an array | python3 implementation of the above approach ; find the number of ways to reach the end ; base case ; recursive structure ; ","context":"\nmod = 1e9 + 7\n\n","code":"def ways(i, arr, n):\n    if (i == n - 1):\n        return 1\n    sum = 0\n    for j in range(1, arr[i] + 1):\n        if (i + j < n):\n            sum += (ways(i + j, arr, n)) % mod\n            sum %= mod\n    return int(sum % mod)\n","test":"\nif __name__ == '__main__':\n    arr = [5, 3, 1, 4, 3]\n    n = len(arr)\n    print(ways(0, arr, n))\n","output":"6\n","fn_call":"ways"}
{"text":"counts path in an array | python3 implementation of above approach ; find the number of ways to reach the end ; dp to store value ; base case ; bottom up dp structure ; f [ i ] is dependent of f [ i + 1 ] to f [ i + k ] ; return value of dp [ 0 ] ; ","context":"\nmod = 10 ** 9 + 7\n\n","code":"def ways(arr, n):\n    dp = [0] * (n + 1)\n    dp[n - 1] = 1\n    for i in range(n - 2, -1, -1):\n        dp[i] = 0\n        j = 1\n        while ((j + i) < n and j <= arr[i]):\n            dp[i] += dp[i + j]\n            dp[i] %= mod\n            j += 1\n    return dp[0] % mod\n","test":"\narr = [5, 3, 1, 4, 3]\nn = len(arr)\nprint(ways(arr, n) % mod)\n","output":"6\n","fn_call":"ways"}
{"text":"number of subsequences with even and odd sum | returns the count of odd and even subsequences ; initialising count_even and count_odd to 0 since as there is no subsequence before the iteration with even or odd count . ; find sum of all subsequences with even count and odd count and storing them as we iterate . ; if the number is even ; if the number is odd ; ","context":"","code":"def countSum(arr, n):\n    result = 0\n    count_odd = 0\n    count_even = 0\n    for i in range(1, n + 1):\n        if (arr[i - 1] % 2 == 0):\n            count_even = count_even + count_even + 1\n            count_odd = count_odd + count_odd\n        else:\n            temp = count_even\n            count_even = count_even + count_odd\n            count_odd = count_odd + temp + 1\n    return (count_even, count_odd)\n","test":"\narr = [1, 2, 2, 3]\nn = len(arr)\ncount_even, count_odd = countSum(arr, n)\nprint(\"EvenSum = \", count_even, \" OddSum = \", count_odd)\n","output":"EvenSum =  7  OddSum =  8\n","fn_call":"countSum"}
{"text":"count of integers of length n and value less than k such that they contain digits only from the given set | python3 implementation of the approach ; function to convert a number into vector ; push all the digits of n from the end one by one to the vector ; if the original number was 0 ; reverse the vector elements ; return the required vector ; function to return the count of b length integers which are less than c and they contain digits from set a [ ] only ; convert number to digit array ; case 1 : no such number possible as the generated numbers will always be greater than c ; case 2 : all integers of length b are valid as they all are less than c ; contain 0 ; case 3 ; update the lower [ ] array such that lower [ i ] stores the count of elements in a [ ] which are less than i ; for first index we can 't use 0 ; whether ( i - 1 ) digit of generated number can be equal to ( i - 1 ) digit of c ; is digit [ i - 1 ] present in a ? ; ","context":"\nMAX = 10\n\n","code":"def numToVec(N):\n    digit = []\n    while (N != 0):\n        digit .append(N % 10)\n        N = N \/\/ 10\n    if (len(digit) == 0):\n        digit .append(0)\n    digit = digit[::-1]\n    return digit\n\n\ndef solve(A, B, C):\n    d, d2 = 0, 0\n    digit = numToVec(C)\n    d = len(A)\n    if (B > len(digit) or d == 0):\n        return 0\n    elif (B < len(digit)):\n        if (A[0] == 0 and B != 1):\n            return (d - 1) * pow(d, B - 1)\n        else:\n            return pow(d, B)\n    else:\n        dp = [0 for i in range(B + 1)]\n        lower = [0 for i in range(MAX + 1)]\n        for i in range(d):\n            lower[A[i] + 1] = 1\n        for i in range(1, MAX + 1):\n            lower[i] = lower[i - 1] + lower[i]\n        flag = True\n        dp[0] = 0\n        for i in range(1, B + 1):\n            d2 = lower[digit[i - 1]]\n            dp[i] = dp[i - 1] * d\n            if (i == 1 and A[0] == 0 and B != 1):\n                d2 = d2 - 1\n            if (flag):\n                dp[i] += d2\n            flag = (flag & (lower[digit[i - 1] + 1]\n                    == lower[digit[i - 1]] + 1))\n        return dp[B]\n","test":"\nA = [0, 1, 2, 5]\nN = 2\nk = 21\nprint(solve(A, N, k))\n","output":"5\n","fn_call":"solve"}
{"text":"number of paths of weight w in a k | python 3 program to count the number of paths with weight w in a k - ary tree ; function to return the number of ways having weight as wt in k - ary tree ; return 0 if weight becomes less than zero ; return one only if the current path has included edge weight of atleast m ; if the current edge weight is greater than or equal to m , set used as true ; ","context":"\nimport numpy as np\n\n","code":"def solve(dp, wt, K, M, used):\n    if (wt < 0):\n        return 0\n    if (wt == 0):\n        if (used):\n            return 1\n        return 0\n    if (dp[wt][used] != -1):\n        return dp[wt][used]\n    ans = 0\n    for i in range(1, K + 1):\n        if (i >= M):\n            ans += solve(dp, wt - i, K, M, used | 1)\n        else:\n            ans += solve(dp, wt - i, K, M, used)\n    dp[wt][used] = ans\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    W = 3\n    K = 3\n    M = 2\n    dp = np .ones((W + 1, 2))\n    dp = -1 * dp\n    print(solve(dp, W, K, M, 0))\n","output":"3\n","fn_call":"solve"}
{"text":"ways to write n as sum of two or more positive integers | set | function to find the number of partitions of n ; base case ; ","context":"","code":"def partitions(n):\n    p = [0] * (n + 1)\n    p[0] = 1\n    for i in range(1, n + 1):\n        k = 1\n        while ((k * (3 * k - 1)) \/ 2 <= i):\n            p[i] += ((1 if k % 2 else -1) * p[i - (k * (3 * k - 1)) \/\/ 2])\n            if (k > 0):\n                k *= -1\n            else:\n                k = 1 - k\n    return p[n]\n","test":"\nif __name__ == \"__main__\":\n    N = 20\n    print(partitions(N))\n","output":"627\n","fn_call":"partitions"}
{"text":"longest increasing path in matrix | python3 program to find longest increasing path in a matrix . ; return the length of lip in 2d matrix ; if value not calculated yet . ; if reach bottom left cell , return 1. ; if reach the corner of the matrix . ; if value greater than below cell . ; if value greater than left cell . ; wrapper function ; ","context":"\nMAX = 20\n\n","code":"def LIP(dp, mat, n, m, x, y):\n    if (dp[x][y] < 0):\n        result = 0\n        if (x == n - 1 and y == m - 1):\n            dp[x][y] = 1\n            return dp[x][y]\n        if (x == n - 1 or y == m - 1):\n            result = 1\n        if (x + 1 < n and mat[x][y] < mat[x + 1][y]):\n            result = 1 + LIP(dp, mat, n, m, x + 1, y)\n        if (y + 1 < m and mat[x][y] < mat[x][y + 1]):\n            result = max(result, 1 + LIP(dp, mat, n, m, x, y + 1))\n        dp[x][y] = result\n    return dp[x][y]\n\n\ndef wrapper(mat, n, m):\n    dp = [[-1 for i in range(MAX)]for i in range(MAX)]\n    return LIP(dp, mat, n, m, 0, 0)\n","test":"\nmat = [[1, 2, 3, 4], [2, 2, 3, 4], [3, 2, 3, 4], [4, 5, 6, 7]]\nn = 4\nm = 4\nprint(wrapper(mat, n, m))\n","output":"7\n","fn_call":"wrapper"}
{"text":"counts paths from a point to reach origin | recursive function to count number of paths ; if we reach bottom or top left , we are have only one way to reach ( 0 , 0 ) ; else count sum of both ways ; ","context":"","code":"def countPaths(n, m):\n    if (n == 0 or m == 0):\n        return 1\n    return (countPaths(n - 1, m) + countPaths(n, m - 1))\n","test":"\nn = 3\nm = 2\nprint(\" Number of Paths \", countPaths(n, m))\n","output":" Number of Paths  10\n","fn_call":"countPaths"}
{"text":"gold mine problem | python program to solve gold mine problem ; returns maximum amount of gold that can be collected when journey started from first column and moves allowed are right , right - up and right - down ; create a table for storing intermediate results and initialize all cells to 0. the first row of goldminetable gives the maximum gold that the miner can collect when starts that row ; gold collected on going to the cell on the right ( -> ) ; gold collected on going to the cell to right up ( \/ ) ; gold collected on going to the cell to right down ( \\ ) ; max gold collected from taking either of the above 3 paths ; the max amount of gold collected will be the max value in first column of all rows ; ","context":"\nMAX = 100\n\n","code":"def getMaxGold(gold, m, n):\n    goldTable = [[0 for i in range(n)]for j in range(m)]\n    for col in range(n - 1, -1, -1):\n        for row in range(m):\n            if (col == n - 1):\n                right = 0\n            else:\n                right = goldTable[row][col + 1]\n            if (row == 0 or col == n - 1):\n                right_up = 0\n            else:\n                right_up = goldTable[row - 1][col + 1]\n            if (row == m - 1 or col == n - 1):\n                right_down = 0\n            else:\n                right_down = goldTable[row + 1][col + 1]\n            goldTable[row][col] = gold[row][col] + \\\n                max(right, right_up, right_down)\n    res = goldTable[0][0]\n    for i in range(1, m):\n        res = max(res, goldTable[i][0])\n    return res\n","test":"\ngold = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]]\nm = 4\nn = 4\nprint(getMaxGold(gold, m, n))\n","output":"16\n","fn_call":"getMaxGold"}
{"text":"find minimum adjustment cost of an array | python3 program to find minimum adjustment cost of an array ; function to find minimum adjustment cost of an array ; dp [ i ] [ j ] stores minimal adjustment cost on changing a [ i ] to j ; handle first element of array separately ; do for rest elements of the array ; replace a [ i ] to j and calculate minimal adjustment cost dp [ i ] [ j ] ; initialize minimal adjustment cost to int_max ; consider all k such that k >= max ( j - target , 0 ) and k <= min ( m , j + target ) and take minimum ; return minimum value from last row of dp table ; ","context":"\nM = 100\n\n","code":"def minAdjustmentCost(A, n, target):\n    dp = [[0 for i in range(M + 1)]for i in range(n)]\n    for j in range(M + 1):\n        dp[0][j] = abs(j - A[0])\n    for i in range(1, n):\n        for j in range(M + 1):\n            dp[i][j] = 100000000\n            for k in range(max(j - target, 0), min(M, j + target) + 1):\n                dp[i][j] = min(dp[i][j], dp[i - 1][k] + abs(A[i] - j))\n    res = 10000000\n    for j in range(M + 1):\n        res = min(res, dp[n - 1][j])\n    return res\n","test":"\narr = [55, 77, 52, 61, 39, 6, 25, 60, 49, 47]\nn = len(arr)\ntarget = 10\nprint(\"Minimum adjustment cost is\", minAdjustmentCost(arr, n, target), sep=' ')\n","output":"Minimum adjustment cost is 75\n","fn_call":"minAdjustmentCost"}
{"text":"count triplets from a given range having sum of two numbers of a triplet equal to the third number | function to find the number of triplets from the range [ l , r ] having sum of two numbers from the triplet equal to the third number ; stores the total number of triplets ; find the difference of the range ; case 1 : if triplets can 't  be formed, then return 0 ; otherwise ; update the total number of triplets ; return the count ; ","context":"","code":"def totalCombination(L, R):\n    count = 0\n    K = R - L\n    if (K < L):\n        return 0\n    ans = K - L\n    count = ((ans + 1) * (ans + 2)) \/\/ 2\n    return count\n","test":"\nif __name__ == '__main__':\n    L, R = 2, 6\n    print(totalCombination(L, R))\n","output":"6\n","fn_call":"totalCombination"}
{"text":"construct two n | function to generate two arrays satisfying the given conditions ; declare the two arrays a and b ; iterate from range [ 1 , 2 * n ] ; assign consecutive numbers to same indices of the two arrays ; print the first array ; print the second array , b ; ","context":"","code":"def printArrays(n):\n    A, B = [], []\n    for i in range(1, 2 * n + 1):\n        if (i % 2 == 0):\n            A .append(i)\n        else:\n            B .append(i)\n    print(\"{ \", end=\"\")\n    for i in range(n):\n        print(A[i], end=\"\")\n        if (i != n - 1):\n            print(\", \", end=\"\")\n    print(\"}\")\n    print(\"{ \", end=\"\")\n    for i in range(n):\n        print(B[i], end=\"\")\n        if (i != n - 1):\n            print(\",\", end=\" \")\n    print(\" }\", end=\"\")\n","test":"\nif __name__ == \"__main__\":\n    N = 5\n    printArrays(N)\n","output":"{ 2, 4, 6, 8, 10}\n{ 1, 3, 5, 7, 9 }","fn_call":"printArrays"}
{"text":"numbers formed by flipping common set bits in two given integers | function to flip bits of a and b which are set in both of them ; iterate all possible bits of a and b ; if ith bit is set in both a and b ; clear i - th bit of a ; clear i - th bit of b ; print a and b ; ","context":"","code":"def flipBitsOfAandB(A, B):\n    for i in range(0, 32):\n        if ((A & (1 << i)) and (B & (1 << i))):\n            A = A ^ (1 << i)\n            B = B ^ (1 << i)\n    print(A, B)\n","test":"\nif __name__ == \"__main__\":\n    A = 7\n    B = 4\n    flipBitsOfAandB(A, B)\n","output":"3 0\n","fn_call":"flipBitsOfAandB"}
{"text":"count of distinct pair sum between two 1 to n value arrays | function to find the distinct sums ; ","context":"","code":"def findDistinctSums(N):\n    return (2 * N - 1)\n","test":"\nN = 3\nprint(findDistinctSums(N))\n","output":"5\n","fn_call":"findDistinctSums"}
{"text":"count of substrings from given ternary strings containing characters at least once | function to count the number of substrings consists of 0 , 1 , and 2 ; initialize frequency array of size 3 ; stores the resultant count ; traversing string str ; update frequency array ; if all the characters are present counting number of substrings possible ; update number of substrings ; return the number of substrings ; ","context":"","code":"def countSubstrings(str):\n    freq = [0] * 3\n    count = 0\n    i = 0\n    for j in range(0, len(str)):\n        freq[ord(str[j]) - ord('0')] += 1\n        while (freq[0] > 0 and freq[1] > 0 and freq[2] > 0):\n            i += 1\n            freq[ord(str[i]) - ord('0')] -= 1\n        count += i\n    return count\n","test":"\nstr = \"00021\"\ncount = countSubstrings(str)\nprint(count)\n","output":"3\n","fn_call":"countSubstrings"}
{"text":"minimum flips to remove any consecutive 3 0 s or 1 s in given binary string | function to find the minimum number of flips to make all three pairs of consecutive characters different ; stores resultant count of pairs ; base case ; iterate over the range [ 0 , n - 2 ] ; if the consecutive 3 numbers are the same then increment the count and the counter ; return the answer ; ","context":"","code":"def minFlips(st):\n    count = 0\n    if (len(st) <= 2):\n        return 0\n    for i in range(len(st) - 2):\n        if (st[i] == st[i + 1] and st[i + 2] == st[i + 1]):\n            i = i + 3\n            count += 1\n        else:\n            i += 1\n    return count\n","test":"\nif __name__ == \"__main__\":\n    S = \"0011101\"\n    print(minFlips(S))\n","output":"1\n","fn_call":"minFlips"}
{"text":"encrypt the string | function to convert decimal to hex ; function to encrypt the string ; iterate the characters of the string ; iterate until s [ i ] is equal to ch ; update count and i ; decrement i by 1 ; convert count to hexadecimal representation ; append the character ; append the characters frequency in hexadecimal representation ; reverse the obtained answer ; return required answer ; ","context":"","code":"def convertToHex(num):\n    temp = \"\"\n    while (num != 0):\n        rem = num % 16\n        c = 0\n        if (rem < 10):\n            c = rem + 48\n        else:\n            c = rem + 87\n        temp += chr(c)\n        num = num \/\/ 16\n    return temp\n\n\ndef encryptString(S, N):\n    ans = \"\"\n    for i in range(N):\n        ch = S[i]\n        count = 0\n        while (i < N and S[i] == ch):\n            count += 1\n            i += 1\n        i -= 1\n        hex = convertToHex(count)\n        ans += ch\n        ans += hex\n    ans = ans[::-1]\n    return ans\n","test":"\nif __name__ == '__main__':\n    S = \"abc\"\n    N = len(S)\n    print(encryptString(S, N))\n","output":"1c1b1a\n","fn_call":"encryptString"}
{"text":"count of binary strings of length n such that frequency of 1 ' s \u2581 exceeds \u2581 frequency \u2581 of \u2581 0' s | function to calculate and return the value of binomial coefficient c ( n , k ) ; since c ( n , k ) = c ( n , n - k ) ; calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ] ; function to return the count of binary strings of length n such that frequency of 1 ' s \u2581 exceed \u2581 that \u2581 of \u2581 0' s ; count of n - length binary strings ; count of n - length binary strings having equal count of 0 ' s \u2581 and \u2581 1' s ; for even length strings ; ","context":"","code":"def binomialCoeff(n, k):\n    res = 1\n    if (k > n - k):\n        k = n - k\n    for i in range(k):\n        res *= (n - i)\n        res \/\/= (i + 1)\n    return res\n\n\ndef countOfString(N):\n    Stotal = pow(2, N)\n    Sequal = 0\n    if (N % 2 == 0):\n        Sequal = binomialCoeff(N, N \/\/ 2)\n    S1 = (Stotal - Sequal) \/\/ 2\n    return S1\n","test":"\nN = 3\nprint(countOfString(N))\n","output":"4\n","fn_call":"countOfString"}
{"text":"remove all occurrences of a character in a string | recursive approach | function to remove all occurrences of a character in the string ; base case ; check the first character of the given string ; pass the rest of the string to recursion function call ; add the first character of str and string from recursion ; given string ; ","context":"","code":"def removeCharRecursive(str, X):\n    if (len(str) == 0):\n        return \"\"\n    if (str[0] == X):\n        return removeCharRecursive(str[1:], X)\n    return str[0] + removeCharRecursive(str[1:], X)\n","test":"\nstr = \"geeksforgeeks\"\nX = 'e'\nstr = removeCharRecursive(str, X)\nprint(str)\n","output":"gksforgks\n","fn_call":"removeCharRecursive"}
{"text":"maximum time such that absolute difference between hour and minute lies in given range | function checks whether ","context":"","code":"def isValid(a1, a2, strr, flag):\n    v1, v2 = 0, 0\n    if (flag == 0):\n        v1 = strr[4]\n        v2 = strr[3]\n    else:\n        v1 = strr[1]\n        v2 = strr[0]\n    if (v1 != a1 and v1 != '?'):\n        return False\n    if (v2 != a2 and v2 != '?'):\n        return False\n    return True\n\n\ndef inRange(hh, mm, L, R):\n    a = abs(hh - mm)\n    if (a < L or a > R):\n        return False\n    return True\n\n\ndef displayTime(hh, mm):\n    if (hh > 10):\n        print(hh, end=\":\")\n    elif (hh < 10):\n        print(\"0\", hh, end=\":\")\n    if (mm > 10):\n        print(mm)\n    elif (mm < 10):\n        print(\"0\", mm)\n\n\ndef maximumTimeWithDifferenceInRange(strr, L, R):\n    i, j = 0, 0\n    h1, h2, m1, m2 = 0, 0, 0, 0\n    for i in range(23, -1, -1):\n        h1 = i % 10\n        h2 = i \/\/ 10\n        if (not isValid(chr(h1), chr(h2), strr, 1)):\n            continue\n        for j in range(59, -1, -1):\n            m1 = j % 10\n            m2 = j \/\/ 10\n            if (not isValid(chr(m1), chr(m2), strr, 0)):\n                continue\n            if (inRange(i, j, L, R)):\n                displayTime(i, j)\n                return\n    if (inRange(i, j, L, R)):\n        displayTime(i, j)\n    else:\n        print(-1)\n","test":"\ntimeValue = \"??:??\"\nL = 20\nR = 39\nmaximumTimeWithDifferenceInRange(timeValue, L, R)\n","output":"23:59\n","fn_call":"maximumTimeWithDifferenceInRange"}
{"text":"check if a string can be split into even length palindromic substrings | function to check string str can be split a string into even length palindromic substrings ; initialize a stack ; iterate the string ; if the i - th character is same as that at the top of the stack then pop the top element ; else push the current charactor into the stack ; if the stack is empty , then even palindromic substrings are possible ; else not - possible ; ","context":"","code":"def check(s, n):\n    st = []\n    for i in range(n):\n        if (len(st) != 0 and st[len(st) - 1] == s[i]):\n            st .pop()\n        else:\n            st .append(s[i])\n    if (len(st) == 0):\n        return True\n    else:\n        return False\n","test":"\nstr = \"aanncddc\"\nn = len(str)\nif (check(str, n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"check"}
{"text":"number of strings in two array satisfy the given conditions | python3 program for the above approach ; to store the frequency of string after bitmasking ; to store result for each string in arr2 [ ] ; traverse the arr1 [ ] and bitmask each string in it ; bitmasking for each string s ; update the frequency of string with it 's bitmasking value ; traverse the arr2 [ ] ; bitmasking for each string s ; check if temp is present in an unordered_map or not ; check for next set bit ; push the count for current string in resultant array ; print the count for each string ; ","context":"\nfrom collections import defaultdict\n\n","code":"def findNumOfValidWords(w, p):\n    m = defaultdict(int)\n    res = []\n    for s in w:\n        val = 0\n        for c in s:\n            val = val | (1 << (ord(c) - ord('a')))\n        m[val] += 1\n    for s in p:\n        val = 0\n        for c in s:\n            val = val | (1 << (ord(c) - ord('a')))\n        temp = val\n        first = ord(s[0]) - ord('a')\n        count = 0\n        while (temp != 0):\n            if (((temp >> first) & 1) == 1):\n                if (temp in m):\n                    count += m[temp]\n            temp = (temp - 1) & val\n        res .append(count)\n    for it in res:\n        print(it)\n","test":"\nif __name__ == \"__main__\":\n    arr1 = [\"aaaa\", \"asas\", \"able\", \"ability\", \"actt\", \"actor\", \"access\"]\n    arr2 = [\"aboveyz\", \"abrodyz\", \"absolute\", \"absoryz\", \"actresz\", \"gaswxyz\"]\n    findNumOfValidWords(arr1, arr2)\n","output":"1\n1\n3\n2\n4\n0\n","fn_call":"findNumOfValidWords"}
{"text":"maximize the decimal equivalent by flipping only a contiguous set of 0 s | function to print the binary number ; check if the current number is 0 ; find the continuous 0 s ; replace initially occurring 0 with 1 ; return the string and break the loop ; ","context":"","code":"def flip(s):\n    s = list(s)\n    for i in range(len(s)):\n        if (s[i] == '0'):\n            while (s[i] == '0'):\n                s[i] = '1'\n                i += 1\n            s = ''.join(map(str, s))\n            return s\n","test":"\ns = \"100010001\"\nprint(flip(s))\n","output":"111110001\n","fn_call":"flip"}
{"text":"sentence case of a given camel cased string | function to return the original string after converting it back from camelcase ; print the first character as it is ; traverse the rest of the characters one by one ; if current character is uppercase prspace followed by the current character in lowercase ; else print the current character ; ","context":"","code":"def getOrgString(s):\n    print(s[0], end=\"\")\n    i = 1\n    while (i < len(s)):\n        if (ord(s[i]) >= ord('A') and ord(s[i]) <= ord('Z')):\n            print(\" \", s[i].lower(), end=\"\")\n        else:\n            print(s[i], end=\"\")\n        i += 1\n","test":"\ns = \"ILoveGeeksForGeeks\"\ngetOrgString(s)\n","output":"I  love  geeks  for  geeks","fn_call":"getOrgString"}
{"text":"count occurrences of a character in a repeated string | function to count the character 'a ; atleast k repetition are required ; if n is not the multiple of the string size check for the remaining repeating character . ; ","context":"\n","code":"def countChar(str, x):\n    count = 0\n    for i in range(len(str)):\n        if (str[i] == x):\n            count += 1\n    n = 10\n    repetitions = n \/\/ len(str)\n    count = count * repetitions\n    l = n % len(str)\n    for i in range(l):\n        if (str[i] == x):\n            count += 1\n    return count\n","test":"\nstr = \"abcac\"\nprint(countChar(str, 'a'))\n","output":"4\n","fn_call":"countChar"}
{"text":"frequency measuring techniques for competitive programming | python3 program to count frequencies of array items having small values . ; create an array to store counts . the size of array is limit + 1 and all values are initially 0 ; traverse through array elements and count frequencies ( assuming that elements are limited by limit ) ; ","context":"","code":"def countFreq(arr, n, limit):\n    count = [0 for i in range(limit + 1)]\n    for i in range(n):\n        count[arr[i]] += 1\n    for i in range(limit + 1):\n        if (count[i] > 0):\n            print(i, count[i])\n","test":"\narr = [5, 5, 6, 6, 5, 6, 1, 2, 3, 10, 10]\nn = len(arr)\nlimit = 10\ncountFreq(arr, n, limit)\n","output":"1 1\n2 1\n3 1\n5 3\n6 3\n10 2\n","fn_call":"countFreq"}
{"text":"check if a string has m consecutive 1 ' s \u2581 or \u2581 0' s | function that checks if the binary string contains m consecutive 1 ' s \u2581 or \u2581 0' s ; length of binary string ; counts zeros ; counts 1 's ; count consecutive 0 's ; count consecutive 1 's ; ","context":"","code":"def check(s, m):\n    l = len(s)\n    c1 = 0\n    c2 = 0\n    for i in range(0, l - 1):\n        if (s[i] == '0'):\n            c2 = 0\n            c1 = c1 + 1\n        else:\n            c1 = 0\n            c2 = c2 + 1\n        if (c1 == m or c2 == m):\n            return True\n    return False\n","test":"\ns = \"001001\"\nm = 2\nif (check(s, m)):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","output":"YES\n","fn_call":"check"}
{"text":"product of nodes at k | function to find product of digits of elements at k - th level ; initialize result ; increasing level number ; decreasing level number ; check if current level is the desired level or not ; required product ; ","context":"","code":"def productAtKthLevel(tree, k):\n    level = -1\n    product = 1\n    n = len(tree)\n    for i in range(0, n):\n        if (tree[i] == '('):\n            level += 1\n        elif (tree[i] == ')'):\n            level -= 1\n        else:\n            if (level == k):\n                product *= (int(tree[i]) - int('0'))\n    return product\n","test":"\ntree = \"(0(5(6()())(4()(9()())))(7(1()())(3()())))\"\nk = 2\nprint(productAtKthLevel(tree, k))\n","output":"72\n","fn_call":"productAtKthLevel"}
{"text":"removing row or column wise duplicates from matrix of characters | function to check duplicates in row and column ; create an array ispresent and initialize all entries of it as false . the value of ispresent [ i ] [ j ] is going to be true if s [ i ] [ j ] is present in its row or column . ; checking every row for duplicates of a [ i ] [ j ] ; checking every row for duplicates of a [ i ] [ j ] ; if the character is unique in its row and column ; ","context":"","code":"def findDuplicates(a, n, m):\n    isPresent = [[False for i in range(n)]for j in range(m)]\n    for i in range(n):\n        for j in range(m):\n            for k in range(n):\n                if i != k and a[i][j] == a[k][j]:\n                    isPresent[i][j] = True\n                    isPresent[k][j] = True\n            for k in range(m):\n                if j != k and a[i][j] == a[i][k]:\n                    isPresent[i][j] = True\n                    isPresent[i][k] = True\n    for i in range(n):\n        for j in range(m):\n            if not isPresent[i][j]:\n                print(a[i][j], end=\"\")\n","test":"\nif __name__ == \"__main__\":\n    n = 2\n    m = 2\n    a = [\"zx\", \"xz\"]\n    findDuplicates(a, n, m)\n","output":"zxxz","fn_call":"findDuplicates"}
{"text":"program to check for isbn | python code to check if a given isbn is valid or not . ; check for length ; computing weighted sum of first 9 digits ; checking last digit ; if last digit is ' x ' , add 10 to sum , else add its value . ; return true if weighted sum of digits is divisible by 11 ; ","context":"","code":"def isValidISBN(isbn):\n    if len(isbn) != 10:\n        return False\n    _sum = 0\n    for i in range(9):\n        if 0 <= int(isbn[i]) <= 9:\n            _sum += int(isbn[i]) * (10 - i)\n        else:\n            return False\n    if (isbn[9] != 'X' and 0 <= int(isbn[9]) <= 9):\n        return False\n    _sum += 10 if isbn[9] == 'X'else int(isbn[9])\n    return (_sum % 11 == 0)\n","test":"\nisbn = \"007462542X\"\nif isValidISBN(isbn):\n    print('Valid')\nelse:\n    print(\"Invalid\")\n","output":"Valid\n","fn_call":"isValidISBN"}
{"text":"reverse vowels in a given string | utility function to check for vowel ; function to reverse order of vowels ; storing the vowels separately ; placing the vowels in the reverse order in the string ; ","context":"","code":"def isVowel(c):\n    if (c == 'a' or c == 'A' or c == 'e' or c == 'E' or c == 'i' or c ==\n            'I' or c == 'o' or c == 'O' or c == 'u' or c == 'U'):\n        return True\n    return False\n\n\ndef reverserVowel(string):\n    j = 0\n    vowel = [0] * len(string)\n    string = list(string)\n    for i in range(len(string)):\n        if isVowel(string[i]):\n            vowel[j] = string[i]\n            j += 1\n    for i in range(len(string)):\n        if isVowel(string[i]):\n            j -= 1\n            string[i] = vowel[j]\n    return ''.join(string)\n","test":"\nif __name__ == \"__main__\":\n    string = \"hello world\"\n    print(reverserVowel(string))\n","output":"hollo werld\n","fn_call":"reverserVowel"}
{"text":"string containing first letter of every word in a given string with spaces | function to find string which has first character of each word . ; traverse the string . ; if it is space , set v as true . ; else check if v is true or not . if true , copy character in output string and set v as false . ; ","context":"","code":"def firstLetterWord(str):\n    result = \"\"\n    v = True\n    for i in range(len(str)):\n        if (str[i] == ' '):\n            v = True\n        elif (str[i] != ' ' and v):\n            result += (str[i])\n            v = False\n    return result\n","test":"\nif __name__ == \"__main__\":\n    str = \"geeks for geeks\"\n    print(firstLetterWord(str))\n","output":"gfg\n","fn_call":"firstLetterWord"}
{"text":"unique paths covering every non | function for dfs . i , j == > current cell indexes vis == > to mark visited cells ans == > result z == > current count 0 s visited z_count == > total 0 s present ; mark the block as visited ; update the count ; if end block reached ; if path covered all the non - obstacle blocks ; up ; down ; left ; right ; unmark the block ( unvisited ) ; function to return the count of the unique paths ; total 0 s present ; count non - obstacle blocks ; starting position ; ","context":"","code":"def dfs(i, j, grid, vis, ans, z, z_count):\n    n = len(grid)\n    m = len(grid[0])\n    vis[i][j] = 1\n    if (grid[i][j] == 0):\n        z += 1\n    if (grid[i][j] == 2):\n        if (z == z_count):\n            ans += 1\n        vis[i][j] = 0\n        return grid, vis, ans\n    if (i >= 1 and not vis[i - 1][j] and grid[i - 1][j] != -1):\n        grid, vis, ans = dfs(i - 1, j, grid, vis, ans, z, z_count)\n    if (i < n - 1 and not vis[i + 1][j] and grid[i + 1][j] != -1):\n        grid, vis, ans = dfs(i + 1, j, grid, vis, ans, z, z_count)\n    if (j >= 1 and not vis[i][j - 1] and grid[i][j - 1] != -1):\n        grid, vis, ans = dfs(i, j - 1, grid, vis, ans, z, z_count)\n    if (j < m - 1 and not vis[i][j + 1] and grid[i][j + 1] != -1):\n        grid, vis, ans = dfs(i, j + 1, grid, vis, ans, z, z_count)\n    vis[i][j] = 0\n    return grid, vis, ans\n\n\ndef uniquePaths(grid):\n    z_count = 0\n    n = len(grid)\n    m = len(grid[0])\n    ans = 0\n    vis = [[0 for j in range(m)]for i in range(n)]\n    x = 0\n    y = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 0:\n                z_count += 1\n            elif (grid[i][j] == 1):\n                x = i\n                y = j\n    grid, vis, ans = dfs(x, y, grid, vis, ans, 0, z_count)\n    return ans\n","test":"\nif __name__ == '__main__':\n    grid = [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 2, -1]]\n    print(uniquePaths(grid))\n","output":"2\n","fn_call":"uniquePaths"}
{"text":"count of unordered pairs ( x , y ) of array which satisfy given equation | return the number of unordered pairs satisfying the conditions ; ans stores the number of unordered pairs ; making each value of array to positive ; sort the array ; for each index calculating the right boundary for the unordered pairs ; return the final result ; ","context":"","code":"def numPairs(a, n):\n    ans = 0\n    for i in range(n):\n        a[i] = abs(a[i])\n    a .sort()\n    for i in range(n):\n        index = 0\n        for j in range(i + 1, n):\n            if (2 * a[i] >= a[j - 1] and 2 * a[i] < a[j]):\n                index = j\n        if index == 0:\n            index = n\n        ans += index - i - 1\n    return ans\n","test":"\na = [3, 6]\nn = len(a)\nprint(numPairs(a, n))\n","output":"1\n","fn_call":"numPairs"}
{"text":"area of a square | using side , diagonal and perimeter | function to find the area of a square ; use above formula ; ","context":"","code":"def areaOfSquare(S):\n    area = S * S\n    return area\n","test":"\nif __name__ == '__main__':\n    S = 5\n    print(areaOfSquare(S))\n","output":"25\n","fn_call":"areaOfSquare"}
{"text":"maximum points of intersections possible among x circles and y straight lines | python3 program to implement the above approach ; number of circles ; number of straight lines ; ","context":"","code":"def maxPointOfIntersection(x, y):\n    k = y * (y - 1) \/\/ 2\n    k = k + x * (2 * y + x - 1)\n    return k\n","test":"\nx = 3\ny = 4\nprint(maxPointOfIntersection(x, y))\n","output":"36\n","fn_call":"maxPointOfIntersection"}
{"text":"icosihenagonal number | function to find icosihenagonal number ; formula to calculate nth icosihenagonal number ; ","context":"","code":"def Icosihenagonal_num(n):\n    return (19 * n * n - 17 * n) \/ 2\n","test":"\nn = 3\nprint(int(Icosihenagonal_num(n)))\nn = 10\nprint(int(Icosihenagonal_num(n)))\n","output":"60\n865\n","fn_call":"Icosihenagonal_num"}
{"text":"Find the centroid of a non | Python3 program to implement the above approach ; For all vertices ; Calculate value of A using shoelace formula ; Calculating coordinates of centroid of polygon ; Coordinate of the vertices","context":"","code":"def find_Centroid(v):\n    ans = [0, 0]\n    n = len(v)\n    signedArea = 0\n    for i in range(len(v)):\n        x0 = v[i][0]\n        y0 = v[i][1]\n        x1 = v[(i + 1) % n][0]\n        y1 = v[(i + 1) % n][1]\n        A = (x0 * y1) - (x1 * y0)\n        signedArea += A\n        ans[0] += (x0 + x1) * A\n        ans[1] += (y0 + y1) * A\n    signedArea *= 0.5\n    ans[0] = (ans[0]) \/ (6 * signedArea)\n    ans[1] = (ans[1]) \/ (6 * signedArea)\n    return ans\n","test":"\nvp = [[1, 2], [3, -4], [6, -7]]\nans = find_Centroid(vp)\nprint(round(ans[0], 12), ans[1])\n","output":"3.333333333333 -3.0\n","fn_call":"find_Centroid"}
{"text":"distance between two parallel planes in 3 | python program to find the distance between two parallel planes in 3 d . ; function to find distance ; ","context":"\nimport math\n\n","code":"def distance(a1, b1, c1, d1, a2, b2, c2, d2):\n    if (a1 \/ a2 == b1 \/ b2 and b1 \/ b2 == c1 \/ c2):\n        x1 = y1 = 0\n        z1 = -d1 \/ c1\n        d = abs((c2 * z1 + d2)) \/ (math .sqrt(a2 * a2 + b2 * b2 + c2 * c2))\n        print(\"Perpendicular distance is\"), d\n    else:\n        print(\"Planes are not parallel\")\n","test":"\na1 = 1\nb1 = 2\nc1 = -1\nd1 = 1\na2 = 3\nb2 = 6\nc2 = -3\nd2 = -4\ndistance(a1, b1, c1, d1, a2, b2, c2, d2)\n","output":"Perpendicular distance is\n","fn_call":"distance"}
{"text":"count of ways to form 2 necklace from n beads containing n \/ 2 beads each | function to calculate factorial ; function to count number of ways to make 2 necklace having exactly n \/ 2 beads if each bead is considered different ; number of ways to choose n \/ 2 beads from n beads ; number of ways to permute n \/ 2 beads ; divide ans by 2 to remove repetitions ; return ans ; ","context":"","code":"def factorial(n):\n    if (n == 0):\n        return 1\n    return n * factorial(n - 1)\n\n\ndef numOfNecklace(N):\n    ans = factorial(N) \/\/ (factorial(N \/\/ 2) * factorial(N \/\/ 2))\n    ans = ans * factorial(N \/\/ 2 - 1)\n    ans = ans * factorial(N \/\/ 2 - 1)\n    ans \/\/= 2\n    return ans\n","test":"\nif __name__ == '__main__':\n    N = 4\n    print(numOfNecklace(N))\n","output":"3\n","fn_call":"numOfNecklace"}
{"text":"check if a number s can be made divisible by d by repeatedly adding the remainder to s | function to check if s is divisible by d while changing s to ( s + s % d ) ; v ( 0 ) = s % d ; stores the encountered values ; v ( i ) = ( v ( i - 1 ) + v ( i - 1 ) % d ) % d ; check if the value has already been encountered ; edge case ; otherwise , insert it into the hashmap ; ","context":"","code":"def isDivisibleByDivisor(S, D):\n    S %= D\n    hashMap = set()\n    hashMap .add(S)\n    for i in range(D + 1):\n        S += (S % D)\n        S %= D\n        if (S in hashMap):\n            if (S == 0):\n                return \"Yes\"\n            return \"No\"\n        else:\n            hashMap .add(S)\n    return \"Yes\"\n","test":"\nif __name__ == '__main__':\n    S = 3\n    D = 6\n    print(isDivisibleByDivisor(S, D))\n","output":"Yes\n","fn_call":"isDivisibleByDivisor"}
{"text":"minimum number of given moves required to reach ( 1 , 1 ) from ( x , y ) | function to count the number of steps required to convert ( x , y ) to ( 1 , 1 ) ; store the required result ; iterate while both x and y are not equal to 0 ; if x is greater than y ; update count and value of x ; otherwise ; update count and value of y ; if both x and y > 1 ; print the result ; ","context":"","code":"def minimumSteps(x, y):\n    cnt = 0\n    while (x != 0 and y != 0):\n        if (x > y):\n            cnt += x \/ y\n            x %= y\n        else:\n            cnt += y \/ x\n            y %= x\n    cnt -= 1\n    if (x > 1 or y > 1):\n        cnt = -1\n    print(int(cnt))\n","test":"\nif __name__ == '__main__':\n    x = 3\n    y = 1\n    minimumSteps(x, y)\n","output":"2\n","fn_call":"minimumSteps"}
{"text":"minimum number of bracket reversals needed to make an expression balanced | returns count of minimum reversals for making expr balanced . returns - 1 if expr cannot be balanced . ; length of expression must be even to make it balanced by using reversals . ; after this loop , stack contains unbalanced part of expression , i . e . , expression of the form \" . . . . \" ; length of the reduced expression red_len = ( m + n ) ; count opening brackets at the end of stack ; return ceil ( m \/ 2 ) + ceil ( n \/ 2 ) which is actually equal to ( m + n ) \/ 2 + n % 2 when m + n is even . ; ","context":"","code":"def countMinReversals(expr):\n    lenn = len(expr)\n    if (lenn % 2):\n        return -1\n    s = []\n    for i in range(lenn):\n        if (expr[i] == '' and len(s)):\n            if (s[0] == ''):\n                s .pop(0)\n            else:\n                s .insert(0, expr[i])\n        else:\n            s .insert(0, expr[i])\n    red_len = len(s)\n    n = 0\n    while (len(s) and s[0] == ''):\n        s .pop(0)\n        n += 1\n    return (red_len \/\/ 2 + n % 2)\n","test":"\nif __name__ == '__main__':\n    expr = \"}}{{\"\n    print(countMinReversals(expr .strip()))\n","output":"2\n","fn_call":"countMinReversals"}
{"text":"form minimum number from given sequence | prints the minimum number that can be formed from input sequence of i ' s \u2581 and \u2581 d ' s ; initialize current_max ( to make sure that we don 't use repeated character ; initialize last_entry ( keeps track for last printed digit ) ; iterate over input array ; initialize ' noofnextd ' to get count of next d 's available ; if letter is ' i ' calculate number of next consecutive d 's  available ; if ' i ' is first letter , print incremented sequence from 1 ; set max digit reached ; if not first letter get next digit to print ; print digit for i ; for all next consecutive ' d ' print decremented sequence ; if letter is 'd   ; if ' d ' is first letter in sequence find number of next d 's available ; calculate first digit to print based on number of consecutive d 's ; print twice for the first time ; store last entry ; if current ' d ' is not first letter decrement last_entry ; ","context":"","code":"def PrintMinNumberForPattern(arr):\n    curr_max = 0\n    last_entry = 0\n    i = 0\n    while i < len(arr):\n        noOfNextD = 0\n        if arr[i] == \"I\":\n            j = i + 1\n            while j < len(arr) and arr[j] == \"D\":\n                noOfNextD += 1\n                j += 1\n            if i == 0:\n                curr_max = noOfNextD + 2\n                last_entry += 1\n                print(\"\", last_entry, end=\"\")\n                print(\"\", curr_max, end=\"\")\n                last_entry = curr_max\n            else:\n                curr_max += noOfNextD + 1\n                last_entry = curr_max\n                print(\"\", last_entry, end=\"\")\n            for k in range(noOfNextD):\n                last_entry -= 1\n                print(\"\", last_entry, end=\"\")\n                i += 1\n        elif arr[i] == \"D\":\n            if i == 0:\n                j = i + 1\n                while j < len(arr) and arr[j] == \"D\":\n                    noOfNextD += 1\n                    j += 1\n                curr_max = noOfNextD + 2\n                print(\"\", curr_max, curr_max - 1, end=\"\")\n                last_entry = curr_max - 1\n            else:\n                print(\"\", last_entry - 1, end=\"\")\n                last_entry -= 1\n        i += 1\n    print()\n","test":"\nif __name__ == \"__main__\":\n    PrintMinNumberForPattern(\"IDID\")\n    PrintMinNumberForPattern(\"I\")\n    PrintMinNumberForPattern(\"DD\")\n    PrintMinNumberForPattern(\"II\")\n    PrintMinNumberForPattern(\"DIDI\")\n    PrintMinNumberForPattern(\"IIDDD\")\n    PrintMinNumberForPattern(\"DDIDDIID\")\n","output":" 1 3 2 5 4\n 1 2\n 3 2 1\n 1 2 3\n 2 1 4 3 5\n 1 2 6 5 4 3\n 3 2 1 6 5 4 7 9 8\n","fn_call":"PrintMinNumberForPattern"}
{"text":"form minimum number from given sequence | python3 program to print minimum number that can be formed from a given sequence of is and ds ; min_avail represents the minimum number which is still available for inserting in the output vector . pos_of_i keeps track of the most recent index where ' i ' was encountered w . r . t the output vector ; vector to store the output ; cover the base cases ; traverse rest of the input ; print the number ; ","context":"","code":"def printLeast(arr):\n    min_avail = 1\n    pos_of_I = 0\n    v = []\n    if (arr[0] == 'I'):\n        v .append(1)\n        v .append(2)\n        min_avail = 3\n        pos_of_I = 1\n    else:\n        v .append(2)\n        v .append(1)\n        min_avail = 3\n        pos_of_I = 0\n    for i in range(1, len(arr)):\n        if (arr[i] == 'I'):\n            v .append(min_avail)\n            min_avail += 1\n            pos_of_I = i + 1\n        else:\n            v .append(v[i])\n            for j in range(pos_of_I, i + 1):\n                v[j] += 1\n            min_avail += 1\n    print(*v, sep=' ')\n","test":"\nprintLeast(\"IDID\")\nprintLeast(\"I\")\nprintLeast(\"DD\")\nprintLeast(\"II\")\nprintLeast(\"DIDI\")\nprintLeast(\"IIDDD\")\nprintLeast(\"DDIDDIID\")\n","output":"1 3 2 5 4\n1 2\n3 2 1\n1 2 3\n2 1 4 3 5\n1 2 6 5 4 3\n3 2 1 6 5 4 7 9 8\n","fn_call":"printLeast"}
{"text":"form minimum number from given sequence | function to decode the given sequence to construct minimum number without repeated digits ; string for storing result ; take a list to work as stack ; run n + 1 times where n is length of input sequence , as length of result string is always 1 greater ; push number i + 1 into the stack ; if all characters of the input sequence are processed or current character is 'i ; run while loop untill stack is empty ; pop the element on top of stack and store it in result string ; ","context":"","code":"def PrintMinNumberForPattern(Strr):\n    res = ''\n    stack = []\n    for i in range(len(Strr) + 1):\n        stack .append(i + 1)\n        if (i == len(Strr) or Strr[i] == 'I'):\n            while len(stack) > 0:\n                res += str(stack .pop())\n                res += ' '\n    print(res)\n","test":"\nPrintMinNumberForPattern(\"IDID\")\nPrintMinNumberForPattern(\"I\")\nPrintMinNumberForPattern(\"DD\")\nPrintMinNumberForPattern(\"II\")\nPrintMinNumberForPattern(\"DIDI\")\nPrintMinNumberForPattern(\"IIDDD\")\nPrintMinNumberForPattern(\"DDIDDIID\")\n","output":"1 3 2 5 4 \n1 2 \n3 2 1 \n1 2 3 \n2 1 4 3 5 \n1 2 6 5 4 3 \n3 2 1 6 5 4 7 9 8 \n","fn_call":"PrintMinNumberForPattern"}
{"text":"form minimum number from given sequence | returns minimum number made from given sequence without repeating digits ; the loop runs for each input character as well as one additional time for assigning rank to remaining characters ; ","context":"","code":"def getMinNumberForPattern(seq):\n    n = len(seq)\n    if (n >= 9):\n        return \"-1\"\n    result = [None] * (n + 1)\n    count = 1\n    for i in range(n + 1):\n        if (i == n or seq[i] == 'I'):\n            for j in range(i - 1, -2, -1):\n                result[j + 1] = int('0' + str(count))\n                count += 1\n                if (j >= 0 and seq[j] == 'I'):\n                    break\n    return result\n","test":"\nif __name__ == '__main__':\n    inputs = [\"IDID\", \"I\", \"DD\", \"II\", \"DIDI\", \"IIDDD\", \"DDIDDIID\"]\n    for Input in inputs:\n        print(*(getMinNumberForPattern(Input)))\n","output":"1 3 2 5 4\n1 2\n3 2 1\n1 2 3\n2 1 4 3 5\n1 2 6 5 4 3\n3 2 1 6 5 4 7 9 8\n","fn_call":"getMinNumberForPattern"}
{"text":"check if the first and last digit of the smallest number forms a prime | python3 implementation of above approach ; function to check prime ; function to generate smallest possible number with given digits ; declare a hash array of size 10 and initialize all the elements to zero ; store the number of occurrences of the digits in the given array into the hash table ; traverse the hash in ascending order to print the required number ; print the number of times a digits occurs ; extracting the first digit ; extracting the last digit ; printing the prime combinations ; ","context":"\nimport math as mt\n\n","code":"def isPrime(n):\n    i, c = 0, 0\n    for i in range(1, n \/\/ 2):\n        if (n % i == 0):\n            c += 1\n    if (c == 1):\n        return 1\n    else:\n        return 0\n\n\ndef findMinNum(arr, n):\n    first, last = 0, 0\n    Hash = [0 for i in range(10)]\n    for i in range(n):\n        Hash[arr[i]] += 1\n    print(\"Minimum number: \", end=\"\")\n    for i in range(0, 10):\n        for j in range(Hash[i]):\n            print(i, end=\"\")\n    print()\n    for i in range(10):\n        if (Hash[i] != 0):\n            first = i\n            break\n    for i in range(9, -1, -1):\n        if (Hash[i] != 0):\n            last = i\n            break\n    num = first * 10 + last\n    rev = last * 10 + first\n    print(\"Prime combinations: \", end=\"\")\n    if (isPrime(num) and isPrime(rev)):\n        print(num, \" \", rev)\n    elif (isPrime(num)):\n        print(num)\n    elif (isPrime(rev)):\n        print(rev)\n    else:\n        print(\"No combinations exist\")\n","test":"\narr = [1, 2, 4, 7, 8]\nfindMinNum(arr, 5)\n","output":"Minimum number: 12478\nPrime combinations: No combinations exist\n","fn_call":"findMinNum"}
{"text":"Finding a Non Transitive Co | Function to return gcd of a and b ; function to check for gcd ; a and b are coprime if their gcd is 1. ; Checks if any possible triplet ( a , b , c ) satifying the condition that ( a , b ) is coprime , ( b , c ) is coprime but ( a , c ) isnt ; Generate and check for all possible triplets between L and R ; if we find any such triplets set flag to true ; flag = True indicates that a pair exists between L and R ; finding possible Triplet between 2 and 10 ; finding possible Triplet between 23 and 46","context":"","code":"def gcd(a, b):\n    if (a == 0):\n        return b\n    return gcd(b % a, a)\n\n\ndef coprime(a, b):\n    return (gcd(a, b) == 1)\n\n\ndef possibleTripletInRange(L, R):\n    flag = False\n    possibleA = 0\n    possibleB = 0\n    possibleC = 0\n    for a in range(L, R + 1):\n        for b in range(a + 1, R + 1):\n            for c in range(b + 1, R + 1):\n                if (coprime(a, b) and coprime(b, c) and coprime(a, c) == False):\n                    flag = True\n                    possibleA = a\n                    possibleB = b\n                    possibleC = c\n                    break\n    if (flag):\n        print(\n            \"(\",\n            possibleA,\n            \",\",\n            possibleB,\n            \",\",\n            possibleC,\n            \") is one such\",\n            \"possible triplet between\",\n            L,\n            \"and\",\n            R)\n    else:\n        print(\"No Such Triplet exists between\", L, \"and\", R)\n","test":"\nL = 2\nR = 10\npossibleTripletInRange(L, R)\nL = 23\nR = 46\npossibleTripletInRange(L, R)\n","output":"( 8 , 9 , 10 ) is one such possible triplet between 2 and 10\n( 44 , 45 , 46 ) is one such possible triplet between 23 and 46\n","fn_call":"possibleTripletInRange"}
{"text":"reach a and b by multiplying them with k and k ^ 2 at every step | python 3 program to determine if a and b can be reached starting from 1 , 1 following the given steps . ; function to check is it is possible to reach a and b starting from 1 and 1 ; find the cuberoot of the number ; divide the number by cuberoot ; if it is a perfect cuberoot and divides a and b ; ","context":"\nimport numpy as np\n\n","code":"def possibleToReach(a, b):\n    c = np .cbrt(a * b)\n    re1 = a \/\/ c\n    re2 = b \/\/ c\n    if ((re1 * re1 * re2 == a) and (re2 * re2 * re1 == b)):\n        return True\n    else:\n        return False\n","test":"\nif __name__ == \"__main__\":\n    A = 60\n    B = 450\n    if (possibleToReach(A, B)):\n        print(\"yes\")\n    else:\n        print(\"no\")\n","output":"yes\n","fn_call":"possibleToReach"}
{"text":"undulating numbers | python3 program to check whether a number is undulating or not ; considering the definition with restriction that there should be at least 3 digits ; check if all alternate digits are same or not . ; ","context":"","code":"def isUndulating(n):\n    if (len(n) <= 2):\n        return False\n    for i in range(2, len(n)):\n        if (n[i - 2] != n[i]):\n            return False\n    return True\n","test":"\nn = \"1212121\"\nif (isUndulating(n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isUndulating"}
{"text":"program to find the sum of a series ( 1 * 1 ) + ( 2 * 2 ) + ( 3 * 3 ) + ( 4 * 4 ) + ( 5 * 5 ) + ... + ( n * n ) | function to calculate the following series ; ","context":"","code":"def Series(n):\n    sums = 0\n    for i in range(1, n + 1):\n        sums += (i * i)\n    return sums\n","test":"\nn = 3\nres = Series(n)\nprint(res)\n","output":"14\n","fn_call":"Series"}
{"text":"count numbers with unit digit k in given range | efficient python program to count numbers with last digit as k in given range . ; returns count of numbers with k as last digit . ; ","context":"\nimport math\n\n","code":"def counLastDigitK(low, high, k):\n    mlow = 10 * math .ceil(low \/ 10.0)\n    mhigh = 10 * int(high \/ 10.0)\n    count = (mhigh - mlow) \/ 10\n    if (high % 10 >= k):\n        count += 1\n    if (low % 10 <= k and (low % 10) > 0):\n        count += 1\n    return int(count)\n","test":"\nlow = 3\nhigh = 35\nk = 3\nprint(counLastDigitK(low, high, k))\n","output":"4\n","fn_call":"counLastDigitK"}
{"text":"sum of all numbers divisible by 6 in a given range | function to calculate the sum of all numbers divisible by 6 in range l - r . . ; no of multiples of 6 upto r ; no of multiples of 6 upto l - 1 ; summation of all multiples of 6 upto r ; summation of all multiples of 6 upto l - 1 ; returns the answer ; ","context":"","code":"def sumDivisible(L, R):\n    p = int(R \/ 6)\n    q = int((L - 1) \/ 6)\n    sumR = 3 * (p * (p + 1))\n    sumL = (q * (q + 1)) * 3\n    return sumR - sumL\n","test":"\nL = 1\nR = 20\nprint(sumDivisible(L, R))\n","output":"36\n","fn_call":"sumDivisible"}
{"text":"largest smaller number possible using only one swap operation | python3 program to find the largest smaller number by swapping one digit . ; returns largest possible number with one swap such that the number is smaller than str . it is assumed that there are leading 0 s . ; traverse from right until we find a digit which is greater than its next digit . for example , in 34125 , our index is 4. ; we can also use binary search here as digits after index are sorted in increasing order . find the biggest digit in the right of arr [ index ] which is smaller than arr [ index ] ; if index is - 1 i . e . digits are in increasing order . ; swap both values ; ","context":"\nimport sys\n\n","code":"def prevNum(string, n):\n    index = -1\n    for i in range(n - 2, -1, -1):\n        if int(string[i]) > int(string[i + 1]):\n            index = i\n            break\n    smallGreatDgt = -1\n    for i in range(n - 1, index, -1):\n        if (smallGreatDgt == -1 and int(string[i]) < int(string[index])):\n            smallGreatDgt = i\n        elif (index > -1 and int(string[i]) >= int(string[smallGreatDgt]) and int(string[i]) < int(string[index])):\n            smallGreatDgt = i\n    if index == -1:\n        return \"\".join(\"-1\")\n    else:\n        (string[index], string[smallGreatDgt]) = (\n            string[smallGreatDgt], string[index])\n    return \"\".join(string)\n","test":"\nif __name__ == '__main__':\n    n_str = \"34125\"\n    ans = prevNum(list(n_str), len(n_str))\n    print(ans)\n","output":"32145\n","fn_call":"prevNum"}
{"text":"sgn value of a polynomial | returns value of poly [ 0 ] x ( n - 1 ) + poly [ 1 ] x ( n - 2 ) + . . + poly [ n - 1 ] ; ","context":"","code":"def horner(poly, n, x):\n    result = poly[0]\n    for i in range(1, n):\n        result = (result * x + poly[i])\n    return result\n\n\ndef findSign(poly, n, x):\n    result = horner(poly, n, x)\n    if (result > 0):\n        return 1\n    elif (result < 0):\n        return -1\n    return 0\n","test":"\npoly = [2, -6, 2, -1]\nx = 3\nn = len(poly)\nprint(\"Sign of polynomial is \", findSign(poly, n, x))\n","output":"Sign of polynomial is  1\n","fn_call":"findSign"}
{"text":"insert minimum number in array so that sum of array becomes prime | python3 program to find minimum number to insert in array so their sum is prime ; function to calculate prime using sieve of eratosthenes ; find prime number greater than a number ; find prime greater than n ; check if num is prime ; increment num ; to find number to be added so sum of array is prime ; call sieveoferatostheneses to calculate primes ; to find sum of array elements ; if sum is already prime return 0 ; to find prime number greater than sum ; return difference of sum and num ; ","context":"\nisPrime = [1] * 100005\n\n","code":"def sieveOfEratostheneses():\n    isPrime[1] = False\n    i = 2\n    while i * i < 100005:\n        if (isPrime[i]):\n            j = 2 * i\n            while j < 100005:\n                isPrime[j] = False\n                j += i\n        i += 1\n    return\n\n\ndef findPrime(n):\n    num = n + 1\n    while (num):\n        if isPrime[num]:\n            return num\n        num += 1\n    return 0\n\n\ndef minNumber(arr):\n    sieveOfEratostheneses()\n    s = 0\n    for i in range(0, len(arr)):\n        s += arr[i]\n    if isPrime[s]:\n        return 0\n    num = findPrime(s)\n    return num - s\n","test":"\narr = [2, 4, 6, 8, 12]\nprint(minNumber(arr))\n","output":"5\n","fn_call":"minNumber"}
{"text":"sum of all subarrays | set 1 | computes sum all sub - array ; pick starting point ; pick ending point ; sum subarray between current starting and ending points ; ","context":"","code":"def SubArraySum(arr, n):\n    temp, result = 0, 0\n    for i in range(0, n):\n        temp = 0\n        for j in range(i, n):\n            temp += arr[j]\n            result += temp\n    return result\n","test":"\narr = [1, 2, 3]\nn = len(arr)\nprint(\"Sum of SubArray :\", SubArraySum(arr, n))\n","output":"Sum of SubArray : 20\n","fn_call":"SubArraySum"}
{"text":"highest power of 2 less than or equal to given number | python3 program to find highest power of 2 smaller than or equal to n . ; ","context":"\nimport math\n\n","code":"def highestPowerof2(n):\n    p = int(math .log(n, 2))\n    return int(pow(2, p))\n","test":"\nn = 10\nprint(highestPowerof2(n))\n","output":"8\n","fn_call":"highestPowerof2"}
{"text":"find ( a ^ b ) % m where ' a ' is very large | python program to find ( a ^ b ) mod m for a large 'a ; utility function to calculate a % m ; convert string s [ i ] to integer which gives the digit value and form the number ; returns find ( a ^ b ) % m ; find a % m ; now multiply ans by b - 1 times and take mod with m ; ","context":"\n\n","code":"def aModM(s, mod):\n    number = 0\n    for i in range(len(s)):\n        number = (number * 10 + int(s[i]))\n        number = number % m\n    return number\n\n\ndef ApowBmodM(a, b, m):\n    ans = aModM(a, m)\n    mul = ans\n    for i in range(1, b):\n        ans = (ans * mul) % m\n    return ans\n","test":"\na = \"987584345091051645734583954832576\"\nb, m = 3, 11\nprint(ApowBmodM(a, b, m))\n","output":"10\n","fn_call":"ApowBmodM"}
{"text":"lagrange 's interpolation | to represent a data point corresponding to x and y = f ( x ) ; function to interpolate the given data points using lagrange 's formula xi -> corresponds to the new data point whose value is to be obtained n -> represents the number of known data points ; initialize result ; compute individual terms of above formula ; add current term to result ; ","context":"\nclass Data:\n    def __init__(self, x, y):\n        self .x = x\n        self .y = y\n\n","code":"def interpolate(f: list, xi: int, n: int) -> float:\n    result = 0.0\n    for i in range(n):\n        term = f[i].y\n        for j in range(n):\n            if j != i:\n                term = term * (xi - f[j].x) \/ (f[i].x - f[j].x)\n        result += term\n    return result\n","test":"\nif __name__ == \"__main__\":\n    f = [Data(0, 2), Data(1, 3), Data(2, 12), Data(5, 147)]\n    print(\"Value of f(3) is :\", interpolate(f, 3, 4))\n","output":"Value of f(3) is : 35.0\n","fn_call":"interpolate"}
{"text":"sieve of sundaram to print all primes smaller than n | prints all prime numbers smaller ; in general sieve of sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . since we want primes smaller than n , we reduce n to half ; this array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j initialize all elements as not marked ; main logic of sundaram . mark all numbers of the form i + j + 2 ij as true where 1 <= i <= j ; since 2 is a prime number ; print other primes . remaining primes are of the form 2 * i + 1 such that marked [ i ] is false . ; ","context":"","code":"def SieveOfSundaram(n):\n    nNew = int((n - 1) \/ 2)\n    marked = [0] * (nNew + 1)\n    for i in range(1, nNew + 1):\n        j = i\n        while ((i + j + 2 * i * j) <= nNew):\n            marked[i + j + 2 * i * j] = 1\n            j += 1\n    if (n > 2):\n        print(2, end=\" \")\n    for i in range(1, nNew + 1):\n        if (marked[i] == 0):\n            print((2 * i + 1), end=\" \")\n","test":"\nn = 20\nSieveOfSundaram(n)\n","output":"2 3 5 7 11 13 17 19 ","fn_call":"SieveOfSundaram"}
{"text":"construct original array starting with k from an array of xor of all elements except elements at same index | function to construct an array with each element equal to xor of all array elements except the element at the same index ; original array ; stores bitwise xor of array ; calculate xor of all array elements ; print the original array b ; ","context":"","code":"def constructArray(A, N, K):\n    B = [0] * N\n    totalXOR = A[0] ^ K\n    for i in range(N):\n        B[i] = totalXOR ^ A[i]\n    for i in range(N):\n        print(B[i], end=\" \")\n","test":"\nif __name__ == '__main__':\n    A = [13, 14, 10, 6]\n    K = 2\n    N = len(A)\n    constructArray(A, N, K)\n","output":"2 1 5 9 ","fn_call":"constructArray"}
{"text":"find extra element in the second array | function to return the extra element in b [ ] ; to store the result ; find the xor of all the element of array a [ ] and array b [ ] ; ","context":"","code":"def extraElement(A, B, n):\n    ans = 0\n    for i in range(n):\n        ans ^= A[i]\n    for i in range(n + 1):\n        ans ^= B[i]\n    return ans\n","test":"\nA = [10, 15, 5]\nB = [10, 100, 15, 5]\nn = len(A)\nprint(extraElement(A, B, n))\n","output":"100\n","fn_call":"extraElement"}
{"text":"hamming distance between two integers | function to calculate hamming distance ; ","context":"","code":"def hammingDistance(n1, n2):\n    x = n1 ^ n2\n    setBits = 0\n    while (x > 0):\n        setBits += x & 1\n        x >>= 1\n    return setBits\n","test":"\nif __name__ == '__main__':\n    n1 = 9\n    n2 = 14\n    print(hammingDistance(9, 14))\n","output":"3\n","fn_call":"hammingDistance"}
{"text":"print bitwise and set of a number n | function to find bitwise subsets naive approach ; ","context":"","code":"def printSubsets(n):\n    for i in range(n + 1):\n        if ((n & i) == i):\n            print(i, \" \", end=\"\")\n","test":"\nn = 9\nprintSubsets(n)\n","output":"0  1  8  9  ","fn_call":"printSubsets"}
{"text":"find most significant set bit of a number | python program to find msb number for given n . ; to find the position of the most significant set bit ; to return the value of the number with set bit at k - th position ; ","context":"\nimport math\n\n","code":"def setBitNumber(n):\n    k = int(math .log(n, 2))\n    return 1 << k\n","test":"\nn = 273\nprint(setBitNumber(n))\n","output":"256\n","fn_call":"setBitNumber"}
{"text":"minimum number of subsets with distinct elements | function to count subsets such that all subsets have distinct elements . ; take input and initialize res = 0 ; sort the array ; traverse the input array and find maximum frequency ; for each number find its repetition \/ frequency ; update res ; ","context":"","code":"def subset(ar, n):\n    res = 0\n    ar .sort()\n    for i in range(0, n):\n        count = 1\n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count += 1\n            else:\n                break\n        res = max(res, count)\n    return res\n","test":"\nar = [5, 6, 9, 3, 4, 3, 4]\nn = len(ar)\nprint(subset(ar, n))\n","output":"2\n","fn_call":"subset"}
{"text":"minimum number of subsets with distinct elements | function to count subsets such that all subsets have distinct elements . ; traverse the input array and store frequencies of elements ; find the maximum value in map . ; ","context":"","code":"def subset(arr, n):\n    mp = {i: 0 for i in range(10)}\n    for i in range(n):\n        mp[arr[i]] += 1\n    res = 0\n    for key, value in mp .items():\n        res = max(res, value)\n    return res\n","test":"\nif __name__ == '__main__':\n    arr = [5, 6, 9, 3, 4, 3, 4]\n    n = len(arr)\n    print(subset(arr, n))\n","output":"2\n","fn_call":"subset"}
{"text":"rearrange array such that sum of same indexed elements is atmost k | ''function to rearrange array such that sum of similar indexed elements does not exceed k ; '' sort the array b[]  in descending order ; '' if condition fails ; '' print the array ; ''","context":"","code":"def rearrangeArray(A, B, N, K):\n    B .sort(reverse=True)\n    flag = True\n    for i in range(N):\n        if (A[i] + B[i] > K):\n            flag = False\n            break\n    if (flag == False):\n        print(\"-1\")\n    else:\n        for i in range(N):\n            print(B[i], end=\" \")\n","test":"\nif __name__ == '__main__':\n    A = [1, 2, 3, 4, 2]\n    B = [1, 2, 3, 1, 1]\n    N = len(A)\n    K = 5\n    rearrangeArray(A, B, N, K)\n","output":"3 2 1 1 1 ","fn_call":"rearrangeArray"}
{"text":"count rows with sum exceeding sum of the remaining matrix | ''function to count the number of rows whose sum exceeds the sum of elements of the remaining matrix ; '' stores the matrix dimensions ; '' to store the result ; '' stores the total sum of  the matrix elements ; '' calculate the total sum ; '' traverse to check for each row ; '' stores the sum of elements  of the current row ; '' calculate the sum of elements  of the current row ; '' if sum of current row exceeds  the sum of rest of the matrix ; '' increase count ; '' print the result ; ''","context":"","code":"def countRows(mat):\n    n = len(mat)\n    m = len(mat[0])\n    count = 0\n    totalSum = 0\n    for i in range(n):\n        for j in range(m):\n            totalSum += mat[i][j]\n    for i in range(n):\n        currSum = 0\n        for j in range(m):\n            currSum += mat[i][j]\n        if (currSum > totalSum - currSum):\n            count += 1\n    print(count)\n","test":"\nif __name__ == '__main__':\n    mat = [[2, -1, 5], [-3, 0, -2], [5, 1, 2]]\n    countRows(mat)\n","output":"2\n","fn_call":"countRows"}
{"text":"check if array contains contiguous integers with duplicates allowed | function to check whether the array contains a set of contiguous integers ; sort the array ; after sorting , check if current element is either same as previous or is one more . ; ","context":"","code":"def areElementsContiguous(arr, n):\n    arr .sort()\n    for i in range(1, n):\n        if (arr[i] - arr[i - 1] > 1):\n            return 0\n    return 1\n","test":"\narr = [5, 2, 3, 6, 4, 4, 6, 6]\nn = len(arr)\nif areElementsContiguous(arr, n):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"areElementsContiguous"}
{"text":"check if array contains contiguous integers with duplicates allowed | function to check whether the array contains a set of contiguous integers ; find maximum and minimum elements . ; there should be at least m elements in array to make them contiguous . ; create a visited array and initialize fals ; mark elements as true . ; if any element is not marked , all elements are not contiguous . ; ","context":"","code":"def areElementsContiguous(arr, n):\n    max1 = max(arr)\n    min1 = min(arr)\n    m = max1 - min1 + 1\n    if (m > n):\n        return False\n    visited = [0] * m\n    for i in range(0, n):\n        visited[arr[i] - min1] = True\n    for i in range(0, m):\n        if (visited[i] == False):\n            return False\n    return True\n","test":"\narr = [5, 2, 3, 6, 4, 4, 6, 6]\nn = len(arr)\nif (areElementsContiguous(arr, n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"areElementsContiguous"}
{"text":"check if array contains contiguous integers with duplicates allowed | function to check whether the array contains a set of contiguous integers ; storing elements of ' arr [ ] ' in a hash table 'us   ; as arr [ 0 ] is present in 'us   ; starting with previous smaller element of arr [ 0 ] ; if ' curr _ ele ' is present in 'us   ; increment count ; update 'curr_ele\" ; starting with next greater element of arr [ 0 ] ; if ' curr _ ele ' is present in 'us   ; increment count ; update 'curr_ele\" ; returns true if array contains a set of contiguous integers else returns false ; ","context":"","code":"def areElementsContiguous(arr):\n    us = set()\n    for i in arr:\n        us .add(i)\n    count = 1\n    curr_ele = arr[0] - 1\n    while curr_ele in us:\n        count += 1\n        curr_ele -= 1\n    curr_ele = arr[0] + 1\n    while curr_ele in us:\n        count += 1\n        curr_ele += 1\n    return (count == len(us))\n","test":"\narr = [5, 2, 3, 6, 4, 4, 6, 6]\nif areElementsContiguous(arr):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"areElementsContiguous"}
{"text":"longest subarray not having more than k distinct elements | function to print the longest sub - array ; mark the element visited ; if its visited first time , then increase the counter of distinct elements by 1 ; when the counter of distinct elements increases from k , then reduce it to k ; from the left , reduce the number of time of visit ; if the reduced visited time element is not present in further segment then decrease the count of distinct elements ; increase the subsegment mark ; check length of longest sub - segment when greater then previous best then change it ; print the longest sub - segment ; ","context":"\nimport collections\n\n","code":"def longest(a, n, k):\n    freq = collections .defaultdict(int)\n    start = 0\n    end = 0\n    now = 0\n    l = 0\n    for i in range(n):\n        freq[a[i]] += 1\n        if (freq[a[i]] == 1):\n            now += 1\n        while (now > k):\n            freq[a[l]] -= 1\n            if (freq[a[l]] == 0):\n                now -= 1\n            l += 1\n        if (i - l + 1 >= end - start + 1):\n            end = i\n            start = l\n    for i in range(start, end + 1):\n        print(a[i], end=\" \")\n","test":"\nif __name__ == \"__main__\":\n    a = [6, 5, 1, 2, 3, 2, 1, 4, 5]\n    n = len(a)\n    k = 3\n    longest(a, n, k)\n","output":"1 2 3 2 1 ","fn_call":"longest"}
{"text":"check if any k ranges overlap at any point | function that returns true if any k segments overlap at any point ; vector to store the starting point and the ending point ; starting points are marked by - 1 and ending points by + 1 ; sort the vector by first element ; stack to store the overlaps ; get the current element ; if it is the starting point ; push it in the stack ; it is the ending point ; pop an element from stack ; if more than k ranges overlap ; ","context":"","code":"def kOverlap(pairs: list, k):\n    vec = list()\n    for i in range(len(pairs)):\n        vec .append((pairs[0], -1))\n        vec .append((pairs[1], 1))\n    vec .sort(key=lambda a: a[0])\n    st = list()\n    for i in range(len(vec)):\n        cur = vec[i]\n        if cur[1] == -1:\n            st .append(cur)\n        else:\n            st .pop()\n        if len(st) >= k:\n            return True\n    return False\n","test":"\nif __name__ == \"__main__\":\n    pairs = list()\n    pairs .append((1, 3))\n    pairs .append((2, 4))\n    pairs .append((3, 5))\n    pairs .append((7, 10))\n    n = len(pairs)\n    k = 3\n    if kOverlap(pairs, k):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"kOverlap"}
{"text":"find smallest range containing elements from k lists | python3 program to finds out smallest range that includes elements from each of the given sorted lists . ; array for storing the current index of list i ; this function takes an k sorted lists in the form of 2d array as an argument . it finds out smallest range that includes elements from each of the k lists . ; initializing to 0 index ; for maintaining the index of list containing the minimum element ; iterating over all the list ; if every element of list [ i ] is traversed then break the loop ; find minimum value among all the list elements pointing by the ptr [ ] array ; update the index of the list ; find maximum value among all the list elements pointing by the ptr [ ] array ; if any list exhaust we will not get any better answer , so break the while loop ; updating the minrange ; ","context":"\nN = 5\nptr = [0 for i in range(501)]\n\n","code":"def findSmallestRange(arr, n, k):\n    i, minval, maxval, minrange, minel, maxel, flag, minind = 0, 0, 0, 0, 0, 0, 0, 0\n    for i in range(k + 1):\n        ptr[i] = 0\n    minrange = 10 ** 9\n    while (1):\n        minind = -1\n        minval = 10 ** 9\n        maxval = -10 ** 9\n        flag = 0\n        for i in range(k):\n            if (ptr[i] == n):\n                flag = 1\n                break\n            if (ptr[i] < n and arr[i][ptr[i]] < minval):\n                minind = i\n                minval = arr[i][ptr[i]]\n            if (ptr[i] < n and arr[i][ptr[i]] > maxval):\n                maxval = arr[i][ptr[i]]\n        if (flag):\n            break\n        ptr[minind] += 1\n        if ((maxval - minval) < minrange):\n            minel = minval\n            maxel = maxval\n            minrange = maxel - minel\n    print(\"The smallest range is [\", minel, maxel, \"]\")\n","test":"\narr = [[4, 7, 9, 12, 15], [0, 8, 10, 14, 20], [6, 12, 16, 30, 50]]\nk = len(arr)\nfindSmallestRange(arr, N, k)\n","output":"The smallest range is [ 6 8 ]\n","fn_call":"findSmallestRange"}
{"text":"find largest d in array such that a + b + c = d | function to find largest d ; sort the array in ascending order ; iterating from backwards to find the required largest d ; since all four a , b , c , d should be distinct ; if the current combination of j , k , l in the set is equal to s [ i ] return this value as this would be the largest d since we are iterating in descending order ; ","context":"","code":"def findLargestd(S, n):\n    found = False\n    S .sort()\n    for i in range(n - 1, -1, -1):\n        for j in range(0, n):\n            if (i == j):\n                continue\n            for k in range(j + 1, n):\n                if (i == k):\n                    continue\n                for l in range(k + 1, n):\n                    if (i == l):\n                        continue\n                    if (S[i] == S[j] + S[k] + S[l]):\n                        found = True\n                        return S[i]\n    if (found == False):\n        return -1\n","test":"\nS = [2, 3, 5, 7, 12]\nn = len(S)\nans = findLargestd(S, n)\nif (ans == -1):\n    print(\"No Solution\")\nelse:\n    print(\"Largest d such that a + b +\", \"c = d is\", ans)\n","output":"Largest d such that a + b + c = d is 12\n","fn_call":"findLargestd"}
{"text":"find largest d in array such that a + b + c = d | the function finds four elements with given sum x ; store sums ( a + b ) of all pairs ( a , b ) in a hash table ; traverse through all pairs and find ( d - c ) is present in hash table ; if d - c is present in hash table , ; making sure that all elements are distinct array elements and an element is not considered more than once . ; ","context":"","code":"def findFourElements(arr, n):\n    mp = dict()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            mp[arr[i] + arr[j]] = (i, j)\n    d = -10 ** 9\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            abs_diff = abs(arr[i] - arr[j])\n            if abs_diff in mp .keys():\n                p = mp[abs_diff]\n                if (p[0] != i and p[0] != j and p[1] != i and p[1] != j):\n                    d = max(d, max(arr[i], arr[j]))\n    return d\n","test":"\narr = [2, 3, 5, 7, 12]\nn = len(arr)\nres = findFourElements(arr, n)\nif (res == -10 ** 9):\n    print(\"No Solution.\")\nelse:\n    print(res)\n","output":"12\n","fn_call":"findFourElements"}
{"text":"maximize count of elements that can be selected having minimum difference between their sum and k | function to count maximum number of elements that can be selected ; sort he array ; traverse the array ; add current element to the sum ; if sum exceeds k ; increment count ; return the count ; ","context":"","code":"def CountMaximum(arr, n, k):\n    arr .sort()\n    Sum, count = 0, 0\n    for i in range(0, n):\n        Sum += arr[i]\n        if (Sum > k):\n            break\n        count += 1\n    return count\n","test":"\narr = [30, 30, 10, 10]\nn = len(arr)\nk = 50\nprint(CountMaximum(arr, n, k))\n","output":"3\n","fn_call":"CountMaximum"}
{"text":"sort the array in a given index range | function to sort the elements of the array from index a to index b ; variables to store start and end of the index range ; temporary array ; sort the temporary array ; modifying original array with temporary array elements ; print the modified array ; ","context":"","code":"def partSort(arr, N, a, b):\n    l = min(a, b)\n    r = max(a, b)\n    temp = [0 for i in range(r - l + 1)]\n    j = 0\n    for i in range(l, r + 1, 1):\n        temp[j] = arr[i]\n        j += 1\n    temp .sort(reverse=False)\n    j = 0\n    for i in range(l, r + 1, 1):\n        arr[i] = temp[j]\n        j += 1\n    for i in range(0, N, 1):\n        print(arr[i], end=\" \")\n","test":"\nif __name__ == '__main__':\n    arr = [7, 8, 4, 5, 2]\n    a = 1\n    b = 4\n    N = len(arr)\n    partSort(arr, N, a, b)\n","output":"7 2 4 5 8 ","fn_call":"partSort"}
{"text":"move all zeroes to end of array | function which pushes all zeros to end of an array . ; count of non - zero elements ; traverse the array . if element encountered is non - zero , then replace the element at index ' count ' with this element ; here count is incremented ; now all non - zero elements have been shifted to front and ' count ' is set as index of first 0. make all elements 0 from count to end . ; ","context":"","code":"def pushZerosToEnd(arr, n):\n    count = 0\n    for i in range(n):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    while count < n:\n        arr[count] = 0\n        count += 1\n","test":"\narr = [1, 9, 8, 4, 0, 0, 2, 7, 0, 6, 0, 9]\nn = len(arr)\npushZerosToEnd(arr, n)\nprint(\"Array after pushing all zeros to end of array:\")\nprint(arr)\n","output":"Array after pushing all zeros to end of array:\n[1, 9, 8, 4, 2, 7, 6, 9, 0, 0, 0, 0]\n","fn_call":"pushZerosToEnd"}
{"text":"rearrange positive and negative numbers with constant extra space | python implementation of the above approach ; loop until arr [ i ] < 0 and still inside the array ; loop until arr [ j ] > 0 and still inside the array ; if i is less than j ; ","context":"","code":"def RearrangePosNeg(arr, n):\n    i = 0\n    j = n - 1\n    while (True):\n        while (arr[i] < 0 and i < n):\n            i += 1\n        while (arr[j] > 0 and j >= 0):\n            j -= 1\n        if (i < j):\n            arr[i], arr[j] = arr[j], arr[i]\n        else:\n            break\n","test":"\narr = [-12, 11, -13, -5, 6, -7, 5, -3, -6]\nn = len(arr)\nRearrangePosNeg(arr, n)\nprint(*arr)\n","output":"-12 -6 -13 -5 -3 -7 5 6 11\n","fn_call":"RearrangePosNeg"}
{"text":"find the player to be able to replace the last element that can be replaced by its divisors | function to find the winner of the game played based on given conditions ; a wins if size of array is odd ; otherwise , b wins ; ","context":"","code":"def winner(arr, N):\n    if (N % 2 == 1):\n        print(\"A\")\n    else:\n        print(\"B\")\n","test":"\nif __name__ == '__main__':\n    arr = [24, 45, 45, 24]\n    N = len(arr)\n    winner(arr, N)\n","output":"B\n","fn_call":"winner"}
{"text":"queries to calculate sum of array elements present at every yth index starting from the index x | python program for the above approach ; function to sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all possible values of x and y , where y is less than or equal to sqrt ( n ) . ; iterate over all possible values of x ; precompute for all possible values of an expression such that y <= sqrt ( n ) ; if i + j less than n ; update dp [ i ] [ j ] ; update dp [ i ] [ j ] ; function to find the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all queries ; dp [ x ] [ y ] : stores sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... ; traverse the query array , q [ ] [ ] ; if y is less than or equal to sqrt ( n ) ; stores the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... ; traverse the array , arr [ ] ; update sum ; update x ; ","context":"\nimport math\nsz = 20\nsqr = int(math .sqrt(sz)) + 1\n\n","code":"def precomputeExpressionForAllVal(arr, N, dp):\n    for i in range(N - 1, -1, -1):\n        for j in range(1, int(math .sqrt(N)) + 1):\n            if (i + j < N):\n                dp[i][j] = arr[i] + dp[i + j][j]\n            else:\n                dp[i][j] = arr[i]\n\n\ndef querySum(arr, N, Q, M):\n    dp = [[0 for x in range(sz)]for x in range(sqr)]\n    precomputeExpressionForAllVal(arr, N, dp)\n    for i in range(0, M):\n        x = Q[i][0]\n        y = Q[i][1]\n        if (y <= math .sqrt(N)):\n            print(dp[x][y])\n            continue\n        sum = 0\n        while (x < N):\n            sum += arr[x]\n            x += y\n        print(sum)\n","test":"\narr = [1, 2, 7, 5, 4]\nQ = [[2, 1], [3, 2]]\nN = len(arr)\nM = len(Q[0])\nquerySum(arr, N, Q, M)\n","output":"16\n5\n","fn_call":"querySum"}
{"text":"find all elements in array which have at | python3 program to find all elements in array which have at - least two greater elements itself . ; pick elements one by one and count greater elements . if count is more than 2 , print that element . ; ","context":"","code":"def findElements(arr, n):\n    for i in range(n):\n        count = 0\n        for j in range(0, n):\n            if arr[j] > arr[i]:\n                count = count + 1\n        if count >= 2:\n            print(arr[i], end=\" \")\n","test":"\narr = [2, -6, 3, 5, 1]\nn = len(arr)\nfindElements(arr, n)\n","output":"2 -6 1 ","fn_call":"findElements"}
{"text":"find all elements in array which have at | sorting based python 3 program to find all elements in array which have atleast two greater elements itself . ; ","context":"","code":"def findElements(arr, n):\n    arr .sort()\n    for i in range(0, n - 2):\n        print(arr[i], end=\" \")\n","test":"\narr = [2, -6, 3, 5, 1]\nn = len(arr)\nfindElements(arr, n)\n","output":"-6 1 2 ","fn_call":"findElements"}
{"text":"find all elements in array which have at | python3 program to find all elements in array which have atleast two greater elements itself . ; if current element is smaller than first then update both first and second ; if arr [ i ] is in between first and second then update second ; ","context":"\nimport sys\n\n","code":"def findElements(arr, n):\n    first = -sys .maxsize\n    second = -sys .maxsize\n    for i in range(0, n):\n        if (arr[i] > first):\n            second = first\n            first = arr[i]\n        elif (arr[i] > second):\n            second = arr[i]\n    for i in range(0, n):\n        if (arr[i] < second):\n            print(arr[i], end=\" \")\n","test":"\narr = [2, -6, 3, 5, 1]\nn = len(arr)\nfindElements(arr, n)\n","output":"2 -6 1 ","fn_call":"findElements"}
{"text":"minimize count of increments of each element of subarrays required to make array non | function to find the minimum number of operations required to make the array non - increasing ; stores the count of required operations ; if arr [ i ] > arr [ i + 1 ] , no increments required . otherwise , add their difference to the answer ; return the result res ; ","context":"","code":"def getMinOps(arr):\n    res = 0\n    for i in range(len(arr) - 1):\n        res += max(arr[i + 1] - arr[i], 0)\n    return res\n","test":"\narr = [1, 3, 4, 1, 2]\nprint(getMinOps(arr))\n","output":"4\n","fn_call":"getMinOps"}
{"text":"find the smallest missing number | function that returns smallest elements missing in a sorted array . ; left half has all elements from 0 to mid ; ","context":"","code":"def findFirstMissing(array, start, end):\n    if (start > end):\n        return end + 1\n    if (start != array[start]):\n        return start\n    mid = int((start + end) \/ 2)\n    if (array[mid] == mid):\n        return findFirstMissing(array, mid + 1, end)\n    return findFirstMissing(array, start, mid)\n","test":"\narr = [0, 1, 2, 3, 4, 5, 6, 7, 10]\nn = len(arr)\nprint(\"Smallest missing element is\", findFirstMissing(arr, 0, n - 1))\n","output":"Smallest missing element is 8\n","fn_call":"findFirstMissing"}
{"text":"find the smallest missing number | function to find missing element ; index matches with value at that index , means missing element cannot be upto that point ; function to find smallest missing in sorted array ; check if 0 is missing in the array ; check is all numbers 0 to n - 1 are prsent in array ; ","context":"","code":"def findFirstMissing(arr, start, end, first):\n    if (start < end):\n        mid = int((start + end) \/ 2)\n        if (arr[mid] != mid + first):\n            return findFirstMissing(arr, start, mid, first)\n        else:\n            return findFirstMissing(arr, mid + 1, end, first)\n    return start + first\n\n\ndef findSmallestMissinginSortedArray(arr):\n    if (arr[0] != 0):\n        return 0\n    if (arr[-1] == len(arr) - 1):\n        return len(arr)\n    first = arr[0]\n    return findFirstMissing(arr, 0, len(arr) - 1, first)\n","test":"\narr = [0, 1, 2, 3, 4, 5, 7]\nn = len(arr)\nprint(\"First Missing element is :\", findSmallestMissinginSortedArray(arr))\n","output":"First Missing element is : 6\n","fn_call":"findSmallestMissinginSortedArray"}
{"text":"maximum sum such that no two elements are adjacent | function to return max sum such that no two elements are adjacent ; current max excluding i ( no ternary in python ) ; current max including i ; return max of incl and excl ; ","context":"","code":"def find_max_sum(arr):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = excl if excl > incl else incl\n        incl = excl + i\n        excl = new_excl\n    return (excl if excl > incl else incl)\n","test":"\narr = [5, 5, 10, 100, 10, 5]\nprint(find_max_sum(arr))\n","output":"110\n","fn_call":"find_max_sum"}
{"text":"minimum steps to convert all top left to bottom right paths in matrix as palindrome | set 2 | function for counting minimum number of changes ; distance of elements from ( 0 , 0 ) will is i range [ 0 , n + m - 2 ] ; store frequencies of [ 0 , 9 ] at distance i initialize all with zero ; count frequencies of [ 0 , 9 ] ; increment frequency of value matrix [ i ] [ j ] at distance i + j ; find value with max frequency and count total cells at distance i from front end and rear end ; change all values to the value with max frequency ; return the answer ; ","context":"","code":"def countChanges(matrix, n, m):\n    dist = n + m - 1\n    freq = [[0] * 10 for i in range(dist)]\n    for i in range(n):\n        for j in range(m):\n            freq[i + j][matrix[i][j]] += 1\n    min_changes_sum = 0\n    for i in range(dist \/\/ 2):\n        maximum = 0\n        total_values = 0\n        for j in range(10):\n            maximum = max(maximum, freq[i][j] + freq[n + m - 2 - i][j])\n            total_values += (freq[i][j] + freq[n + m - 2 - i][j])\n        min_changes_sum += (total_values - maximum)\n    return min_changes_sum\n","test":"\nif __name__ == '__main__':\n    mat = [[1, 2], [3, 5]]\n    print(countChanges(mat, 2, 2))\n","output":"1\n","fn_call":"countChanges"}
{"text":"lexicographically smallest array after at | modifies arr [ 0. . n - 1 ] to lexicographically smallest with k swaps . ; set the position where we we want to put the smallest integer ; if we exceed the max swaps then terminate the loop ; find the minimum value from i + 1 to max ( k or n ) ; swap the elements from minimum position we found till now to the i index ; set the final value after swapping pos - i elements ; ","context":"","code":"def minimizeWithKSwaps(arr, n, k):\n    for i in range(n - 1):\n        pos = i\n        for j in range(i + 1, n):\n            if (j - i > k):\n                break\n            if (arr[j] < arr[pos]):\n                pos = j\n        for j in range(pos, i, -1):\n            arr[j], arr[j - 1] = arr[j - 1], arr[j]\n        k -= pos - i\n","test":"\nn, k = 5, 3\narr = [7, 6, 9, 2, 1]\nminimizeWithKSwaps(arr, n, k)\nfor i in range(n):\n    print(arr[i], end=\" \")\n","output":"2 7 6 9 1 ","fn_call":"minimizeWithKSwaps"}
{"text":"find maximum average subarray of k length | returns beginning index of maximum average subarray of length k ; check if ' k ' is valid ; create and fill array to store cumulative sum . csum [ i ] stores sum of arr [ 0 ] to arr [ i ] ; initialize max_sm as sum of first subarray ; find sum of other subarrays and update max_sum if required . ; return starting index ; ","context":"","code":"def findMaxAverage(arr, n, k):\n    if k > n:\n        return -1\n    csum = [0] * n\n    csum[0] = arr[0]\n    for i in range(1, n):\n        csum[i] = csum[i - 1] + arr[i]\n    max_sum = csum[k - 1]\n    max_end = k - 1\n    for i in range(k, n):\n        curr_sum = csum[i] - csum[i - k]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_end = i\n    return max_end - k + 1\n","test":"\narr = [1, 12, -5, -6, 50, 3]\nk = 4\nn = len(arr)\nprint(\"The maximum average subarray of length\", k,\n      \"begins at index\", findMaxAverage(arr, n, k))\n","output":"The maximum average subarray of length 4 begins at index 1\n","fn_call":"findMaxAverage"}
{"text":"find maximum average subarray of k length | returns beginning index of maximum average subarray of length k ; check if ' k ' is valid ; compute sum of first ' k ' elements ; compute sum of remaining subarrays ; return starting index ; ","context":"","code":"def findMaxAverage(arr, n, k):\n    if (k > n):\n        return -1\n    sum = arr[0]\n    for i in range(1, k):\n        sum += arr[i]\n    max_sum = sum\n    max_end = k - 1\n    for i in range(k, n):\n        sum = sum + arr[i] - arr[i - k]\n        if (sum > max_sum):\n            max_sum = sum\n            max_end = i\n    return max_end - k + 1\n","test":"\narr = [1, 12, -5, -6, 50, 3]\nk = 4\nn = len(arr)\nprint(\"The maximum average subarray of length\", k,\n      \"begins at index\", findMaxAverage(arr, n, k))\n","output":"The maximum average subarray of length 4 begins at index 1\n","fn_call":"findMaxAverage"}
{"text":"minimum score possible for a player by selecting one or two consecutive array elements from given binary array | stores the minimum score for each states as map < pair < pos , myturn > , ans > ; function to find the minimum score after choosing element from array ; return the stored state ; base case ; player a 's turn ; find the minimum score ; store the current state ; return the result ; player b 's turn ; find minimum score ; store the current state ; return the result ; function that finds the minimum penality after choosing element from the given binary array ; starting position of choosing element from array ; 0 denotes player a turn 1 denotes player b turn ; function call ; print the answer for player a and b ; minimum penalty ; calculate sum of all arr elements ; print the minimum score ; ","context":"\nm = dict()\n\n","code":"def findMinimum(a, n, pos, myturn):\n    if (pos, myturn) in m:\n        return m[(pos, myturn)]\n    if (pos >= n - 1):\n        return 0\n    if (not myturn):\n        ans = min(findMinimum(a, n, pos + 1, not myturn) +\n                  a[pos], findMinimum(a, n, pos + 2, not myturn) + a[pos] + a[pos + 1])\n        m[(pos, myturn)] = ans\n        return ans\n    if (myturn):\n        ans = min(\n            findMinimum(\n                a,\n                n,\n                pos + 1,\n                not myturn),\n            findMinimum(\n                a,\n                n,\n                pos + 2,\n                not myturn))\n        m[(pos, myturn)] = ans\n        return ans\n    return 0\n\n\ndef countPenality(arr, N):\n    pos = 0\n    turn = False\n    return findMinimum(arr, N, pos, turn) + 1\n\n\ndef printAnswer(arr, N):\n    a = countPenality(arr, N)\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    print(a)\n","test":"\nif __name__ == '__main__':\n    arr = [1, 0, 1, 1, 0, 1, 1, 1]\n    N = len(arr)\n    printAnswer(arr, N)\n","output":"2\n","fn_call":"printAnswer"}
{"text":"count the number of ways to construct the target string | python 3 program to count the number of ways to construct the target string ; base case ; if current subproblem has been solved , use the value ; current character ; search through all the indiced at which the current character occurs . for each index greater than prev , take the index and move to the next position , and add to the answer . ; store and return the solution for this subproblem ; preprocess the strings by storing for each character of every string , the index of their occurrence we will use a common list for all because of only the index matter in the string from which the character was picked ; we are storing j + 1 because the initial picked index in the recursive step will ne 0. this is just for ease of implementation ; initialise dp table . - 1 represents that the subproblem hasn 't been solve ; ","context":"\nmod = 1000000007\ndp = [[-1 for i in range(1000)]for j in range(1000)]\n\n","code":"def calculate(pos, prev, s, index):\n    if (pos == len(s)):\n        return 1\n    if (dp[pos][prev] != -1):\n        return dp[pos][prev]\n    c = ord(s[pos]) - ord('a')\n    answer = 0\n    for i in range(len(index)):\n        if (index[i] > prev):\n            answer = (answer % mod + calculate(pos + 1,\n                      index[i], s, index) % mod) % mod\n    dp[pos][prev] = 4\n    return dp[pos][prev]\n\n\ndef countWays(a, s):\n    n = len(a)\n    index = [[]for i in range(26)]\n    for i in range(n):\n        for j in range(len(a[i])):\n            index[ord(a[i][j]) - ord('a')].append(j + 1)\n    return calculate(0, 0, s, index[0])\n","test":"\nif __name__ == '__main__':\n    A = []\n    A .append(\"adc\")\n    A .append(\"aec\")\n    A .append(\"erg\")\n    S = \"ac\"\n    print(countWays(A, S))\n","output":"4\n","fn_call":"countWays"}
{"text":"double knapsack | dynamic programming | w1_r represents remaining capacity of 1 st knapsack w2_r represents remaining capacity of 2 nd knapsack i represents index of the array arr we are working on ; base case ; variables to store the result of three parts of recurrence relation ; store the state in the 3d array ; ","context":"","code":"def maxWeight(arr, n, w1_r, w2_r, i):\n    if i == n:\n        return 0\n    if dp[i][w1_r][w2_r] != -1:\n        return dp[i][w1_r][w2_r]\n    fill_w1, fill_w2, fill_none = 0, 0, 0\n    if w1_r >= arr[i]:\n        fill_w1 = arr[i] + maxWeight(arr, n, w1_r - arr[i], w2_r, i + 1)\n    if w2_r >= arr[i]:\n        fill_w2 = arr[i] + maxWeight(arr, n, w1_r, w2_r - arr[i], i + 1)\n    fill_none = maxWeight(arr, n, w1_r, w2_r, i + 1)\n    dp[i][w1_r][w2_r] = max(fill_none, max(fill_w1, fill_w2))\n    return dp[i][w1_r][w2_r]\n","test":"\nif __name__ == \"__main__\":\n    arr = [8, 2, 3]\n    maxN, maxW = 31, 31\n    dp = [[[-1] * maxW] * maxW] * maxN\n    n = len(arr)\n    w1, w2 = 10, 3\n    print(maxWeight(arr, n, w1, w2, 0))\n","output":"13\n","fn_call":"maxWeight"}
{"text":"maximum size subset with given sum | a dynamic programming solution for subset sum problem + maximal subset value . returns size of maximum sized subset if there is a subset of set [ ] with sun equal to given sum . it returns - 1 if there is no subset with given sum . ; the value of subset [ i ] [ j ] will be true if there is a subset of set [ 0. . j - 1 ] with sum equal to i ; if sum is 0 , then answer is true ; if sum is not 0 and set is empty , then answer is false ; fill the subset table in bottom up manner ; ","context":"","code":"def isSubsetSum(arr, n, sum):\n    subset = [[False for x in range(n + 1)]for y in range(sum + 1)]\n    count = [[0 for x in range(n + 1)]for y in range(sum + 1)]\n    for i in range(n + 1):\n        subset[0][i] = True\n        count[0][i] = 0\n    for i in range(1, sum + 1):\n        subset[i][0] = False\n        count[i][0] = -1\n    for i in range(1, sum + 1):\n        for j in range(1, n + 1):\n            subset[i][j] = subset[i][j - 1]\n            count[i][j] = count[i][j - 1]\n            if (i >= arr[j - 1]):\n                subset[i][j] = (subset[i][j] or subset[i - arr[j - 1]][j - 1])\n                if (subset[i][j]):\n                    count[i][j] = (\n                        max(count[i][j - 1], count[i - arr[j - 1]][j - 1] + 1))\n    return count[sum][n]\n","test":"\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 10]\n    sum = 20\n    n = 4\n    print(isSubsetSum(arr, n, sum))\n","output":"4\n","fn_call":"isSubsetSum"}
{"text":"print all longest common sub | python3 program to find all lcs of two strings in sorted order . ; dp matrix to store result of sub calls for lcs ; a memoization based function that returns lcs of str1 [ i . . len1 - 1 ] and str2 [ j . . len2 - 1 ] ; base condition ; if lcs has been computed ; if characters are same return previous + 1 else max of two sequences after removing i ' th \u2581 and \u2581 j ' th char one by one ; function to prall routes common sub - sequences of length lcslen ; if currlcs is equal to lcslen then prit ; if we are done with all the characters of both string ; here we have to prall sub - sequences lexicographically , that ' s \u2581 why \u2581 we \u2581 start \u2581 from \u2581 ' a ' to ' z ' if this character is  present in both of them then append it in data[] and same  remaining part ; done is a flag to tell that we have printed all the subsequences corresponding to current character ; if character ch is present in str1 then check if it is present in str2 ; if ch is present in both of them and remaining length is equal to remaining lcs length then add ch in sub - sequenece ; if we found lcs beginning with current character . ; this function prints all lcs of str1 and str2 in lexicographic order . ; find lengths of both strings ; find length of lcs ; prall lcs using recursive backtracking data [ ] is used to store individual lcs . ; ","context":"\nMAX = 100\nlcslen = 0\n\n\ndp = [[-1 for i in range(MAX)] for i in range(MAX)]\n\n","code":"def lcs(str1, str2, len1, len2, i, j):\n    if (i == len1 or j == len2):\n        dp[i][j] = 0\n        return dp[i][j]\n    if (dp[i][j] != -1):\n        return dp[i][j]\n\n    ret = 0\n    if (str1[i] == str2[j]):\n        ret = 1 + lcs(str1, str2, len1, len2, i + 1, j + 1)\n    else:\n        ret = max(lcs(str1, str2, len1, len2, i + 1, j),\n                  lcs(str1, str2, len1, len2, i, j + 1))\n    dp[i][j] = ret\n    return ret\n\n\ndef printAll(str1, str2, len1, len2, data, indx1, indx2, currlcs):\n    if (currlcs == lcslen):\n        print(\"\".join(data[:currlcs]))\n        return\n    if (indx1 == len1 or indx2 == len2):\n        return\n    for ch in range(ord('a'), ord('z') + 1):\n        done = False\n\n        for i in range(indx1, len1):\n            if (chr(ch) == str1[i]):\n                for j in range(indx2, len2):\n                    if (chr(ch) == str2[j] and dp[i][j] == lcslen-currlcs):\n                        data[currlcs] = chr(ch)\n                        printAll(str1, str2, len1, len2, data,\n                                 i + 1, j + 1, currlcs + 1)\n                        done = True\n                        break\n            if (done):\n                break\n\n\ndef prinlAllLCSSorted(str1, str2):\n    global lcslen\n    len1, len2 = len(str1), len(str2)\n\n    lcslen = lcs(str1, str2, len1, len2, 0, 0)\n    data = ['a' for i in range(MAX)]\n    printAll(str1, str2, len1, len2, data, 0, 0, 0)\n","test":"\nif __name__ == '__main__':\n    str1 = \"abcabcaa\"\n    str2 = \"acbacba\"\n    prinlAllLCSSorted(str1, str2)\n","output":"ababa\nabaca\nabcba\nacaba\nacaca\nacbaa\nacbca\n","fn_call":"prinlAllLCSSorted"}
{"text":"check for majority element in a sorted array | python3 program to check for majority element in a sorted array ; get last index according to n ( even or odd ) ; search for first occurrence of x in arr [ ] ; check if x is present and is present more than n \/ 2 times ; ","context":"","code":"def isMajority(arr, n, x):\n    last_index = (n \/\/ 2 + 1)if n % 2 == 0 else (n \/\/ 2)\n    for i in range(last_index):\n        if arr[i] == x and arr[i + n \/\/ 2] == x:\n            return 1\n","test":"\narr = [1, 2, 3, 4, 4, 4, 4]\nn = len(arr)\nx = 4\nif (isMajority(arr, n, x)):\n    print(\"% d appears more than % d times in arr[]\" % (x, n \/\/ 2))\nelse:\n    print(\"% d does not appear more than % d times in arr[]\" % (x, n \/\/ 2))\n","output":" 4 does not appear more than  3 times in arr[]\n","fn_call":"isMajority"}
{"text":"check for majority element in a sorted array |  ; ","context":"","code":"def isMajorityElement(arr, n, key):\n    if (arr[n \/\/ 2] == key):\n        return True\n    return False\n","test":"\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 3, 3, 3, 10]\n    n = len(arr)\n    x = 3\n    if (isMajorityElement(arr, n, x)):\n        print(x, \" appears more than \", n \/\/ 2, \" times in arr[]\")\n    else:\n        print(x, \" does not appear more than\", n \/\/ 2, \" times in arr[]\")\n","output":"3  appears more than  3  times in arr[]\n","fn_call":"isMajorityElement"}
{"text":"cutting a rod | dp | a dynamic programming solution for rod cutting problem ; returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces ; build the table val [ ] in bottom up manner and return the last entry from the table ; ","context":"\nINT_MIN = -32767\n\n","code":"def cutRod(price, n):\n    val = [0 for x in range(n + 1)]\n    val[0] = 0\n    for i in range(1, n + 1):\n        max_val = INT_MIN\n        for j in range(i):\n            max_val = max(max_val, price[j] + val[i - j - 1])\n        val[i] = max_val\n    return val[n]\n","test":"\narr = [1, 5, 8, 9, 10, 17, 17, 20]\nsize = len(arr)\nprint(\"Maximum Obtainable Value is \" + str(cutRod(arr, size)))\n","output":"Maximum Obtainable Value is 22\n","fn_call":"cutRod"}
{"text":"modify array to another given array by replacing array elements with the sum of the array | function to check if the arr [ ] can be converted to target [ ] by replacing any element in arr [ ] by the sum of arr [ ] ; store the maximum element ; store the index of the maximum element ; traverse the array target [ ] ; if current element is greater than max ; if max element is 1 ; traverse the array , target [ ] ; if current index is not equal to maximum element index ; update max ; if max is less than or equal to 0 , ; update the maximum element ; recursively call the function ; ","context":"","code":"def isPossible(target):\n    max = 0\n    index = 0\n    for i in range(len(target)):\n        if (max < target[i]):\n            max = target[i]\n            index = i\n    if (max == 1):\n        return True\n    for i in range(len(target)):\n        if (i != index):\n            max -= target[i]\n        if (max <= 0):\n            return False\n    target[index] = max\n    return isPossible(target)\n","test":"\ntarget = [9, 3, 5]\nres = isPossible(target)\nif (res):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","output":"YES\n","fn_call":"isPossible"}
{"text":"sum of all products of the binomial coefficients of two numbers up to k | function returns ncr i . e . binomial coefficient ; initialize res with 1 ; since c ( n , r ) = c ( n , n - r ) ; evaluating expression ; ","context":"","code":"def nCr(n, r):\n    res = 1\n    if (r > n - r):\n        r = n - r\n    for i in range(r):\n        res *= (n - i)\n        res \/\/= (i + 1)\n    return res\n","test":"\nif __name__ == '__main__':\n    n = 3\n    m = 2\n    k = 2\n    print(nCr(n + m, k))\n","output":"10\n","fn_call":"nCr"}
{"text":"check if n can be obtained from 1 by repetitively multiplying by 10 or 20 | python program to check if n can be obtained from 1 by repetitive multiplication by 10 or 20 ; function to check if n can be obtained or not ; count and remove trailing zeroes ; check if remaining n is a power of 2 ; to check the condition to print yes or no ; ","context":"\nimport math\n\n","code":"def Is_possible(N):\n    C = 0\n    D = 0\n    while (N % 10 == 0):\n        N = N \/ 10\n        C += 1\n    if (math .log(N, 2) - int(math .log(N, 2)) == 0):\n        D = int(math .log(N, 2))\n        if (C >= D):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n","test":"\nN = 2000000000000\nIs_possible(N)\n","output":"YES\n","fn_call":"Is_possible"}
{"text":"central polygonal numbers | function to find n - th term in the series ; ","context":"","code":"def findNthTerm(n):\n    print(n * n - n + 1)\n","test":"\nN = 4\nfindNthTerm(N)\n","output":"13\n","fn_call":"findNthTerm"}
{"text":"program to print the series 1 , 3 , 4 , 8 , 15 , 27 , 50 \u00e2 \u20ac\u00a6 till n terms | function to print the series ; generate the ith term and print it ; ","context":"","code":"def printSeries(n, a, b, c):\n    if (n == 1):\n        print(a, end=\" \")\n        return\n    if (n == 2):\n        print(a, b, end=\" \")\n        return\n    print(a, b, c, end=\" \")\n    for i in range(4, n + 1):\n        d = a + b + c\n        print(d, end=\" \")\n        a = b\n        b = c\n        c = d\n","test":"\nN = 7\na = 1\nb = 3\nc = 4\nprintSeries(N, a, b, c)\n","output":"1 3 4 8 15 27 50 ","fn_call":"printSeries"}
{"text":"diameter of a binary indexed tree with n nodes | function to find diameter of bit with n + 1 nodes ; l is size of subtree just before subtree in which n lies ; h is the height of subtree just before subtree in which n lies ; base cases ; size of subtree are power of 2 ; 3 cases as explained in approach ; ","context":"","code":"def diameter(n):\n    L, H, templen = 0, 0, 0\n    L = 1\n    H = 0\n    if (n == 1):\n        return 1\n    if (n == 2):\n        return 2\n    if (n == 3):\n        return 3\n    while (L * 2 <= n):\n        L *= 2\n        H += 1\n    if (n >= L * 2 - 1):\n        return 2 * H + 1\n    elif (n >= L + (L \/ 2) - 1):\n        return 2 * H\n    return 2 * H - 1\n","test":"\nn = 15\nprint(diameter(n))\n","output":"7\n","fn_call":"diameter"}
{"text":"find the larger exponential among two exponentials | python3 implementation of the approach ; function to find whether a ^ b is greater or c ^ d ; find b * log ( a ) ; find d * log ( c ) ; compare both values ; ","context":"\nimport math\n\n","code":"def compareValues(a, b, c, d):\n    log1 = math .log10(a)\n    num1 = log1 * b\n    log2 = math .log10(c)\n    num2 = log2 * d\n    if num1 > num2:\n        print(a, '^', b)\n    else:\n        print(c, '^', d)\n","test":"\na = 8\nb = 29\nc = 60\nd = 59\ncompareValues(a, b, c, d)\n","output":"60 ^ 59\n","fn_call":"compareValues"}
{"text":"sum of prime numbers without odd prime digits | python3 program for above approach ; find all prime numbers ; store all prime numbers ; function to check if a digit is odd prime or not ; function to find sum ; to store required answer ; get all prime numbers ; traverse through all the prime numbers ; flag stores 1 if a number does not contain any odd primes ; find all digits of a number ; if number does not contain any odd primes ; return the required answer ; ","context":"\nMAX = 100005\n\n","code":"def addPrimes():\n    n = MAX\n    prime = [True for i in range(n + 1)]\n    for p in range(2, n + 1):\n        if p * p > n:\n            break\n        if (prime[p]):\n            for i in range(2 * p, n + 1, p):\n                prime[i] = False\n    ans = []\n    for p in range(2, n + 1):\n        if (prime[p]):\n            ans .append(p)\n    return ans\n\n\ndef is_prime(n):\n    if n in [3, 5, 7]:\n        return True\n    return False\n\n\ndef find_Sum(n):\n    Sum = 0\n    v = addPrimes()\n    for i in range(len(v)):\n        flag = 1\n        a = v[i]\n        while (a != 0):\n            d = a % 10\n            a = a \/\/ 10\n            if (is_prime(d)):\n                flag = 0\n                break\n        if (flag == 1):\n            n -= 1\n            Sum = Sum + v[i]\n        if n == 0:\n            break\n    return Sum\n","test":"\nn = 7\nprint(find_Sum(n))\n","output":"252\n","fn_call":"find_Sum"}
{"text":"minimum value to be added to x such that it is at least y percent of n | python implementation of the approach ; function to return the required value that must be added to x so that it is at least y percent of n ; required value ; if x is already >= y percent of n ; ","context":"\nimport math\n\n","code":"def minValue(n, x, y):\n    val = (y * n) \/ 100\n    if x >= val:\n        return 0\n    else:\n        return math .ceil(val) - x\n","test":"\nn = 10\nx = 2\ny = 40\nprint(minValue(n, x, y))\n","output":"2\n","fn_call":"minValue"}
{"text":"check if n is a factorial prime | python3 program to check if given number is a factorial prime ; utility function to check if a number is prime or not ; corner cases ; this is checked so that we can skip middle five numbers in below loop ; function that returns true if n is a factorial prime ; if n is not prime then return false ; calculate factorial ; if n is a factorial prime ; n is not a factorial prime ; ","context":"\nfrom math import sqrt\n\n","code":"def isPrime(n):\n    if (n <= 1):\n        return False\n    if (n <= 3):\n        return True\n    if (n % 2 == 0 or n % 3 == 0):\n        return False\n    for i in range(5, int(sqrt(n)) + 1, 6):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n    return True\n\n\ndef isFactorialPrime(n):\n    if (not isPrime(n)):\n        return False\n    fact = 1\n    i = 1\n    while (fact <= n + 1):\n        fact = fact * i\n        if (n + 1 == fact or n - 1 == fact):\n            return True\n        i += 1\n    return False\n","test":"\nif __name__ == \"__main__\":\n    n = 23\n    if (isFactorialPrime(n)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"isFactorialPrime"}
{"text":"perfect cube greater than a given number | python 3 implementation of above approach ; function to find the next perfect cube ; ","context":"\nfrom math import *\n\n","code":"def nextPerfectCube(N):\n    nextN = floor(N ** (1 \/ 3)) + 1\n    return nextN ** 3\n","test":"\nif __name__ == \"__main__\":\n    n = 35\n    print(nextPerfectCube(n))\n","output":"64\n","fn_call":"nextPerfectCube"}
{"text":"sum of all the prime divisors of a number | python3 program to find sum of prime divisors of n ; function to check if the number is prime or not . ; corner cases ; this is checked so that we can skip middle five numbers in below loop ; function to find sum of prime divisors of n ; return type of sqrt function if float ; both factors are same ; both factors are not same ( i and n \/ i ) ; ","context":"\nimport math\n\n","code":"def isPrime(n):\n    if (n <= 1):\n        return False\n    if (n <= 3):\n        return True\n    if (n % 2 == 0 or n % 3 == 0):\n        return False\n    i = 5\n    while i * i <= n:\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n    return True\n\n\ndef SumOfPrimeDivisors(n):\n    Sum = 0\n    root_n = (int)(math .sqrt(n))\n    for i in range(1, root_n + 1):\n        if (n % i == 0):\n            if (i == (int)(n \/ i) and isPrime(i)):\n                Sum += i\n            else:\n                if (isPrime(i)):\n                    Sum += i\n                if (isPrime((int)(n \/ i))):\n                    Sum += (int)(n \/ i)\n    return Sum\n","test":"\nn = 60\nprint(\"Sum of prime divisors of 60 is\", SumOfPrimeDivisors(n))\n","output":"Sum of prime divisors of 60 is 10\n","fn_call":"SumOfPrimeDivisors"}
{"text":"position of n among the numbers made of 2 , 3 , 5 & 7 | program position of n among the numbers made of 2 , 3 , 5 & 7 ; if number is 2 then it is on the position pos * 2 + 1 ; if number is 3 then it is on the position pos * 2 + 2 ; if number is 5 then it is on the position pos * 2 + 3 ; if number is 7 then it is on the position pos * 2 + 4 ; ","context":"","code":"def findpos(n):\n    pos = 0\n    for i in n:\n        if i == '2':\n            pos = pos * 4 + 1\n        elif i == '3':\n            pos = pos * 4 + 2\n        elif i == '5':\n            pos = pos * 4 + 3\n        elif i == '7':\n            pos = pos * 4 + 4\n    return pos\n","test":"\nn = \"777\"\nprint(findpos(n))\n","output":"84\n","fn_call":"findpos"}
{"text":"Finding a Non Transitive Co | Checks if any possible triplet ( a , b , c ) satifying the condition that ( a , b ) is coprime , ( b , c ) is coprime but ( a , c ) isnt ; Case 1 : Less than 3 numbers between L and R ; Case 2 : More than 3 numbers between L and R ; triplets should always be of form ( 2 k , 2 k + 1 , 2 k + 2 ) ; Case 3.1 : Exactly 3 numbers in range of form ( 2 k , 2 k + 1 , 2 k + 2 ) ; Case 3.2 : Exactly 3 numbers in range of form ( 2 k - 1 , 2 k , 2 k + 1 ) ; flag = True indicates that a pair exists between L and R ; finding possible Triplet between 2 and 10 ; finding possible Triplet between 23 and 46","context":"","code":"def possibleTripletInRange(L, R):\n    flag = False\n    possibleA = 0\n    possibleB = 0\n    possibleC = 0\n    numbersInRange = (R - L + 1)\n    if (numbersInRange < 3):\n        flag = False\n    elif (numbersInRange > 3):\n        flag = True\n        if ((L % 2) > 0):\n            L += 1\n        possibleA = L\n        possibleB = L + 1\n        possibleC = L + 2\n    else:\n        if ((L % 2) == 0):\n            flag = True\n            possibleA = L\n            possibleB = L + 1\n            possibleC = L + 2\n        else:\n            flag = False\n    if (flag):\n        print(\n            \"(\",\n            possibleA,\n            \",\",\n            possibleB,\n            \",\",\n            possibleC,\n            \") is one such\",\n            \"possible triplet between\",\n            L,\n            \"and\",\n            R)\n    else:\n        print(\"No Such Triplet exists between\", L, \"and\", R)\n","test":"\nL = 2\nR = 10\npossibleTripletInRange(L, R)\nL = 23\nR = 46\npossibleTripletInRange(L, R)\n","output":"( 2 , 3 , 4 ) is one such possible triplet between 2 and 10\n( 24 , 25 , 26 ) is one such possible triplet between 24 and 46\n","fn_call":"possibleTripletInRange"}
{"text":"count n digit numbers not having a particular digit | python implementation of above method ; finding number of possible number with n digits excluding a particular digit ; checking if number of digits is zero ; checking if number of digits is one ; checking if number of digits is odd ; calling digitnumber function with ( digit - 1 ) \/ 2 digits ; calling digitnumber function with n \/ 2 digits ; calling digitnumber function checking if excluding digit is zero or non - zero ; ","context":"\nmod = 1000000007\n\n","code":"def digitNumber(n):\n    if (n == 0):\n        return 1\n    if (n == 1):\n        return 9\n    if (n % 2 != 0):\n        temp = digitNumber((n - 1) \/\/ 2) % mod\n        return (9 * (temp * temp) % mod) % mod\n    else:\n        temp = digitNumber(n \/\/ 2) % mod\n        return (temp * temp) % mod\n\n\ndef countExcluding(n, d):\n    if (d == 0):\n        return (9 * digitNumber(n - 1)) % mod\n    else:\n        return (8 * digitNumber(n - 1)) % mod\n","test":"\nd = 9\nn = 3\nprint(countExcluding(n, d))\n","output":"648\n","fn_call":"countExcluding"}
{"text":"check if ","context":"","code":"def isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef isEmirp(n):\n    n = int(n)\n    if isPrime(n) == False:\n        return False\n    rev = 0\n    while n != 0:\n        d = n % 10\n        rev = rev * 10 + d\n        n = int(n \/ 10)\n    return isPrime(rev)\n","test":"\nn = 13\nif isEmirp(n):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isEmirp"}
{"text":"program to convert radian to degree | function for convertion ; ","context":"","code":"def Convert(radian):\n    pi = 3.14159\n    degree = radian * (180 \/ pi)\n    return degree\n","test":"\nradian = 5\nprint(\"degree =\", (Convert(radian)))\n","output":"degree = 286.4791395439889\n","fn_call":"Convert"}
{"text":"find trace of matrix formed by adding row | return sum of first n integers of an ap ; return the trace of sum of row - major matrix and column - major matrix ; finding nth element in ap in case of row major matrix . ; finding sum of first n integers of ap in case of row major matrix ; finding nth element in ap in case of row major matrix ; finding sum of first n integers of ap in case of column major matrix ; ","context":"","code":"def sn(n, an):\n    return (n * (1 + an)) \/ 2\n\n\ndef trace(n, m):\n    an = 1 + (n - 1) * (m + 1)\n    rowmajorSum = sn(n, an)\n    an = 1 + (n - 1) * (n + 1)\n    colmajorSum = sn(n, an)\n    return int(rowmajorSum + colmajorSum)\n","test":"\nN = 3\nM = 3\nprint(trace(N, M))\n","output":"30\n","fn_call":"trace"}
{"text":"maximum of smallest possible area that can get with exactly k cut of given rectangular | utility function ; for the 1 st case ; for the second case ; print final result ; ","context":"","code":"def max_area(n, m, k):\n    if (k > (n + m - 2)):\n        print(\"Not possible\")\n    else:\n        if (k < max(m, n) - 1):\n            result = max(m * (n \/ (k + 1)), n * (m \/ (k + 1)))\n        else:\n            result = max(m \/ (k - n + 2), n \/ (k - m + 2))\n        print(result)\n","test":"\nn = 3\nm = 4\nk = 1\nmax_area(n, m, k)\n","output":"6.0\n","fn_call":"max_area"}
{"text":"program to find the area of a square | function to find the area ; ","context":"","code":"def area_fun(side):\n    area = side * side\n    return area\n","test":"\nside = 4\narea = area_fun(side)\nprint(area)\n","output":"16\n","fn_call":"area_fun"}
{"text":"count ways to express a number as sum of consecutive numbers | utility method to compute number of ways in which n can be represented as sum of consecutive number ; constraint on values of l gives us the time complexity as o ( n ^ 0.5 ) ; ","context":"","code":"def countConsecutive(N):\n    count = 0\n    L = 1\n    while (L * (L + 1) < 2 * N):\n        a = (1.0 * N - (L * (L + 1)) \/ 2) \/ (L + 1)\n        if (a - int(a) == 0.0):\n            count += 1\n        L += 1\n    return count\n","test":"\nN = 15\nprint(countConsecutive(N))\nN = 10\nprint(countConsecutive(N))\n","output":"3\n1\n","fn_call":"countConsecutive"}
{"text":"automorphic number | function to check automorphic number ; store the square ; start comparing digits ; return false , if any digit of n doesn ' t \u2581 \u2581 match \u2581 with \u2581 its \u2581 square ' s digits from last ; reduce n and square ; ","context":"","code":"def isAutomorphic(N):\n    sq = N * N\n    while (N > 0):\n        if (N % 10 != sq % 10):\n            return False\n        N \/= 10\n        sq \/= 10\n    return True\n","test":"\nN = 5\nif isAutomorphic(N):\n    print(\"Automorphic\")\nelse:\n    print(\"Not Automorphic\")\n","output":"Not Automorphic\n","fn_call":"isAutomorphic"}
{"text":"number with maximum number of prime factors | return smallest number having maximum prime factors . ; default value of boolean is false ; sieve of eratosthenes ; storing prime numbers . ; generating number having maximum prime factors . ; ","context":"","code":"def maxPrimefactorNum(N):\n    arr = [True] * (N + 5)\n    i = 3\n    while (i * i <= N):\n        if (arr[i]):\n            for j in range(i * i, N + 1, i):\n                arr[j] = False\n        i += 2\n    prime = []\n    prime .append(2)\n    for i in range(3, N + 1, 2):\n        if (arr[i]):\n            prime .append(i)\n    i = 0\n    ans = 1\n    while (ans * prime[i] <= N and i < len(prime)):\n        ans *= prime[i]\n        i += 1\n    return ans\n","test":"\nN = 40\nprint(maxPrimefactorNum(N))\n","output":"30\n","fn_call":"maxPrimefactorNum"}
{"text":"find square root under modulo p | set 1 ( when p is in form of 4 * i + 3 ) | utility function to do modular exponentiation . it returns ( x ^ y ) % p . ; res = 1 initialize result x = x % p update x if it is more than or equal to p ; if y is odd , multiply x with result ; y must be even now y = y >> 1 y = y \/ 2 ; returns true if square root of n under modulo p exists . assumption : p is of the form 3 * i + 4 where i >= 1 ; try \" + ( n ^ ( ( p \u2581 + \u2581 1 ) \/ 4 ) ) \" ; try \" - ( n \u2581 ^ \u2581 ( ( p \u2581 + \u2581 1 ) \/ 4 ) ) \" ; if none of the above two work , then square root doesn 't exist ; ","context":"","code":"def power(x, y, p):\n\n    res = 1\n    x = x % p\n\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n\n    return res\n\n\ndef squareRoot(n, p):\n\n    if (p % 4 != 3):\n        print(\"Invalid Input\")\n        return\n    n = n % p\n    x = power(n, (p + 1) \/\/ 4, p)\n    if ((x * x) % p == n):\n        print(\"Square root is \", x)\n        return\n\n    x = p - x\n    if ((x * x) % p == n):\n        print(\"Square root is \", x)\n        return\n\n    print(\"Square root doesn't exist \")\n","test":"\np = 7\nn = 2\nsquareRoot(n, p)\n","output":"Square root is  4\n","fn_call":"squareRoot"}
{"text":"primality test | set 3 ( miller\u00e2 \u20ac\u201c rabin ) | python3 program miller - rabin primality test ; utility function to do modular exponentiation . it returns ( x ^ y ) % p ; initialize result ; update x if it is more than or equal to p ; if y is odd , multiply x with result ; y must be even now y = y >> 1 ; y = y \/ 2 ; this function is called for all k trials . it returns false if n is composite and returns false if n is probably prime . d is an odd number such that d * 2 < sup > r < \/ sup > = n - 1 for some r >= 1 ; pick a random number in [ 2. . n - 2 ] corner cases make sure that n > 4 ; compute a ^ d % n ; keep squaring x while one of the following doesn 't  happen  (i) d does not reach n-1  (ii) (x^2) % n is not 1  (iii) (x^2) % n is not n-1 ; return composite ; it returns false if n is composite and returns true if n is probably prime . k is an input parameter that determines accuracy level . higher value of k indicates more accuracy . ; corner cases ; find r such that n = 2 ^ d * r + 1 for some r >= 1 ; iterate given nber of ' k ' times ; ","context":"\nimport random\n\n","code":"def power(x, y, p):\n    res = 1\n    x = x % p\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n\n    return res\n\n\ndef miillerTest(d, n):\n    a = 2 + random.randint(1, n - 4)\n    x = power(a, d, n)\n\n    if (x == 1 or x == n - 1):\n        return True\n    while (d != n - 1):\n        x = (x * x) % n\n        d *= 2\n\n        if (x == 1):\n            return False\n        if (x == n - 1):\n            return True\n    return False\n\n\ndef isPrime(n, k):\n    if (n <= 1 or n == 4):\n        return False\n    if (n <= 3):\n        return True\n    d = n - 1\n    while (d % 2 == 0):\n        d \/\/= 2\n    for i in range(k):\n        if (miillerTest(d, n) == False):\n            return False\n\n    return True\n","test":"\nk = 4\n\nprint(\"All primes smaller than 100: \")\nfor n in range(1, 100):\n    if (isPrime(n, k)):\n        print(n, end=\" \")\n","output":"All primes smaller than 100: \n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 ","fn_call":"isPrime"}
{"text":"length of the longest consecutive 1 s in binary representation | function to find length of the longest consecutive 1 s in binary representation of a number ; initialize result ; count the number of iterations to reach x = 0. ; this operation reduces length of every sequence of 1 s by one . ; ","context":"","code":"def maxConsecutiveOnes(x):\n    count = 0\n    while (x != 0):\n        x = (x & (x << 1))\n        count = count + 1\n    return count\n","test":"\nprint(maxConsecutiveOnes(14))\nprint(maxConsecutiveOnes(222))\n","output":"3\n4\n","fn_call":"maxConsecutiveOnes"}
{"text":"subtract two numbers without using arithmetic operators | python program to subtract two numbers without using arithmetic operators ; iterate till there is no carry ; borrow contains common set bits of y and unset bits of x ; subtraction of bits of x and y where at least one of the bits is not set ; borrow is shifted by one so that subtracting it from x gives the required sum ; ","context":"","code":"def subtract(x, y):\n    while (y != 0):\n        borrow = (~x) & y\n        x = x ^ y\n        y = borrow << 1\n    return x\n","test":"\nx = 29\ny = 13\nprint(\"x - y is\", subtract(x, y))\n","output":"x - y is 16\n","fn_call":"subtract"}
{"text":"subtract two numbers without using arithmetic operators | python program to subtract two number without using arithmetic operator recursive implementation . ; ","context":"","code":"def subtract(x, y):\n    if (y == 0):\n        return x\n    return subtract(x ^ y, (~x & y) << 1)\n","test":"\nx = 29\ny = 13\nprint(\"x - y is\", subtract(x, y))\n","output":"x - y is 16\n","fn_call":"subtract"}
{"text":"kth ancestor of all nodes in an n | function to add an edge in the tree ; dfs to find the kth ancestor of every node ; pushing current node in the vector ; traverse its neighbors ; if k ancestors are not found for current node ; add the kth ancestor for the node ; function to find kth ancestor of each node ; building the tree ; stores all parents of a node ; store kth ancestor of all nodes ; print the ancestors ; ","context":"","code":"def addEdge(v, x, y):\n    v[x].append(y)\n    v[y].append(x)\n\n\ndef dfs(tree, temp, ancestor, u, parent, k):\n    temp .append(u)\n    for i in tree[u]:\n        if (i == parent):\n            continue\n        dfs(tree, temp, ancestor, i, u, k)\n    temp .pop()\n    if (len(temp) < k):\n        ancestor[u] = -1\n    else:\n        ancestor[u] = temp[len(temp) - k]\n\n\ndef KthAncestor(N, K, E, edges):\n    tree = [[]for i in range(N + 1)]\n    for i in range(E):\n        addEdge(tree, edges[i][0], edges[i][1])\n    temp = []\n    ancestor = [0] * (N + 1)\n    dfs(tree, temp, ancestor, 1, 0, K)\n    for i in range(1, N + 1):\n        print(ancestor[i], end=\" \")\n","test":"\nif __name__ == '__main__':\n    N = 9\n    K = 2\n    E = 8\n    edges = [[1, 2], [1, 3], [2, 4], [2, 5], [2, 6], [3, 7], [3, 8], [3, 9]]\n    KthAncestor(N, K, E, edges)\n","output":"-1 -1 -1 1 1 1 1 1 1 ","fn_call":"KthAncestor"}
{"text":"queries to count array elements greater than or equal to a given number with updates | function to build a segment tree ; check for base case ; find mid point ; recursively build the segment tree ; function for push down operation on the segment tree ; function to update the segment tree ; complete overlap ; find mid ; perform push down operation on segment tree ; recursively update the segment tree ; function to process the queryy ; base case ; find mid ; perform push down operation on segment tree ; recursively calculate the result of the queryy ; return the result ; function to count the numbers which are greater than the given queryy ; sort the input array ; create segment tree of size 4 * n vector < int > sum , add , ans ; build the segment tree ; iterate over the queries ; store result in array ; update the elements in the given range ; print the result of queries ; ","context":"","code":"def build(sum, a, l, r, rt):\n    if (l == r):\n        sum[rt] = a[l - 1]\n        return\n    m = (l + r) >> 1\n    build(sum, a, l, m, rt << 1)\n    build(sum, a, m + 1, r, rt << 1 | 1)\n\n\ndef pushDown(sum, add, rt, ln, rn):\n    if (add[rt]):\n        add[rt << 1] += add[rt]\n        add[rt << 1 | 1] += add[rt]\n        sum[rt << 1] += add[rt] * ln\n        sum[rt << 1 | 1] += add[rt] * rn\n        add[rt] = 0\n\n\ndef update(sum, add, L, R, C, l, r, rt):\n    if (L <= l and r <= R):\n        sum[rt] += C * (r - l + 1)\n        add[rt] += C\n        return\n    m = (l + r) >> 1\n    pushDown(sum, add, rt, m - l + 1, r - m)\n    if (L <= m):\n        update(sum, add, L, R, C, l, m, rt << 1)\n    if (R > m):\n        update(sum, add, L, R, C, m + 1, r, rt << 1 | 1)\n\n\ndef queryy(sum, add, L, R, l, r, rt):\n    if (L <= l and r <= R):\n        return sum[rt]\n    m = (l + r) >> 1\n    pushDown(sum, add, rt, m - l + 1, r - m)\n    ans = 0\n    if (L <= m):\n        ans += queryy(sum, add, L, R, l, m, rt << 1)\n    if (R > m):\n        ans += queryy(sum, add, L, R, m + 1, r, (rt << 1 | 1))\n    return ans\n\n\ndef sequenceMaintenance(n, q, a, b, m):\n    a = sorted(a)\n    sum = [0] * (4 * n)\n    add = [0] * (4 * n)\n    ans = []\n    build(sum, a, 1, n, 1)\n    for i in range(q):\n        l = 1\n        r = n\n        pos = -1\n        while (l <= r):\n            m = (l + r) >> 1\n            if (queryy(sum, add, m, m, 1, n, 1) >= b[i]):\n                r = m - 1\n                pos = m\n            else:\n                l = m + 1\n        if (pos == -1):\n            ans .append(0)\n        else:\n            ans .append(n - pos + 1)\n            update(sum, add, pos, n, -m, 1, n, 1)\n    for i in ans:\n        print(i, end=\" \")\n","test":"\nif __name__ == '__main__':\n    N = 4\n    Q = 3\n    M = 1\n    arr = [1, 2, 3, 4]\n    query = [4, 3, 1]\n    sequenceMaintenance(N, Q, arr, query, M)\n","output":"1 2 4 ","fn_call":"sequenceMaintenance"}
{"text":"minimize array length by repeatedly replacing co | python3 program for the above approach ; function to find the final array length by replacing coprime pair with 1 ; iterate over all pairs of element ; check if gcd is 1 ; if no coprime pair found return false ; ","context":"\nimport math\n\n","code":"def hasCoprimePair(arr, n):\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (math .gcd(arr[i], arr[j]) == 1):\n                return True\n    return False\n","test":"\nif __name__ == \"__main__\":\n    n = 3\n    arr = [6, 9, 15]\n    if (hasCoprimePair(arr, n)):\n        print(1)\n    else:\n        print(n)\n","output":"3\n","fn_call":"hasCoprimePair"}
{"text":"count of ways to split n into triplets forming a triangle | function to return the required number of ways ; check if a , b , c can form a triangle ; return number of ways ; ","context":"","code":"def Numberofways(n):\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            c = n - (a + b)\n            if (a < b + c and b < a + c and c < a + b):\n                count += 1\n    return count\n","test":"\nn = 15\nprint(Numberofways(n))\n","output":"28\n","fn_call":"Numberofways"}
{"text":"count of pairs having each element equal to index of the other from an array | function to print the count of pair ; iterate over all the elements of the array ; increment the count ; print the result ; ","context":"","code":"def countPairs(N, arr):\n    count = 0\n    for i in range(N):\n        if (i == arr[arr[i] - 1] - 1):\n            count += 1\n    print(count \/\/ 2)\n","test":"\nif __name__ == \"__main__\":\n    arr = [2, 1, 4, 3]\n    N = len(arr)\n    countPairs(N, arr)\n","output":"2\n","fn_call":"countPairs"}
{"text":"find length of longest fibonacci like subsequence | function to return the max length of fibonacci subsequence ; store all array elements in a hash table ; check until next fib element is found ; next element of fib subseq ; ","context":"","code":"def LongestFibSubseq(A, n):\n    S = set(A)\n    maxLen = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            x = A[j]\n            y = A[i] + A[j]\n            length = 2\n            while y in S:\n                z = x + y\n                x = y\n                y = z\n                length += 1\n                maxLen = max(maxLen, length)\n    return maxLen if maxLen >= 3 else 0\n","test":"\nif __name__ == \"__main__\":\n    A = [1, 2, 3, 4, 5, 6, 7, 8]\n    n = len(A)\n    print(LongestFibSubseq(A, n))\n","output":"5\n","fn_call":"LongestFibSubseq"}
{"text":"maximize count of elements that can be selected having minimum difference between their sum and k | function to count maximum number of elements that can be selected ; sort he array ; traverse the array ; add current element to the sum ; if sum exceeds k ; increment count ; return the count ; ","context":"","code":"def CountMaximum(arr, n, k):\n    arr .sort()\n    Sum, count = 0, 0\n    for i in range(0, n):\n        Sum += arr[i]\n        if (Sum > k):\n            break\n        count += 1\n    return count\n","test":"\narr = [30, 30, 10, 10]\nn = len(arr)\nk = 50\nprint(CountMaximum(arr, n, k))\n","output":"3\n","fn_call":"CountMaximum"}
{"text":"maximum types of candies a person can eat if only n \/ 2 of them can be eaten | function to find number of candy types ; declare a hashset to store candies ; traverse the given array and inserts element into set ; return the result ; function to find maximum number of types of candies a person can eat ; store the number of candies allowed to eat ; store the number of candy types ; return the result ; ","context":"","code":"def num_candyTypes(candies):\n    s = set()\n    for i in range(len(candies)):\n        s .add(candies[i])\n    return len(s)\n\n\ndef distribute_candies(candies):\n    allowed = len(candies) \/ 2\n    types = num_candyTypes(candies)\n    if (types < allowed):\n        print(int(types))\n    else:\n        print(int(allowed))\n","test":"\nif __name__ == '__main__':\n    candies = [4, 4, 5, 5, 3, 3]\n    distribute_candies(candies)\n","output":"3\n","fn_call":"distribute_candies"}
{"text":"length of diagonals of a rhombus using length of side and vertex angle | python program to implement the above approach ; function to calculate the length of diagonals of a rhombus using length of sides and vertex angle ; ","context":"\nimport math\n\n","code":"def Length_Diagonals(a, theta):\n    p = a * math .sqrt(2 + (2 * math .cos(math .radians(theta))))\n    q = a * math .sqrt(2 - (2 * math .cos(math .radians(theta))))\n    return [p, q]\n","test":"\nA = 6\ntheta = 45\nans = Length_Diagonals(A, theta)\nprint(round(ans[0], 2), round(ans[1], 2))\n","output":"11.09 4.59\n","fn_call":"Length_Diagonals"}
{"text":"count of even and odd set bit with array element after xor with k | function to store even and odd variable ; store the count of even and odd set bit ; count the set bit using in built function ; count of set - bit of k ; if y is odd then , count of even and odd set bit will be interchanged ; else it will remain same as the original array ; ","context":"","code":"def countEvenOdd(arr, n, K):\n    even = 0\n    odd = 0\n    for i in range(n):\n        x = bin(arr[i]).count('1')\n        if (x % 2 == 0):\n            even += 1\n        else:\n            odd += 1\n    y = bin(K).count('1')\n    if (y & 1):\n        print(\"Even =\", odd, \", Odd =\", even)\n    else:\n        print(\"Even =\", even, \", Odd =\", odd)\n","test":"\nif __name__ == \"__main__\":\n    arr = [4, 2, 15, 9, 8, 8]\n    K = 3\n    n = len(arr)\n    countEvenOdd(arr, n, K)\n","output":"Even = 2 , Odd = 4\n","fn_call":"countEvenOdd"}
{"text":"longest subsequence from an array of pairs having first element increasing and second element decreasing . | python 3 program for the above approach ; recursive function to find the length of the longest subsequence of pairs whose first element is increasing and second is decreasing ; base case ; not include the current pair in the longest subsequence ; including the current pair in the longest subsequence ;  ; ","context":"\nimport sys\n\n","code":"def longestSubSequence(\n        A,\n        N,\n        ind=0,\n        lastf=-\n        sys .maxsize -\n        1,\n        lasts=sys .maxsize):\n    if (ind == N):\n        return 0\n    ans = longestSubSequence(A, N, ind + 1, lastf, lasts)\n    if (A[ind][0] > lastf and A[ind][1] < lasts):\n        ans = max(\n            ans,\n            longestSubSequence(\n                A,\n                N,\n                ind + 1,\n                A[ind][0],\n                A[ind][1]) + 1)\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    A = [[1, 2], [2, 2], [3, 1]]\n    N = len(A)\n    print(longestSubSequence(A, N))\n","output":"2\n","fn_call":"longestSubSequence"}
{"text":"count triples with bitwise and equal to zero | function to find the number of triplets whose bitwise and is 0. ; stores the count of triplets having bitwise and equal to 0 ; stores frequencies of all possible a [ i ] & a [ j ] ; traverse the array ; update frequency of bitwise and of all array elements with a ; traverse the array ; iterate the map ; if bitwise and of triplet is zero , increment cnt ; return the number of triplets whose bitwise and is 0. ; ","context":"","code":"def countTriplets(A):\n    cnt = 0\n    tuples = {}\n    for a in A:\n        for b in A:\n            if (a & b) in tuples:\n                tuples[a & b] += 1\n            else:\n                tuples[a & b] = 1\n    for a in A:\n        for t in tuples:\n            if ((t & a) == 0):\n                cnt += tuples[t]\n    return cnt\n","test":"\nif __name__ == \"__main__\":\n    A = [2, 1, 3]\n    print(countTriplets(A))\n","output":"12\n","fn_call":"countTriplets"}
{"text":"count ways to reach a score using 1 and 2 with no consecutive 2 s | bottom up approach for counting ways to reach a score using 1 and 2 with consecutive 2 allowed ; noofways [ i ] will store count for value i . 3 extra values are to take care of corner case n = 0 ; loop till \" n + 1\" to compute value for \" n \" ; number of ways if first run is 1 + number of ways if first run is 2 and second run is 1 ; ","context":"","code":"def CountWays(n):\n    noOfWays = [0] * (n + 3)\n    noOfWays[0] = 1\n    noOfWays[1] = 1\n    noOfWays[2] = 1 + 1\n    for i in range(3, n + 1):\n        noOfWays[i] = noOfWays[i - 1] + noOfWays[i - 3]\n    return noOfWays[n]\n","test":"\nif __name__ == '__main__':\n    n = 5\n    print(CountWays(n))\n","output":"6\n","fn_call":"CountWays"}
{"text":"find the last player to be able to flip a character in a binary string | python3 program for the above approach ; function to check if player a wins the game or not ; stores size of the groups of 0 s ; stores size of the group of 0 s ; traverse the array ; increment c by 1 if a [ i ] is 0 ; otherwise , push the size in array and reset c to 0 ; if there is no substring of odd length consisting only of 0 s ; if there is only 1 substring of odd length consisting only of 0 s ; otherwise ; stores the size of the largest and second largest substrings of 0 s ; traverse the array v [ ] ; if current element is greater than first , then update both first and second ; if arr [ i ] is in between first and second , then update second ; if the condition is satisfied ; ","context":"\nimport sys\n\n","code":"def findWinner(a, n):\n    v = []\n    c = 0\n    for i in range(0, n):\n        if (a[i] == '0'):\n            c += 1\n        else:\n            if (c != 0):\n                v .append(c)\n            c = 0\n    if (c != 0):\n        v .append(c)\n    if (len(v) == 0):\n        print(\"Player B\", end=\"\")\n        return\n    if (len(v) == 1):\n        if ((v[0] & 1) != 0):\n            print(\"Player A\", end=\"\")\n        else:\n            print(\"Player B\", end=\"\")\n        return\n    first = sys .minsize\n    second = sys .minsize\n    for i in range(len(v)):\n        if (a[i] > first):\n            second = first\n            first = a[i]\n        elif (a[i] > second and a[i] != first):\n            second = a[i]\n    if (((first & 1) != 0) and (first + 1) \/\/ 2 > second):\n        print(\"Player A\", end=\"\")\n    else:\n        print(\"Player B\", end=\"\")\n","test":"\nS = \"1100011\"\nN = len(S)\nfindWinner(S, N)\n","output":"Player A","fn_call":"findWinner"}
{"text":"check if k palindromic strings can be formed from a given string | function to check whether the is k palindrome or not ; map to frequency of character ; check when k is given as same as length of string ; storing the frequency of every character in map ; if k is greater than size of then return false ; check that number of character having the odd frequency ; if k is less than number of odd frequency character then it is again false otherwise true ; ","context":"","code":"def can_Construct(S, K):\n    m = dict()\n    p = 0\n    if (len(S) == K):\n        return True\n    for i in S:\n        m[i] = m .get(i, 0) + 1\n    if (K > len(S)):\n        return False\n    else:\n        for h in m:\n            if (m[h] % 2 != 0):\n                p = p + 1\n    if (K < p):\n        return False\n    return True\n","test":"\nif __name__ == '__main__':\n    S = \"annabelle\"\n    K = 4\n    if (can_Construct(S, K)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"can_Construct"}
{"text":"check if two strings are same ignoring their cases | function to compare two strings ignoring their cases ; convert to lower case ; comparing both ; if strings are equal , return true otherwise false ; function to print the same or not same if strings are equal or not equal ; ","context":"","code":"def equalIgnoreCase(str1, str2):\n    str1 = str1 .lower()\n    str2 = str2 .lower()\n    x = str1 == str2\n    return x\n\n\ndef equalIgnoreCaseUtil(str1, str2):\n    res = equalIgnoreCase(str1, str2)\n    if (res):\n        print(\"Same\")\n    else:\n        print(\"Not Same\")\n","test":"\nif __name__ == \"__main__\":\n    str1 = \"Geeks\"\n    str2 = \"geeks\"\n    equalIgnoreCaseUtil(str1, str2)\n    str1 = \"Geek\"\n    str2 = \"geeksforgeeks\"\n    equalIgnoreCaseUtil(str1, str2)\n","output":"Same\nNot Same\n","fn_call":"equalIgnoreCaseUtil"}
{"text":"Program to print Step Pattern | Python3 program to print Step Pattern ; function to print the steps ; declare a flag ; traverse through all the characters in the string ; if the x value is 0. . then we must increment till n ... set flag to true ; if the x value is n - 1 then we must decrement till 0 ... set flag as false ; print x * s ; checking whether to increment or decrement x ; Get the String and the number n ; calling the function","context":"\nimport math as mt\n\n","code":"def steps(string, n):\n    flag = False\n    x = 0\n    for i in range(len(string)):\n        if (x == 0):\n            flag = True\n        if (x == n - 1):\n            flag = False\n        for j in range(x):\n            print(\"*\", end=\"\")\n        print(string[i])\n        if (flag):\n            x += 1\n        else:\n            x -= 1\n","test":"\nn = 4\nstring = \"GeeksForGeeks\"\nprint(\"String: \", string)\nprint(\"Max Length of Steps: \", n)\nsteps(string, n)\n","output":"String:  GeeksForGeeks\nMax Length of Steps:  4\nG\n*e\n**e\n***k\n**s\n*F\no\n*r\n**G\n***e\n**e\n*k\ns\n","fn_call":"steps"}
{"text":"frequency measuring techniques for competitive programming | python program to count frequencies of array items ; mark all array elements as not visited ; traverse through array elements and count frequencies ; skip this element if already processed ; count frequency ; ","context":"","code":"def countFreq(arr, n):\n    visited = [False for i in range(n)]\n    for i in range(n):\n        if visited[i]:\n            continue\n        count = 1\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                visited[j] = True\n                count += 1\n        print(arr[i], count)\n","test":"\na = [10, 20, 20, 10, 10, 20, 5, 20]\nn = len(a)\ncountFreq(a, n)\n","output":"10 3\n20 4\n5 1\n","fn_call":"countFreq"}
{"text":"check divisibility of binary string by 2 ^ k | function to check whether ","context":"","code":"def isDivisible(str, k):\n    n = len(str)\n    c = 0\n    for i in range(0, k):\n        if (str[n - i - 1] == '0'):\n            c += 1\n    return (c == k)\n","test":"\nstr1 = \"10101100\"\nk = 2\nif (isDivisible(str1, k)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\nstr2 = \"111010100\"\nk = 2\nif (isDivisible(str2, k)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\nYes\n","fn_call":"isDivisible"}
{"text":"check if any anagram of a string is palindrome or not | python program to check if any anagram of a string is palindrome or not ; function to check whether characters of a string can form a palindrome ; create a count array and initialize all values as 0 ; for each character in input strings , increment count in the corresponding count array ; count odd occurring characters ; return true if odd count is 0 or 1 , ; ","context":"\nNO_OF_CHARS = 256\n\n","code":"def canFormPalindrome(string):\n    count = [0 for i in range(NO_OF_CHARS)]\n    for i in string:\n        count[ord(i)] += 1\n    odd = 0\n    for i in range(NO_OF_CHARS):\n        if (count[i] & 1):\n            odd += 1\n        if (odd > 1):\n            return False\n    return True\n","test":"\nif (canFormPalindrome(\"geeksforgeeks\")):\n    print(\"Yes\")\nelse:\n    print(\"No\")\nif (canFormPalindrome(\"geeksogeeks\")):\n    print(\"Yes\")\nelse:\n    print(\"NO\")\n","output":"No\nYes\n","fn_call":"canFormPalindrome"}
{"text":"program to check if input is an integer or a string | this function returns true if s is a number else false ; ","context":"","code":"def isNumber(s):\n    for i in range(len(s)):\n        if s[i].isdigit() != True:\n            return False\n    return True\n","test":"\nif __name__ == \"__main__\":\n    str = \"6790\"\n    if isNumber(str):\n        print(\"Integer\")\n    else:\n        print(\"String\")\n","output":"Integer\n","fn_call":"isNumber"}
{"text":"print reverse of a string using recursion | function to print reverse of the passed string ; ","context":"","code":"def reverse(string):\n    if len(string) == 0:\n        return\n    temp = string[0]\n    reverse(string[1:])\n    print(temp, end='')\n","test":"\nstring = \"Geeks for Geeks\"\nreverse(string)\n","output":"skeeG rof skeeG","fn_call":"reverse"}
{"text":"probability of distributing given balls into two halves having equal count of distinct colors | stores the count of distinct colors in box1 ; stores the count of distinct colors in box2 ; function to calculate the required probability ; calculate factorial from [ 1 , 10 ] ; assign all distinct balls to second box ; total number of balls ; calculate total number of balls ; if k is an odd number ; total ways of distributing the balls in two equal halves ; required number of ways ; return the required probability ; function to calculate total number of possible distributions which satisfies the given conditions ; if used balls is equal to k \/ 2 ; if box1 is equal to box2 ; base condition ; stores the number of ways of distributing remaining balls without including the current balls in box1 ; increment box1 by one ; iterate over the range [ 1 , balls [ i ] ] ; if all the balls goes to box1 , then decrease box2 by one ; total number of ways of selecting j balls ; increment res by total number of valid ways of distributing the remaining balls ; decrement box1 by one ; increment box2 by 1 ; function to calculate factorial of n ; base case ; iterate over the range [ 1 , n ] ; function to calculate ncr ; ","context":"\nbox1 = 0\nbox2 = 0\nfact = [0 for i in range(11)]\n\n","code":"def validPermutations(n, balls, usedBalls, i):\n    global box1, box2, fact\n    if (usedBalls == n):\n        if (box1 == box2):\n            return 1\n        else:\n            return 0\n    if (i >= len(balls)):\n        return 0\n    res = validPermutations(n, balls, usedBalls, i + 1)\n    box1 += 1\n    for j in range(1, balls[i] + 1):\n        if (j == balls[i]):\n            box2 -= 1\n        combinations = comb(balls[i], j)\n        res += combinations * validPermutations(n, balls, usedBalls + j, i + 1)\n    box1 -= 1\n    box2 += 1\n    return res\n\n\ndef factorial(N):\n    global box1, box2, fact\n    fact[0] = 1\n    for i in range(1, N + 1):\n        fact[i] = fact[i - 1] * i\n\n\ndef comb(n, r):\n    global box1, box2, fact\n    res = fact[n] \/\/ fact[r]\n    res \/\/= fact[n - r]\n    return res\n\ndef getProbability(balls):\n    global box1, box2, fact\n    factorial(10)\n    box2 = len(balls)\n    K = 0\n    for i in range(len(balls)):\n        K += balls[i]\n    if (K % 2 == 1):\n        return 0\n    all = comb(K, K \/\/ 2)\n    validPermutation = validPermutations(K \/\/ 2, balls, 0, 0)\n    return validPermutation \/ all\n","test":"\narr = [2, 1, 1]\nN = 4\nprint(getProbability(arr))\n","output":"0.6666666666666666\n","fn_call":"getProbability"}
{"text":"area of a n | python3 program to find the area of a regular polygon with given radius ; function to find the area of a regular polygon ; side and radius cannot be negative ; area degree converted to radians ; ","context":"\nfrom math import sin\n\n","code":"def polyarea(n, r):\n    if (r < 0 and n < 0):\n        return -1\n    A = (((r * r * n) * sin((360 \/ n) * 3.14159 \/ 180)) \/ 2)\n    return round(A, 3)\n","test":"\nif __name__ == \"__main__\":\n    r, n = 9, 6\n    print(polyarea(n, r))\n","output":"210.444\n","fn_call":"polyarea"}
{"text":"check if a line at 45 degree can divide the plane into two equal weight parts |  ; checking if a plane can be divide by a line at 45 degrees such that weight sum is equal ; rotating each point by 45 degrees and calculating prefix sum . also , finding maximum and minimum x coordinates ; storing weight sum upto x - y point ; finding prefix sum ; line passes through i , so it neither falls left nor right . ; ","context":"\nfrom collections import defaultdict\n\n","code":"def is_partition_possible(n, x, y, w):\n    weight_at_x = defaultdict(int)\n    max_x = -2e3\n    min_x = 2e3\n    for i in range(n):\n        new_x = x[i] - y[i]\n        max_x = max(max_x, new_x)\n        min_x = min(min_x, new_x)\n        weight_at_x[new_x] += w[i]\n    sum_till = []\n    sum_till .append(0)\n    for x in range(min_x, max_x + 1):\n        sum_till .append(sum_till[-1] + weight_at_x[x])\n    total_sum = sum_till[-1]\n    partition_possible = False\n    for i in range(1, len(sum_till)):\n        if (sum_till[i] == total_sum - sum_till[i]):\n            partition_possible = True\n        if (sum_till[i - 1] == total_sum - sum_till[i]):\n            partition_possible = True\n    if partition_possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","test":"\nif __name__ == \"__main__\":\n    n = 3\n    x = [-1, -2, 1]\n    y = [1, 1, -1]\n    w = [3, 1, 4]\n    is_partition_possible(n, x, y, w)\n","output":"YES\n","fn_call":"is_partition_possible"}
{"text":"slope of perpendicular to line | function to find the slope of other line ; ","context":"","code":"def findPCSlope(m):\n    return -1.0 \/ m\n","test":"\nm = 2.0\nprint(findPCSlope(m))\n","output":"-0.5\n","fn_call":"findPCSlope"}
{"text":"program to find area of a circular segment | python3 program to find area of segment of a circle ; function to find area of segment ; calculating area of sector ; calculating area of triangle ; ","context":"\nimport math\npi = 3.14159\n\n","code":"def area_of_segment(radius, angle):\n    area_of_sector = pi * (radius * radius)*(angle \/ 360)\n    area_of_triangle = 1 \/ 2 * (radius * radius)*math .sin((angle * pi) \/ 180)\n    return area_of_sector - area_of_triangle\n","test":"\nradius = 10.0\nangle = 90.0\nprint(\"Area of minor segment =\", area_of_segment(radius, angle))\nprint(\"Area of major segment =\", area_of_segment(radius, (360 - angle)))\n","output":"Area of minor segment = 28.53975000004401\nArea of major segment = 285.6192499996039\n","fn_call":"area_of_segment"}
{"text":"area of a circular sector | python program to find area of a sector ; calculating area of the sector ; ","context":"","code":"def SectorArea(radius, angle):\n    pi = 22 \/ 7\n    if angle >= 360:\n        print(\"Angle not possible\")\n        return\n    else:\n        sector = (pi * radius ** 2) * (angle \/ 360)\n        print(sector)\n        return\n","test":"\nradius = 9\nangle = 60\nSectorArea(radius, angle)\n","output":"42.42857142857142\n","fn_call":"SectorArea"}
{"text":"make two numbers equal by multiplying with their prime factors minimum number of times | python program for the above approach ; function to calculate total number of prime factor with their prime factor ; iterate while the number is even ; reduce to half ; iterate up to sqrt ( n ) ; iterate while n has factors of i ; removing one factor of i ; function to count the number of factors ; find the gcd ; find multiples left in x and y ; find prime factor of multiple left in x and y ; initialize ans ; check if it possible to obtain x or not ; check if it possible to obtain y or not ; return main ans ; ","context":"\nimport math\n\n","code":"def PrimeFactor(N):\n    ANS = dict()\n    while N % 2 == 0:\n        if 2 in ANS:\n            ANS[2] += 1\n        else:\n            ANS[2] = 1\n        N = N \/\/ 2\n    for i in range(3, int(math .sqrt(N)) + 1, 2):\n        while N % i == 0:\n            if i in ANS:\n                ANS[i] += 1\n            else:\n                ANS[i] = 1\n            N = N \/\/ i\n    if 2 < N:\n        ANS[N] = 1\n    return ANS\n\n\ndef CountToMakeEqual(X, Y):\n    GCD = math .gcd(X, Y)\n    newY = X \/\/ GCD\n    newX = Y \/\/ GCD\n    primeX = PrimeFactor(newX)\n    primeY = PrimeFactor(newY)\n    ans = 0\n    for factor in primeX:\n        if X % factor != 0:\n            return -1\n        ans += primeX[factor]\n    for factor in primeY:\n        if Y % factor != 0:\n            return -1\n        ans += primeY[factor]\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    X = 36\n    Y = 48\n    ans = CountToMakeEqual(X, Y)\n    print(ans)\n","output":"3\n","fn_call":"CountToMakeEqual"}
{"text":"make given segments non | python3 program for the above approach ; function to check whether the graph is bipartite or not ; mark source node as visited ; push the source vertex in queue ; get the front of the queue ; assign the color to the popped node ; traverse the adjacency list of the node u ; if any node is visited & a different colors has been assigned , then return false ; set visited [ x ] ; push the node x into the queue ; update color of node ; if the graph is bipartite ; function to add an edge between the nodes u and v ; function to check if the assignment of direction can be possible to all the segments , such that they do not intersect after a long period of time ; stores the adjacency list of the created graph ; generate all possible pairs ; if segments do not overlap ; otherwise , the segments overlap ; if both segments have same speed , then add an edge ; keep the track of visited nodes ; iterate for all possible nodes ; check whether graph is bipartite or not ; if the graph is bipartite ; ","context":"\nfrom collections import deque\n\n","code":"def check(Adj, Src, N, visited):\n    color = [0] * N\n    visited = [True] * Src\n    q = deque()\n    q .append(Src)\n    while (len(q) > 0):\n        u = q .popleft()\n        Col = color[u]\n        for x in Adj[u]:\n            if (visited[x] and color[x] == Col):\n                return False\n            elif (visited[x] == False):\n                visited[x] = True\n                q .append(x)\n                color[x] = 1 - Col\n    return True\n\n\ndef addEdge(Adj, u, v):\n    Adj[u].append(v)\n    Adj[v].append(u)\n    return Adj\n\n\ndef isPossible(Arr, N):\n    Adj = [[]for i in range(N)]\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if (Arr[i][0] < Arr[j][1] or Arr[i][1] > Arr[j][0]):\n                continue\n            else:\n                if (Arr[i][2] == Arr[j][2]):\n                    Adj = addEdge(Adj, i, j)\n    visited = [False] * N\n    for i in range(N):\n        if (visited[i] == False and len(Adj[i]) > 0):\n            if (check(Adj, i, N, visited) == False):\n                print(\"No\")\n                return\n    print(\"Yes\")\n","test":"\nif __name__ == '__main__':\n    arr = [[5, 7, 2], [4, 6, 1], [1, 5, 2], [6, 5, 1]]\n    N = len(arr)\n    isPossible(arr, N)\n","output":"Yes\n","fn_call":"isPossible"}
{"text":"minimum number of swaps required to sort an array of first n number | function to find minimum swaps ; initialise count variable ; if current element is not at the right position ; swap current element with correct position of that element ; increment for next index when current element is at correct position ; ","context":"","code":"def minimumSwaps(arr):\n    count = 0\n    i = 0\n    while (i < len(arr)):\n        if (arr[i] != i + 1):\n            while (arr[i] != i + 1):\n                temp = 0\n                temp = arr[arr[i] - 1]\n                arr[arr[i] - 1] = arr[i]\n                arr[i] = temp\n                count += 1\n        i += 1\n    return count\n","test":"\nif __name__ == '__main__':\n    arr = [2, 3, 4, 1, 5]\n    print(minimumSwaps(arr))\n","output":"3\n","fn_call":"minimumSwaps"}
{"text":"recursive selection sort | return minimum index ; find minimum of remaining elements ; return minimum of current and remaining . ; recursive selection sort . n is size of a [ ] and index is index of starting element . ; return when starting and size are same ; calling minimum index function for minimum index ; swapping when index and minimum index are not same ; swap ; recursively calling selection sort function ; ","context":"","code":"def minIndex(a, i, j):\n    if i == j:\n        return i\n    k = minIndex(a, i + 1, j)\n    return (i if a[i] < a[k]else k)\n\n\ndef recurSelectionSort(a, n, index=0):\n    if index == n:\n        return -1\n    k = minIndex(a, index, n - 1)\n    if k != index:\n        a[k], a[index] = a[index], a[k]\n        a[k], a[index] = a[index], a[k]\n    recurSelectionSort(a, n, index + 1)\n","test":"\narr = [3, 1, 5, 2, 7, 0]\nn = len(arr)\nrecurSelectionSort(arr, n)\nfor i in arr:\n    print(i, end=' ')\n","output":"3 1 5 2 7 0 ","fn_call":"recurSelectionSort"}
{"text":"maximum possible difference of sum of two subsets of an array | set 2 | python 3 program for the above approach ; stores the positive elements ; stores the negative elements ; stores the count of 0 s ; sum of all positive numbers ; sum of all negative numbers ; iterate over the array ; stores the difference ; sort the positive numbers in ascending order ; sort the negative numbers in decreasing order ; case 1 : include both positive and negative numbers ; put all numbers in subset a and one 0 in subset b ; put all numbers in subset a except the smallest positive number which is put in b ; put all numbers in subset b and one 0 in subset a ; place the largest negative number in subset a and remaining in b ; ","context":"","code":"def maxSumAfterPartition(arr, n):\n    pos = []\n    neg = []\n    zero = 0\n    pos_sum = 0\n    neg_sum = 0\n    for i in range(n):\n        if (arr[i] > 0):\n            pos .append(arr[i])\n            pos_sum += arr[i]\n        elif (arr[i] < 0):\n            neg .append(arr[i])\n            neg_sum += arr[i]\n        else:\n            zero += 1\n    ans = 0\n    pos .sort()\n    neg .sort(reverse=True)\n    if (len(pos) > 0 and len(neg) > 0):\n        ans = (pos_sum - neg_sum)\n    elif (len(pos) > 0):\n        if (zero > 0):\n            ans = (pos_sum)\n        else:\n            ans = (pos_sum - 2 * pos[0])\n    else:\n        if (zero > 0):\n            ans = (-1 * neg_sum)\n        else:\n            ans = (neg[0] - (neg_sum - neg[0]))\n    return ans\n","test":"\nif __name__ == '__main__':\n    arr = [1, 2, 3, -5, -7]\n    n = len(arr)\n    print(maxSumAfterPartition(arr, n))\n","output":"18\n","fn_call":"maxSumAfterPartition"}
{"text":"split an array into subarrays with maximum bitwise xor of their respective bitwise or values | function to find the bitwise or of array elements ; stores the resultant maximum value of bitwise xor ; traverse the array arr [ ] ; return the maximum value res ; ","context":"","code":"def MaxXOR(arr, N):\n    res = 0\n    for i in range(N):\n        res |= arr[i]\n    return res\n","test":"\nif __name__ == '__main__':\n    arr = [1, 5, 7]\n    N = len(arr)\n    print(MaxXOR(arr, N))\n","output":"7\n","fn_call":"MaxXOR"}
{"text":"count number of common elements between a sorted array and a reverse sorted array | function to count the number of elements common in both the arrays ; used to traverse array a [ ] and b [ ] from the front and the back ; stores the count of numbers common in both array ; if a [ first ] is less than b [ second ] ; increment the value of first ; if b [ second ] is less than a [ first ] ; decrement the value of second ; a [ first ] is equal to b [ second ] ; increment the value of count ; increment the value of first ; decrement the value of second ; return the value of count ; ","context":"","code":"def countEqual(A, B, N):\n    first = 0\n    second = N - 1\n    count = 0\n    while (first < N and second >= 0):\n        if (A[first] < B[second]):\n            first += 1\n        elif (B[second] < A[first]):\n            second -= 1\n        else:\n            count += 1\n            first += 1\n            second -= 1\n    return count\n","test":"\nA = [2, 4, 5, 8, 12, 13, 17, 18, 20, 22, 309, 999]\nB = [109, 99, 68, 54, 22, 19, 17, 13, 11, 5, 3, 1]\nN = len(A)\nprint(countEqual(A, B, N))\n","output":"4\n","fn_call":"countEqual"}
{"text":"queries to count palindrome numbers from a range whose sum of digits is a prime number | python 3 program for the above approach ; function to check if the number n is palindrome or not ; store the value of n ; store the reverse of number n ; reverse temp and store in res ; if n is the same as res , then return true ; function to find the sum of the digits of the number n ; stores the sum of the digits ; add the last digit of the number n to the sum ; remove the last digit from n ; return the resultant sum ; function to check if n is prime or not ; if i is 1 or 0 , then return false ; check if i is divisible by any number in the range [ 2 , n \/ 2 ] ; if n is divisible by i ; function to precompute all the numbers till 10 ^ 5 that are palindromic and whose sum of digits is prime numbers ; iterate over the range 1 to 10 ^ 5 ; if i is a palindrome number ; stores the sum of the digits in i ; if the sum of digits in i is a prime number ; find the prefix sum of arr [ ] ; function to count all the numbers in the given ranges that are palindromic and the sum of digits is prime numbers ; function call to precompute all the numbers till 10 ^ 5 ; traverse the given queries q [ ] ; print the result for each query ; ","context":"\narr = [0 for i in range(100005)]\n\n","code":"def isPalindrome(N):\n    temp = N\n    res = 0\n    while (temp != 0):\n        rem = temp % 10\n        res = res * 10 + rem\n        temp \/\/= 10\n    if (res == N):\n        return True\n    else:\n        return False\n\n\ndef sumOfDigits(N):\n    sum = 0\n    while (N != 0):\n        sum += N % 10\n        N \/\/= 10\n    return sum\n\n\ndef isPrime(n):\n    if (n <= 1):\n        return False\n    for i in range(2, (n \/\/ 2) + 1, 1):\n        if (n % i == 0):\n            return False\n    return True\n\n\ndef precompute():\n    for i in range(1, 100001, 1):\n        if (isPalindrome(i)):\n            sum = sumOfDigits(i)\n            if (isPrime(sum)):\n                arr[i] = 1\n            else:\n                arr[i] = 0\n        else:\n            arr[i] = 0\n    for i in range(1, 100001, 1):\n        arr[i] = arr[i] + arr[i - 1]\n\n\ndef countNumbers(Q, N):\n    precompute()\n    for i in range(N):\n        print(arr[Q[i][1]] - arr[Q[i][0] - 1])\n","test":"\nif __name__ == '__main__':\n    Q = [[5, 9], [1, 101]]\n    N = len(Q)\n    countNumbers(Q, N)\n","output":"2\n6\n","fn_call":"countNumbers"}
{"text":"smallest number greater than or equal to n having sum of digits not exceeding s | function to calculate sum of digits of n ; function to find the smallest possible integer satisfying the given condition ; if sum of digits is already smaller than s ; initialize variables ; find the k - th digit ; add remaining ; if sum of digits does not exceed s ; update k ; ","context":"","code":"def sum(n):\n    sm = 0\n    while (n > 0):\n        sm += n % 10\n        n \/\/= 10\n    return sm\n\n\ndef smallestNumber(n, s):\n    if (sum(n) <= s):\n        return n\n    ans, k = n, 1\n    for i in range(9):\n        digit = (ans \/\/ k) % 10\n        add = k * ((10 - digit) % 10)\n        ans += add\n        if (sum(ans) <= s):\n            break\n        k *= 10\n    return ans\n","test":"\nn, s = 3, 2\nprint(smallestNumber(n, s))\n","output":"10\n","fn_call":"smallestNumber"}
{"text":"maximize count of decreasing consecutive subsequences from an array | python program to implement the above approach ; function to find the maximum number number of required subsequences ; dictionary to store number of arrows available with height of arrow as key ; stores the maximum count of possible subsequences ; stores the count of possible subsequences ; check if i - th element can be part of any of the previous subsequence ; count of subsequences possible with arr [ i ] as the next element ; if more than one such subsequence exists ; include arr [ i ] in a subsequence ; otherwise ; increase count of subsequence possible with arr [ i ] - 1 as the next element ; start a new subsequence ; increase count of subsequence possible with arr [ i ] - 1 as the next element ; return the answer ; ","context":"\nfrom collections import defaultdict\n\n","code":"def maxSubsequences(arr, n) -> int:\n    m = defaultdict(int)\n    maxCount = 0\n    count = 0\n    for i in range(0, n):\n        if arr[i] in m .keys():\n            count = m[arr[i]]\n            if count > 1:\n                m[arr[i]] = count - 1\n            else:\n                m .pop(arr[i])\n            if arr[i] - 1 > 0:\n                m[arr[i] - 1] += 1\n        else:\n            maxCount += 1\n        maxCount += 1\n        if arr[i] - 1 > 0:\n            m[arr[i] - 1] += 1\n    return maxCount\n","test":"\nif __name__ == '__main__':\n    n = 5\n    arr = [4, 5, 2, 1, 4]\n    print(maxSubsequences(arr, n))\n","output":"8\n","fn_call":"maxSubsequences"}
{"text":"remove the first and last occurrence of a given character from a string | function to remove first and last occurrence of a given character from the given string ; traverse the given string from the beginning ; if ch is found ; traverse the given string from the end ; if ch is found ; ","context":"","code":"def removeOcc(s, ch):\n    for i in range(len(s)):\n        if (s[i] == ch):\n            s = s[0:i] + s[i + 1:]\n            break\n    for i in range(len(s) - 1, -1, -1):\n        if (s[i] == ch):\n            s = s[0:i] + s[i + 1:]\n            break\n    return s\n","test":"\ns = \"hello world\"\nch = 'l'\nprint(removeOcc(s, ch))\n","output":"helo word\n","fn_call":"removeOcc"}
{"text":"minimum steps for increasing and decreasing array to reach either 0 or n | python3 program for the above approach ; function that finds the minimum steps to reach either 0 or n for given increasing and decreasing arrays ; initialize variable to find the minimum element ; find minimum element in increasing array ; initialize variable to find the maximum element ; find maximum element in decreasing array ; find the minimum steps ; prthe minimum steps ; ","context":"\nimport sys\n\n","code":"def minSteps(N, increasing, decreasing):\n    Min = sys .maxsize\n    for i in increasing:\n        if (Min > i):\n            Min = i\n    Max = -sys .maxsize\n    for i in decreasing:\n        if (Max < i):\n            Max = i\n    minSteps = max(Max, N - Min)\n    print(minSteps)\n","test":"\nif __name__ == '__main__':\n    N = 7\n    increasing = [3, 5]\n    decreasing = [6]\n    minSteps(N, increasing, decreasing)\n","output":"6\n","fn_call":"minSteps"}
{"text":"minimum number of adjacent swaps required to convert a permutation to another permutation by given condition | function to find the minimum number of swaps ; new array to convert to 1 - based indexing ; keeps count of swaps ; check if it is an ' x ' position ; corner case ; swap ; print the minimum swaps ; given number n ; ","context":"","code":"def solve(P, n):\n    arr = []\n    arr .append(0)\n    for x in P:\n        arr .append(x)\n    cnt = 0\n    for i in range(1, n):\n        if (arr[i] == i):\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            cnt += 1\n    if (arr[n] == n):\n        arr[n - 1], arr[n] = arr[n], arr[n - 1]\n        cnt += 1\n    print(cnt)\n","test":"\nN = 9\nP = [1, 2, 4, 9, 5, 8, 7, 3, 6]\nsolve(P, N)\n","output":"3\n","fn_call":"solve"}
{"text":"count of interesting primes upto n | function to find all prime numbers ; create a boolean array \" prime [ 0 . . n ] \" and initialize all entries as true . a value in prime [ i ] will finally be false if i is not a prime . ; if prime [ p ] is not changed , then it is a prime ; update all multiples of p greater than or equal to the square of it ; store all prime numbers ; function to check if a number is perfect square or not ; to store all primes ; to store all interseting primes ; store all perfect squares ; store all perfect quadruples ; store all interseting primes ; return count of interseting primes ; ","context":"","code":"def SieveOfEratosthenes(n, allPrimes):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            allPrimes .add(p)\n\n\ndef countInterestingPrimes(n):\n    allPrimes = set()\n    SieveOfEratosthenes(n, allPrimes)\n    interestingPrimes = set()\n    squares, quadruples = [], []\n    i = 1\n    while i * i <= n:\n        squares .append(i * i)\n        i += 1\n    i = 1\n    while i * i * i * i <= n:\n        quadruples .append(i * i * i * i)\n        i += 1\n    for a in squares:\n        for b in quadruples:\n            if a + b in allPrimes:\n                interestingPrimes .add(a + b)\n    return len(interestingPrimes)\n","test":"\nN = 10\nprint(countInterestingPrimes(N))\n","output":"2\n","fn_call":"countInterestingPrimes"}
{"text":"check if an array is wave array | function to check if array is wave array arr : input array n : size of array ; check the wave form if arr [ 1 ] is greater than left and right . same pattern will be followed by whole elements , else reverse pattern will be followed by array elements ; check for last element ; check for last element ; ","context":"","code":"def isWaveArray(arr, n):\n    result = True\n    if (arr[1] > arr[0] and arr[1] > arr[2]):\n        for i in range(1, n - 1, 2):\n            if (arr[i] > arr[i - 1] and arr[i] > arr[i + 1]):\n                result = True\n            else:\n                result = False\n                break\n        if (result and n % 2 == 0):\n            if (arr[n - 1] <= arr[n - 2]):\n                result = False\n    elif (arr[1] < arr[0] and arr[1] < arr[2]):\n        for i in range(1, n - 1, 2):\n            if (arr[i] < arr[i - 1] and arr[i] < arr[i + 1]):\n                result = True\n            else:\n                result = False\n                break\n        if (result and n % 2 == 0):\n            if (arr[n - 1] >= arr[n - 2]):\n                result = False\n    return result\n","test":"\nif __name__ == \"__main__\":\n    arr = [1, 3, 2, 4]\n    n = len(arr)\n    if (isWaveArray(arr, n)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","output":"YES\n","fn_call":"isWaveArray"}
{"text":"count distinct sequences obtained by replacing all elements of subarrays having equal first and last elements with the first element any number of times | function to count number of sequences satisfying the given criteria ; stores the index of the last occurrence of the element ; initialize an array to store the number of different sequences that are possible of length i ; base case ; if no operation is applied on ith element ; if operation is applied on ith element ; update the last occurrence of curele ; finally , prthe answer ; ","context":"","code":"def countPossiblities(arr, n):\n    lastOccur = [-1] * 100000\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        curEle = arr[i - 1]\n        dp[i] = dp[i - 1]\n        if (lastOccur[curEle] != -1 and lastOccur[curEle] < i - 1):\n            dp[i] += dp[lastOccur[curEle]]\n        lastOccur[curEle] = i\n    print(dp[n])\n","test":"\nif __name__ == '__main__':\n    arr = [1, 2, 1, 2, 2]\n    N = len(arr)\n    countPossiblities(arr, N)\n","output":"3\n","fn_call":"countPossiblities"}
{"text":"maximum sum possible from given matrix by performing given operations | function to prthe maximum sum ; dp table ; base case ; traverse each column ; update answer for both rows ; print the maximum sum ; ","context":"","code":"def maxSum(arr, n, m):\n    dp = [[0 for i in range(m + 1)]for i in range(2)]\n    dp[0][m - 1] = arr[0][m - 1]\n    dp[1][m - 1] = arr[1][m - 1]\n    for j in range(m - 2, -1, -1):\n        for i in range(2):\n            if (i == 1):\n                dp[i][j] = max(arr[i][j] + dp[0][j + 1],\n                               arr[i][j] + dp[0][j + 2])\n            else:\n                dp[i][j] = max(arr[i][j] + dp[1][j + 1],\n                               arr[i][j] + dp[1][j + 2])\n    print(max(dp[0][0], dp[1][0]))\n","test":"\nif __name__ == '__main__':\n    arr = [[1, 50, 21, 5], [2, 10, 10, 5]]\n    N = len(arr[0])\n    maxSum(arr, 2, N)\n","output":"67\n","fn_call":"maxSum"}
{"text":"maximum sum possible from given matrix by performing given operations | function to print the maximum sum possible by selecting at most one element from each column such that no consecutive pairs are selected from a single row ; initialize variables ; traverse each column ; print answer ; ","context":"","code":"def maxSum(arr, n):\n    r1 = r2 = 0\n    for i in range(n):\n        r1, r2 = max(r1, r2 + arr[0][i]), max(r2, r1 + arr[1][i])\n    print(max(r1, r2))\n","test":"\narr = [[1, 50, 21, 5], [2, 10, 10, 5]]\nn = len(arr[0])\nmaxSum(arr, n)\n","output":"67\n","fn_call":"maxSum"}
{"text":"count unimodal and non | python3 program for the above approach ; function to calculate the factorials up to a number ; calculate the factorial ; function to find power ( a , b ) ; iterate until b exists ; if b is divisible by 2 ; decrease the value of b ; return the answer ; function that counts the unimodal and non - unimodal permutations of a given integer n ; function call for finding factorials up to n ; function to count unimodal permutations ; non - unimodal permutation is n ! - unimodal permutations ; ","context":"\nmod = 1e9 + 7\nmx = 1000000\nfact = [0] * (mx + 1)\n\n","code":"def Calculate_factorial():\n    fact[0] = 1\n    for i in range(1, mx + 1):\n        fact[i] = i * fact[i - 1]\n        fact[i] %= mod\n\n\ndef UniModal_per(a, b):\n    res = 1\n    while (b != 0):\n        if (b % 2 != 0):\n            res = res * a\n        res %= mod\n        a = a * a\n        a %= mod\n        b \/\/= 2\n    return res\n\n\ndef countPermutations(n):\n    Calculate_factorial()\n    uni_modal = UniModal_per(2, n - 1)\n    nonuni_modal = fact[n] - uni_modal\n    print(int(uni_modal), \"\", int(nonuni_modal))\n    return\n","test":"\nN = 4\ncountPermutations(N)\n","output":"8  16\n","fn_call":"countPermutations"}
{"text":"largest square in a binary matrix with at most k 1 s for multiple queries | python3 implementation to find the largest square in the matrix such that it contains at most k 1 's  ; function to calculate the largest square with atmost k 1 s for q queries ; loop to solve for each query ; traversing the each sub square and counting total ; breaks when exceeds the maximum count ; ","context":"\nMAX = 100\n\n","code":"def largestSquare(matrix, R, C, q_i, q_j, K, Q):\n    for q in range(Q):\n        i = q_i[q]\n        j = q_j[q]\n        min_dist = min(min(i, j), min(R - i - 1, C - j - 1))\n        ans = -1\n        for k in range(min_dist + 1):\n            count = 0\n            for row in range(i - k, i + k + 1):\n                for col in range(j - k, j + k + 1):\n                    count += matrix[row][col]\n            if count > K:\n                break\n            ans = 2 * k + 1\n        print(ans)\n","test":"\nmatrix = [[1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0]]\nK = 9\nQ = 1\nq_i = [1]\nq_j = [2]\nlargestSquare(matrix, 4, 5, q_i, q_j, K, Q)\n","output":"3\n","fn_call":"largestSquare"}
{"text":"largest square in a binary matrix with at most k 1 s for multiple queries | function to find the largest square in the matrix such that it contains atmost k 1 's  ; precomputing the countdp prefix sum of the matrix ; loop to solve queries ; calculating the maximum possible distance of the centre from edge ; calculating the number of 1 s in the submatrix ; ","context":"","code":"def largestSquare(matrix, R, C, q_i, q_j, K, Q):\n    countDP = [[0 for x in range(C)]for x in range(R)]\n    countDP[0][0] = matrix[0][0]\n    for i in range(1, R):\n        countDP[i][0] = (countDP[i - 1][0] + matrix[i][0])\n    for j in range(1, C):\n        countDP[0][j] = (countDP[0][j - 1] + matrix[0][j])\n    for i in range(1, R):\n        for j in range(1, C):\n            countDP[i][j] = (matrix[i][j] + countDP[i - 1]\n                             [j] + countDP[i][j - 1] - countDP[i - 1][j - 1])\n    for q in range(0, Q):\n        i = q_i[q]\n        j = q_j[q]\n        min_dist = min(i, j, R - i - 1, C - j - 1)\n        ans = -1\n        for k in range(0, min_dist + 1):\n            x1 = i - k\n            x2 = i + k\n            y1 = j - k\n            y2 = j + k\n            count = countDP[x2][y2]\n            if (x1 > 0):\n                count -= countDP[x1 - 1][y2]\n            if (y1 > 0):\n                count -= countDP[x2][y1 - 1]\n            if (x1 > 0 and y1 > 0):\n                count += countDP[x1 - 1][y1 - 1]\n            if (count > K):\n                break\n            ans = 2 * k + 1\n        print(ans)\n","test":"\nmatrix = [[1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0]]\nK = 9\nQ = 1\nq_i = [1]\nq_j = [2]\nlargestSquare(matrix, 4, 5, q_i, q_j, K, Q)\n","output":"3\n","fn_call":"largestSquare"}
{"text":"n consecutive ropes problem | function to return the minimum cost to connect the given ropes ; dp [ i ] [ j ] = minimum cost in range ( i , j ) sum [ i ] [ j ] = sum of range ( i , j ) ; initializing the sum table memset ( sum , 0 , sizeof ( 0 ) ) ; ; computing minimum cost for all the possible interval ( i , j ) left range ; right range ; no cost for a single rope ; ","context":"","code":"def MinCost(arr, n):\n    dp = [[0 for i in range(n + 5)]for i in range(n + 5)]\n    sum = [[0 for i in range(n + 5)]for i in range(n + 5)]\n    for i in range(n):\n        k = arr[i]\n        for j in range(i, n):\n            if (i == j):\n                sum[i][j] = k\n            else:\n                k += arr[j]\n                sum[i][j] = k\n    for i in range(n - 1, -1, -1):\n        for j in range(i, n):\n            dp[i][j] = 10 ** 9\n            if (i == j):\n                dp[i][j] = 0\n            else:\n                for k in range(i, j):\n                    dp[i][j] = min(dp[i][j],\n                                   dp[i][k] + dp[k + 1][j] + sum[i][j])\n    return dp[0][n - 1]\n","test":"\narr = [7, 6, 8, 6, 1, 1]\nn = len(arr)\nprint(MinCost(arr, n))\n","output":"68\n","fn_call":"MinCost"}
{"text":"length of the longest subsegment which is updown after inserting atmost one integer | function to recursively fill the dp array ; if f ( i , state ) is already calculated then return the value ; calculate f ( i , state ) according to the recurrence relation and store in dp [ ] [ ] ; function that calls the resucrsive function to fill the dp array and then returns the result ; dp [ ] [ ] array for storing result of f ( i , 1 ) and f ( 1 , 2 ) populating the array dp [ ] with - 1 ; make sure that longest ud and du sequence starting at each index is calculated ; assume the answer to be - 1 this value will only increase ; y is the length of the longest ud sequence starting at i ; if length is even then add an integer and then a du sequence starting at i + y ; if length is odd then add an integer and then a ud sequence starting at i + y ; ","context":"","code":"def f(i, state, A, dp, N):\n    if i >= N:\n        return 0\n    elif dp[i][state] != -1:\n        return dp[i][state]\n    else:\n        if i == N - 1:\n            dp[i][state] = 1\n        elif state == 1 and A[i] > A[i + 1]:\n            dp[i][state] = 1\n        elif state == 2 and A[i] < A[i + 1]:\n            dp[i][state] = 1\n        elif state == 1 and A[i] <= A[i + 1]:\n            dp[i][state] = 1 + f(i + 1, 2, A, dp, N)\n        elif state == 2 and A[i] >= A[i + 1]:\n            dp[i][state] = 1 + f(i + 1, 1, A, dp, N)\n        return dp[i][state]\n\n\ndef maxLenSeq(A, N):\n    dp = [[-1, -1, -1]for i in range(1000)]\n    for i in range(N):\n        tmp = f(i, 1, A, dp, N)\n        tmp = f(i, 2, A, dp, N)\n    ans = -1\n    for i in range(N):\n        y = dp[i][1]\n        if (i + y) >= N:\n            ans = max(ans, dp[i][1] + 1)\n        elif y % 2 == 0:\n            ans = max(ans, dp[i][1] + 1 + dp[i + y][2])\n        elif y % 2 == 1:\n            ans = max(ans, dp[i][1] + 1 + dp[i + y][1])\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    A = [1, 10, 3, 20, 25, 24]\n    n = len(A)\n    print(maxLenSeq(A, n))\n","output":"7\n","fn_call":"maxLenSeq"}
{"text":"remove an element to maximize the gcd of the given array | python3 implementation of the above approach ; function to return the maximized gcd after removing a single element from the given array ; prefix and suffix arrays ; single state dynamic programming relation for storing gcd of first i elements from the left in prefix [ i ] ; initializing suffix array ; single state dynamic programming relation for storing gcd of all the elements having greater than or equal to i in suffix [ i ] ; if first or last element of the array has to be removed ; if any other element is replaced ; return the maximized gcd ; ","context":"\nimport math as mt\n\n","code":"def MaxGCD(a, n):\n    Prefix = [0 for i in range(n + 2)]\n    Suffix = [0 for i in range(n + 2)]\n    Prefix[1] = a[0]\n    for i in range(2, n + 1):\n        Prefix[i] = mt .gcd(Prefix[i - 1], a[i - 1])\n    Suffix[n] = a[n - 1]\n    for i in range(n - 1, 0, -1):\n        Suffix[i] = mt .gcd(Suffix[i + 1], a[i - 1])\n    ans = max(Suffix[2], Prefix[n - 1])\n    for i in range(2, n):\n        ans = max(ans, mt .gcd(Prefix[i - 1], Suffix[i + 1]))\n    return ans\n","test":"\na = [14, 17, 28, 70]\nn = len(a)\nprint(MaxGCD(a, n))\n","output":"14\n","fn_call":"MaxGCD"}
{"text":"maximum subarray sum by flipping signs of at most k array elements | python3 implementation of the approach ; function to find the maximum subarray sum with flips starting from index i ; if the number of flips have exceeded ; complete traversal ; if the state has previously been visited ; initially ; use kadane 's algorithm and  call two states ; memoize the answer and return it ; utility function to call flips from index and return the answer ; create dp array int dp [ n , k + 1 ] ; iterate and call recursive function from every index to get the maximum subarray sum ; corner casae ; ","context":"\nimport numpy as np\nright = 3\nleft = 6\ndp = np .ones((left, right))\ndp = -1 * dp\n\n","code":"def findSubarraySum(ind, flips, n, a, k):\n    if (flips > k):\n        return -1e9\n    if (ind == n):\n        return 0\n    if (dp[ind][flips] != -1):\n        return dp[ind][flips]\n    ans = 0\n    ans = max(0, a[ind] + findSubarraySum(ind + 1, flips, n, a, k))\n    ans = max(ans, -a[ind] + findSubarraySum(ind + 1, flips + 1, n, a, k))\n    dp[ind][flips] = ans\n    return dp[ind][flips]\n\n\ndef findMaxSubarraySum(a, n, k):\n    ans = -1e9\n    for i in range(n):\n        ans = max(ans, findSubarraySum(i, 0, n, a, k))\n    if ans == 0 and k == 0:\n        return max(a)\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    a = [-1, -2, -100, -10]\n    n = len(a)\n    k = 1\n    print(findMaxSubarraySum(a, n, k))\n","output":"100.0\n","fn_call":"findMaxSubarraySum"}
{"text":"find the sum of first n odd fibonacci numbers | python3 program to find the sum of first n odd fibonacci numbers ; function to calculate sum of first n odd fibonacci numbers ; base values ; ","context":"\nmod = 1000000007\n\n","code":"def sumOddFibonacci(n):\n    Sum = [0] * (n + 1)\n    Sum[0] = 0\n    Sum[1] = 1\n    Sum[2] = 2\n    Sum[3] = 5\n    Sum[4] = 10\n    Sum[5] = 23\n    for i in range(6, n + 1):\n        Sum[i] = ((Sum[i - 1] + (4 * Sum[i - 2]) % mod - (4 * Sum[i - 3]) %\n                  mod + mod) % mod + (Sum[i - 4] - Sum[i - 5] + mod) % mod) % mod\n    return Sum[n]\n","test":"\nn = 6\nprint(sumOddFibonacci(n))\n","output":"44\n","fn_call":"sumOddFibonacci"}
{"text":"minimize the total number of teddies to be distributed | python implementation of the above approach ; initializing one tablet for each student ; if left adjacent is having higher marks review and change all the dp values assigned before until assigned dp values are found wrong according to ","context":"","code":"def fun(marks, n):\n    dp = [1 for i in range(0, n)]\n    for i in range(0, n - 1):\n        if marks[i] > marks[i + 1]:\n            temp = i\n            while True:\n                if marks[temp] > marks[temp + 1] and temp >= 0:\n                    if dp[temp] > dp[temp + 1]:\n                        temp -= 1\n                        continue\n                    else:\n                        dp[temp] = dp[temp + 1] + 1\n                        temp -= 1\n                else:\n                    break\n        elif marks[i] < marks[i + 1]:\n            dp[i + 1] = dp[i] + 1\n    return (sum(dp))\n","test":"\nn = 6\nmarks = [1, 4, 5, 2, 2, 1]\nprint(fun(marks, n))\n","output":"10\n","fn_call":"fun"}
{"text":"number of ways to reach nth floor by taking at | python3 program to reach n - th stair by taking a maximum of k leap ; elements of combo [ ] stores the no of possible ways to reach it by all combinations of k leaps or less ; assuming leap 0 exist and assigning its value to 1 for calculation ; loop to iterate over all possible leaps upto k ; ; in this loop we count all possible leaps to reach the jth stair with the help of ith leap or less ; if the leap is not more than the i - j ; calculate the value and store in combo [ j ] to reuse it for next leap calculation for the jth stair ; returns the no of possible number of leaps to reach the top of building of n stairs ; ","context":"","code":"def solve(N, K):\n    combo = [0] * (N + 1)\n    combo[0] = 1\n    for i in range(1, K + 1):\n        for j in range(0, N + 1):\n            if j >= i:\n                combo[j] += combo[j - i]\n    return combo[N]\n","test":"\nif __name__ == \"__main__\":\n    N, K = 29, 5\n    print(solve(N, K))\n","output":"603\n","fn_call":"solve"}
{"text":"find the longest increasing subsequence in circular manner | utility method to find lis using dynamic programming ; initialize lis values for all indexes ; compute optimized lis values in bottom up manner ; set j on the basis of current window i . e . first element of the current window ; pick maximum of all lis values ; function to find longest increasing subsequence in circular manner ; make a copy of given array by appending same array elements to itself ; perform lis for each window of size n ; ","context":"","code":"def computeLIS(circBuff, start, end, n):\n    LIS = [0 for i in range(end)]\n    for i in range(start, end):\n        LIS[i] = 1\n    for i in range(start + 1, end):\n        for j in range(start, i):\n            if (circBuff[i] > circBuff[j] and LIS[i] < LIS[j] + 1):\n                LIS[i] = LIS[j] + 1\n    res = -100000\n    for i in range(start, end):\n        res = max(res, LIS[i])\n    return res\n\n\ndef LICS(arr, n):\n    circBuff = [0 for i in range(2 * n)]\n    for i in range(n):\n        circBuff[i] = arr[i]\n    for i in range(n, 2 * n):\n        circBuff[i] = arr[i - n]\n    res = -100000\n    for i in range(n):\n        res = max(computeLIS(circBuff, i, i + n, n), res)\n    return res\n","test":"\narr = [1, 4, 6, 2, 3]\nn = len(arr)\nprint(\"Length of LICS is\", LICS(arr, n))\n","output":"Length of LICS is 4\n","fn_call":"LICS"}
{"text":"counts paths from a point to reach origin | function to find binomial coefficient ; constructing pascal 's triangle ; ","context":"","code":"def binomialCoeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        j = min(i, k)\n        while (j > 0):\n            C[j] = C[j] + C[j - 1]\n            j -= 1\n    return C[k]\n","test":"\nn = 3\nm = 2\nprint(\"Number of Paths:\", binomialCoeff(n + m, n))\n","output":"Number of Paths: 10\n","fn_call":"binomialCoeff"}
{"text":"longest common increasing subsequence ( lcs + lis ) | returns the length and the lcis of two arrays arr1 [ 0. . n - 1 ] and arr2 [ 0. . m - 1 ] ; table [ j ] is going to store length of lcis ending with arr2 [ j ] . we initialize it as 0 , ; traverse all elements of arr1 [ ] ; initialize current length of lcis ; for each element of arr1 [ ] , traverse all elements of arr2 [ ] . ; if both the array have same elements . note that we don 't break the loop here. ; now seek for previous smaller common element for current element of arr1 ; the maximum value in table [ ] is out result ; ","context":"","code":"def LCIS(arr1, n, arr2, m):\n    table = [0] * m\n    for j in range(m):\n        table[j] = 0\n    for i in range(n):\n        current = 0\n        for j in range(m):\n            if (arr1[i] == arr2[j]):\n                if (current + 1 > table[j]):\n                    table[j] = current + 1\n            if (arr1[i] > arr2[j]):\n                if (table[j] > current):\n                    current = table[j]\n    result = 0\n    for i in range(m):\n        if (table[i] > result):\n            result = table[i]\n    return result\n","test":"\nif __name__ == \"__main__\":\n    arr1 = [3, 4, 9, 1]\n    arr2 = [5, 3, 8, 9, 10, 2, 1]\n    n = len(arr1)\n    m = len(arr2)\n    print(\"Length of LCIS is\", LCIS(arr1, n, arr2, m))\n","output":"Length of LCIS is 2\n","fn_call":"LCIS"}
{"text":"length of longest common prefix possible by rearranging strings in a given array | python3 program to implement the above approach ; function to get the length of the longest common prefix by rearranging the strings ; freq [ i ] [ j ] : stores the frequency of a character ( = j ) in a arr [ i ] ; traverse the given array ; stores length of current string ; traverse current string of the given array ; update the value of freq [ i ] [ arr [ i ] [ j ] ] ; stores the length of longest common prefix ; count the minimum frequency of each character in in all the strings of arr [ ] ; stores minimum value in each row of freq [ ] [ ] ; calculate minimum frequency of current character in all the strings . ; update minrowval ; update maxlen ; ","context":"\nimport sys\n\n","code":"def longComPre(arr, N):\n    freq = [[0 for i in range(256)]for i in range(N)]\n    for i in range(N):\n        M = len(arr[i])\n        for j in range(M):\n            freq[i][ord(arr[i][j])] += 1\n    maxLen = 0\n    for j in range(256):\n        minRowVal = sys .maxsize\n        for i in range(N):\n            minRowVal = min(minRowVal, freq[i][j])\n        maxLen += minRowVal\n    return maxLen\n","test":"\nif __name__ == '__main__':\n    arr = [\"aabdc\", \"abcd\", \"aacd\"]\n    N = 3\n    print(longComPre(arr, N))\n","output":"3\n","fn_call":"longComPre"}
{"text":"remove characters from a string that appears exactly k times | python 3 program to remove characters from a string that appears exactly k times ; function to reduce the string by removing the characters which appears exactly k times ; hash table initialised to 0 ; increment the frequency of the character ; to store answer ; next index in reduced string ; append the characters which appears exactly k times ; ","context":"\nMAX_CHAR = 26\n\n","code":"def removeChars(arr, k):\n    hash = [0] * MAX_CHAR\n    n = len(arr)\n    for i in range(n):\n        hash[ord(arr[i]) - ord('a')] += 1\n    ans = \"\"\n    index = 0\n    for i in range(n):\n        if (hash[ord(arr[i]) - ord('a')] != k):\n            ans += arr[i]\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    str = \"geeksforgeeks\"\n    k = 2\n    print(removeChars(str, k))\n","output":"eeforee\n","fn_call":"removeChars"}
{"text":"contiguous subsegments of a string having distinct subsequent characters | function that prints the segments ; new array for every iteration ; check if the character is in the array ; ","context":"","code":"def sub_segments(string, n):\n    l = len(string)\n    for x in range(0, l, n):\n        newlist = string[x:x + n]\n        arr = []\n        for y in newlist:\n            if y not in arr:\n                arr .append(y)\n        print(''.join(arr))\n","test":"\nstring = \"geeksforgeeksgfg\"\nn = 4\nsub_segments(string, n)\n","output":"gek\nsfor\ngek\nsgf\n","fn_call":"sub_segments"}
{"text":"program to find the encrypted word | function to find the encrypted string ; to store the encrypted string ; after ' z ' , it should go to a . ; ","context":"","code":"def findWord(c, n):\n    co = 0\n    s = [0] * n\n    for i in range(n):\n        if (i < n \/ 2):\n            co += 1\n        else:\n            co = n - i\n        if (ord(c[i]) + co <= 122):\n            s[i] = chr(ord(c[i]) + co)\n        else:\n            s[i] = chr(ord(c[i]) + co - 26)\n    print(*s, sep=\"\")\n","test":"\ns = \"abcd\"\nfindWord(s, len(s))\n","output":"bdee\n","fn_call":"findWord"}
{"text":"check if two strings are same ignoring their cases | function to compare two strings ignoring their cases ; length of first string ; length of second string ; if length is not same simply return false since both string can not be same if length is not equal ; loop to match one by one all characters of both string ; if current characters of both string are same , increase value of i to compare next character ; if any character of first string is some special character or numeric character and not same as corresponding character of second string then return false ; do the same for second string ; this block of code will be executed if characters of both strings are of different cases ; compare characters by ascii value ; if characters matched , increase the value of i to compare next char ; if all characters of the first string are matched with corresponding characters of the second string , then return true ; function to print the same or not same if strings are equal or not equal ; ","context":"","code":"def equalIgnoreCase(str1, str2):\n    i = 0\n    len1 = len(str1)\n    len2 = len(str2)\n    if (len1 != len2):\n        return False\n    while (i < len1):\n        if (str1[i] == str2[i]):\n            i += 1\n        elif (((str1[i] >= 'a' and str1[i] <= 'z') or (str1[i] >= 'A' and str1[i] <= 'Z')) == False):\n            return False\n        elif (((str2[i] >= 'a' and str2[i] <= 'z') or (str2[i] >= 'A' and str2[i] <= 'Z')) == False):\n            return False\n        else:\n            if (str1[i] >= 'a' and str1[i] <= 'z'):\n                if (ord(str1[i]) - 32 != ord(str2[i])):\n                    return False\n            elif (str1[i] >= 'A' and str1[i] <= 'Z'):\n                if (ord(str1[i]) + 32 != ord(str2[i])):\n                    return False\n            i += 1\n    return True\n\n\ndef equalIgnoreCaseUtil(str1, str2):\n    res = equalIgnoreCase(str1, str2)\n    if (res):\n        print(\"Same\")\n    else:\n        print(\"Not Same\")\n","test":"\nif __name__ == '__main__':\n    str1 = \"Geeks\"\n    str2 = \"geeks\"\n    equalIgnoreCaseUtil(str1, str2)\n    str1 = \"Geek\"\n    str2 = \"geeksforgeeks\"\n    equalIgnoreCaseUtil(str1, str2)\n","output":"Same\nNot Same\n","fn_call":"equalIgnoreCaseUtil"}
{"text":"maximize the value of a by replacing some of its digits with digits of b | function to return the maximized value of a ; sort digits in ascending order ; j points to largest digit in b ; if all the digits of b have been used ; current digit has been used ; return the maximized value ; ","context":"","code":"def maxValue(a, b):\n    b = sorted(b)\n    bi = [i for i in b]\n    ai = [i for i in a]\n    n = len(a)\n    m = len(b)\n    j = m - 1\n    for i in range(n):\n        if (j < 0):\n            break\n        if (bi[j] > ai[i]):\n            ai[i] = bi[j]\n            j -= 1\n    x = \"\".join(ai)\n    return x\n","test":"\na = \"1234\"\nb = \"4321\"\nprint(maxValue(a, b))\n","output":"4334\n","fn_call":"maxValue"}
{"text":"count numbers in range such that digits in it and it 's product with q are unequal | function to check if all of the digits in a number and it 's product with q are unequal or not ; convert first number into string ; insert elements from 1 st number to hash ; calculate corresponding product ; convert the product to string ; using the hash check if any digit of product matches with the digits of input number ; if yes , return false ; return true ; function to count numbers in the range [ l , r ] such that all of the digits of the number and it 's product with q are unequal ; check for every number between l and r ; ","context":"","code":"def checkIfUnequal(n, q):\n    s1 = str(n)\n    a = [0 for i in range(26)]\n    for i in range(0, len(s1), 1):\n        a[ord(s1[i]) - ord('0')] += 1\n    prod = n * q\n    s2 = str(prod)\n    for i in range(0, len(s2), 1):\n        if (a[ord(s2[i]) - ord('0')]):\n            return False\n    return True\n\n\ndef countInRange(l, r, q):\n    count = 0\n    for i in range(l, r + 1, 1):\n        if (checkIfUnequal(i, q)):\n            count += 1\n    return count\n","test":"\nif __name__ == '__main__':\n    l = 10\n    r = 12\n    q = 2\n    print(countInRange(l, r, q))\n","output":"1\n","fn_call":"countInRange"}
{"text":"check if it is possible to rearrange a binary string with alternate 0 s and 1 s | function to check the binary string ; length of string ; count zero 's ; count one 's ; if length is even ; if length is odd ; ","context":"","code":"def is_possible(s):\n    l = len(s)\n    one = 0\n    zero = 0\n    for i in range(0, l):\n        if (s[i] == '0'):\n            zero += 1\n        else:\n            one += 1\n    if (l % 2 == 0):\n        return (one == zero)\n    else:\n        return (abs(one - zero) == 1)\n","test":"\nif __name__ == \"__main__\":\n    s = \"100110\"\n    if (is_possible(s)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"is_possible"}
{"text":"Frequency Measuring Techniques for Competitive Programming | Python3 program to count frequencies of array items ; Create an array to store counts . The size of array is limit + 1 and all values are initially 0 ; Traverse through string characters and count frequencies ;","context":"\nlimit = 255\n\n","code":"def countFreq(Str):\n    count = [0] * (limit + 1)\n    for i in range(len(Str)):\n        count[ord(Str[i])] += 1\n    for i in range(limit + 1):\n        if (count[i] > 0):\n            print(chr(i), count[i])\n","test":"\nStr = \"GeeksforGeeks\"\ncountFreq(Str)\n","output":"G 2\ne 4\nf 1\nk 2\no 1\nr 1\ns 2\n","fn_call":"countFreq"}
{"text":"count of even and odd set bit with array element after xor with k | function to store even and odd variable ; store the count of even and odd set bit ; count the set bit using in built function ; count of set - bit of k ; if y is odd then , count of even and odd set bit will be interchanged ; else it will remain same as the original array ; ","context":"","code":"def countEvenOdd(arr, n, K):\n    even = 0\n    odd = 0\n    for i in range(n):\n        x = bin(arr[i]).count('1')\n        if (x % 2 == 0):\n            even += 1\n        else:\n            odd += 1\n    y = bin(K).count('1')\n    if (y & 1):\n        print(\"Even =\", odd, \", Odd =\", even)\n    else:\n        print(\"Even =\", even, \", Odd =\", odd)\n","test":"\nif __name__ == \"__main__\":\n    arr = [4, 2, 15, 9, 8, 8]\n    K = 3\n    n = len(arr)\n    countEvenOdd(arr, n, K)\n","output":"Even = 2 , Odd = 4\n","fn_call":"countEvenOdd"}
{"text":"google case of a given sentence | python program to convert given sentence to camel case . ; function to remove spaces and convert into camel case ; check for spaces in the sentence ; conversion into upper case ; if not space , copy character ; return string to main ; ","context":"\nimport math\n\n","code":"def convert(s):\n    n = len(s)\n    s1 = \"\"\n    s1 = s1 + s[0].lower()\n    i = 1\n    while i < n:\n        if (s[i] == ' ' and i <= n):\n            s1 = s1 + \" \" + (s[i + 1]).lower()\n            i = i + 1\n        else:\n            s1 = s1 + (s[i]).upper()\n        i = i + 1\n    return s1\n","test":"\nstr = \"I get intern at geeksforgeeks\"\nprint(convert(str))\n","output":"i gET iNTERN aT gEEKSFORGEEKS\n","fn_call":"convert"}
{"text":"program to find the n | python3 program to find n - th number containing only 3 and 5. ; if n is odd , append 3 and move to parent ; if n is even , append 5 and move to parent ; reverse res and return . ; ","context":"","code":"def reverse(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse(s[1:]) + s[0]\n\n\ndef findNthNo(n):\n    res = \"\"\n    while (n >= 1):\n        if (n & 1):\n            res = res + \"3\"\n            n = (int)((n - 1) \/ 2)\n        else:\n            res = res + \"5\"\n            n = (int)((n - 2) \/ 2)\n    return reverse(res)\n","test":"\nn = 5\nprint(findNthNo(n))\n","output":"53\n","fn_call":"findNthNo"}
{"text":"nth non | python3 program to find n - th non - square number . ; function to find the nth non - square number ; conversion from int to long double is necessary in order to preserve decimal places after square root . ; calculating the result ; ","context":"\nimport math\n\n","code":"def findNthNonSquare(n):\n    x = n\n    ans = x + math .floor(0.5 + math .sqrt(x))\n    return int(ans)\n","test":"\nn = 16\nprint(\"The\", n, \"th Non-Square number is\", findNthNonSquare(n))\n","output":"The 16 th Non-Square number is 20\n","fn_call":"findNthNonSquare"}
{"text":"sum of series with alternate signed squares of ap | function to calculate series sum ; ","context":"","code":"def seiresSum(n, a):\n    return (n * (a[0] * a[0] - a[2 * n - 1] * a[2 * n - 1]) \/ (2 * n - 1))\n","test":"\nn = 2\na = [1, 2, 3, 4]\nprint(int(seiresSum(n, a)))\n","output":"-10\n","fn_call":"seiresSum"}
{"text":"find nth number that contains the digit k or divisible by k . | function for checking if digit k is in n or not ; finding remainder ; if digit found ; function for finding nth number ; since k is the first which satisfy th criteria , so consider it in count making count = 1 and starting from i = k + 1 ; checking that the number contain k digit or divisible by k ; ","context":"","code":"def checkdigit(n, k):\n    while (n):\n        rem = n % 10\n        if (rem == k):\n            return 1\n        n = n \/ 10\n    return 0\n\n\ndef findNthNumber(n, k):\n    i = k + 1\n    count = 1\n    while (count < n):\n        if (checkdigit(i, k) or (i % k == 0)):\n            count += 1\n        if (count == n):\n            return i\n        i += 1\n    return -1\n","test":"\nn = 10\nk = 2\nprint(findNthNumber(n, k))\n","output":"20\n","fn_call":"findNthNumber"}
{"text":"count of subarrays of size k which is a permutation of numbers from 1 to k | python3 program to implement the above approach ; save index of numbers of the array ; update min and max index with the current index and check if it 's a  valid permutation ; ","context":"","code":"def find_permutations(arr):\n    cnt = 0\n    max_ind = -1\n    min_ind = 10000000\n    n = len(arr)\n    index_of = {}\n    for i in range(n):\n        index_of[arr[i]] = i + 1\n    for i in range(1, n + 1):\n        max_ind = max(max_ind, index_of[i])\n        min_ind = min(min_ind, index_of[i])\n        if (max_ind - min_ind + 1 == i):\n            cnt += 1\n    return cnt\n","test":"\nif __name__ == \"__main__\":\n    nums = []\n    nums .append(2)\n    nums .append(3)\n    nums .append(1)\n    nums .append(5)\n    nums .append(4)\n    print(find_permutations(nums))\n","output":"3\n","fn_call":"find_permutations"}
{"text":"count of integers that divide all the elements of the given array | function to return the count of the required integers ; to store the gcd of the array elements ; to store the count of factors of the found gcd ; if g is a perfect square ; factors appear in pairs ; ","context":"\nfrom math import gcd as __gcd\n\n","code":"def getCount(a, n):\n    gcd = 0\n    for i in range(n):\n        gcd = __gcd(gcd, a[i])\n    cnt = 0\n    for i in range(1, gcd + 1):\n        if i * i > gcd:\n            break\n        if (gcd % i == 0):\n            if (i * i == gcd):\n                cnt += 1\n            else:\n                cnt += 2\n    return cnt\n","test":"\na = [4, 16, 1024, 48]\nn = len(a)\nprint(getCount(a, n))\n","output":"3\n","fn_call":"getCount"}
{"text":"minimize cost of removals required to make all remaining characters of the string unique | function to find the minimum cost of removing characters to make the string unique ; stores the visited characters ; stores the answer ; traverse the string ; if already visited ; stores the maximum cost of removing a particular character ; store the total deletion cost of a particular character ; mark the current character visited ; traverse the indices of the string [ i , n - 1 ] ; if any duplicate is found ; update the maximum cost and total cost ; mark the current character visited ; keep the character with maximum cost and delete the rest ; return the minimum cost ; ","context":"","code":"def delCost(s, cost):\n    visited = [False] * len(s)\n    ans = 0\n    for i in range(len(s)):\n        if visited[i]:\n            continue\n        maxDel = 0\n        totCost = 0\n        visited[i] = True\n        for j in range(i, len(s)):\n            if s[i] == s[j]:\n                maxDel = max(maxDel, cost[j])\n                totCost += cost[j]\n                visited[j] = True\n        ans += totCost - maxDel\n    return ans\n","test":"\nstring = \"AAABBB\"\ncost = [1, 2, 3, 4, 5, 6]\nstring = \"AAABBB\"\nprint(delCost(string, cost))\n","output":"12\n","fn_call":"delCost"}
{"text":"make all array elements equal by replacing triplets with their bitwise xor | function to find triplets such that replacing them with their xor make all array elements equal ; if n is even ; calculate xor of array elements ; traverse the array ; update xor ; if xor is not equal to 0 ; selecting the triplets such that elements of the pairs ( arr [ 0 ] , arr [ 1 ] ) , ( arr [ 2 ] , arr [ 3 ] ) . . . can be made equal ; selecting the triplets such that all array elements can be made equal to arr [ n - 1 ] ; selecting the triplets such that elements of the pairs ( arr [ 0 ] , arr [ 1 ] ) , ( arr [ 2 ] , arr [ 3 ] ) . . . can be made equal ; selecting the triplets such that all array elements can be made equal to arr [ n - 1 ] ; ","context":"","code":"def checkXOR(arr, N):\n    if (N % 2 == 0):\n        xro = 0\n        for i in range(N):\n            xro ^= arr[i]\n        if (xro != 0):\n            print(-1)\n            return\n        for i in range(0, N - 3, 2):\n            print(i, \" \", (i + 1), \" \", (i + 2), end=\" \")\n        for i in range(0, N - 3, 2):\n            print(i, \" \", (i + 1), \" \", (N - 1), end=\" \")\n    else:\n        for i in range(0, N - 2, 2):\n            print(i, \" \", (i + 1), \" \", (i + 2))\n        for i in range(0, N - 2, 2):\n            print(i, \" \", (i + 1), \" \", (N - 1))\n","test":"\nif __name__ == '__main__':\n    arr = [4, 2, 1, 7, 2]\n    N = len(arr)\n    checkXOR(arr, N)\n","output":"0   1   2\n2   3   4\n0   1   4\n2   3   4\n","fn_call":"checkXOR"}
{"text":"make all array elements even by replacing adjacent pair of array elements with their sum | function to find minimum count of operations required to make all array elements even ; stores minimum count of replacements to make all array elements even ; stores the count of odd continuous numbers ; traverse the array ; if arr [ i ] is an odd number ; update odd_cont_seg ; if odd_cont_seg is even ; update res ; update res ; reset odd_cont_seg = 0 ; if odd_cont_seg exceeds 0 ; if odd_cont_seg is even ; update res ; update res ; prthe result ; ","context":"","code":"def make_array_element_even(arr, N):\n    res = 0\n    odd_cont_seg = 0\n    for i in range(0, N):\n        if (arr[i] % 2 == 1):\n            odd_cont_seg += 1\n        else:\n            if (odd_cont_seg > 0):\n                if (odd_cont_seg % 2 == 0):\n                    res += odd_cont_seg \/\/ 2\n                else:\n                    res += (odd_cont_seg \/\/ 2) + 2\n                odd_cont_seg = 0\n    if (odd_cont_seg > 0):\n        if (odd_cont_seg % 2 == 0):\n            res += odd_cont_seg \/\/ 2\n        else:\n            res += odd_cont_seg \/\/ 2 + 2\n    return res\n","test":"\narr = [2, 4, 5, 11, 6]\nN = len(arr)\nprint(make_array_element_even(arr, N))\n","output":"1\n","fn_call":"make_array_element_even"}
{"text":"find a number k such that exactly k array elements are greater than or equal to k | function to find k for which there are exactly k array elements greater than or equal to k ; finding the largest array element ; possible values of k ; traverse the array ; if current array element is greater than or equal to i ; if i array elements are greater than or equal to i ; otherwise ; ","context":"","code":"def zvalue(nums):\n    m = max(nums)\n    cnt = 0\n    for i in range(0, m + 1, 1):\n        cnt = 0\n        for j in range(0, len(nums), 1):\n            if (nums[j] >= i):\n                cnt += 1\n        if (cnt == i):\n            return i\n    return -1\n","test":"\nif __name__ == '__main__':\n    nums = [7, 8, 9, 0, 0, 1]\n    print(zvalue(nums))\n","output":"3\n","fn_call":"zvalue"}
{"text":"count of permutations of an array having each element as a multiple or a factor of its index | function to find the count of desired permutations ; base case ; if i has not been inserted ; backtrack ; insert i ; recur to find valid permutations ; remove i ; return the final count ; ","context":"","code":"def findPermutation(arr, N):\n    pos = len(arr) + 1\n    if (pos > N):\n        return 1\n    res = 0\n    for i in range(1, N + 1):\n        if (i not in arr):\n            if (i % pos == 0 or pos % i == 0):\n                arr .add(i)\n                res += findPermutation(arr, N)\n                arr .remove(i)\n    return res\n","test":"\nN = 5\narr = set()\nprint(findPermutation(arr, N))\n","output":"10\n","fn_call":"findPermutation"}
{"text":"check if sum y can be obtained from the array by the given operations | function to check if it is possible to obtain sum y from a sequence of sum x from the array arr [ ] ; store the difference ; iterate over the array ; if diff reduced to 0 ; ","context":"","code":"def solve(arr, n, X, Y):\n    diff = Y - X\n    for i in range(n):\n        if (arr[i] != 1):\n            diff = diff % (arr[i] - 1)\n    if (diff == 0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\narr = [1, 2, 7, 9, 10]\nn = len(arr)\nX, Y = 11, 13\nsolve(arr, n, X, Y)\n","output":"Yes\n","fn_call":"solve"}
{"text":"middle of three using minimum comparisons | python3 program to find middle of three distinct numbers ; function to find the middle of three number ; checking for b ; checking for a ; ","context":"","code":"def middleOfThree(a, b, c):\n    def middleOfThree(a, b, c):\n        if ((a < b and b < c) or (c < b and b < a)):\n            return b\n        if ((b < a and a < c) or (c < a and a < b)):\n            return a\n        else:\n            return c\n","test":"\na = 20\nb = 30\nc = 40\nprint(middleOfThree(a, b, c))\n","output":"None\n","fn_call":"middleOfThree"}
{"text":"check if a given string can be converted to another by given possible swaps | python3 program to implement the above approach ; stores length of str1 ; stores length of str2 ; stores distinct characters of str1 ; stores distinct characters of str2 ; stores frequency of each character of str1 ; traverse the string str1 ; update frequency of str1 [ i ] ; traverse the string str1 ; insert str1 [ i ] into st1 ; traverse the string str2 ; insert str1 [ i ] into st1 ; if distinct characters in str1 and str2 are not same ; stores frequency of each character of str2 ; traverse the string str2 ; update frequency of str2 [ i ] ; sort hash1 [ ] array ; sort hash2 [ ] array ; traverse hash1 [ ] and hash2 [ ] ; if hash1 [ i ] not equal to hash2 [ i ] ; ","context":"","code":"def checkStr1CanConStr2(str1, str2):\n    N = len(str1)\n    M = len(str2)\n    st1 = set([])\n    st2 = set([])\n    hash1 = [0] * 256\n    for i in range(N):\n        hash1[ord(str1[i])] += 1\n    for i in range(N):\n        st1 .add(str1[i])\n    for i in range(M):\n        st2 .add(str2[i])\n    if (st1 != st2):\n        return False\n    hash2 = [0] * 256\n    for i in range(M):\n        hash2[ord(str2[i])] += 1\n    hash1 .sort()\n    hash2 .sort()\n    for i in range(256):\n        if (hash1[i] != hash2[i]):\n            return False\n    return True\n","test":"\nif __name__ == \"__main__\":\n    str1 = \"xyyzzlll\"\n    str2 = \"yllzzxxx\"\n    if (checkStr1CanConStr2(str1, str2)):\n        print(\"True\")\n    else:\n        print(\"False\")\n","output":"True\n","fn_call":"checkStr1CanConStr2"}
{"text":"sort the array in a given index range | function to sort the elements of the array from index a to index b ; variables to store start and end of the index range ; print the modified array ; ","context":"","code":"def partSort(arr, N, a, b):\n    l = min(a, b)\n    r = max(a, b)\n    arr = (arr[0:l] + sorted(arr[l:r + 1]) + arr[r:N])\n    for i in range(0, N, 1):\n        print(arr[i], end=\" \")\n","test":"\nif __name__ == '__main__':\n    arr = [7, 8, 4, 5, 2]\n    a = 1\n    b = 4\n    N = len(arr)\n    partSort(arr, N, a, b)\n","output":"7 2 4 5 8 ","fn_call":"partSort"}
{"text":"find the minimum cost to reach destination using a train | a dynamic programming based solution to find min cost to reach station n - 1 from station 0. ; this function returns the smallest possible cost to reach station n - 1 from station 0. ; dist [ i ] stores minimum cost to reach station i from station 0. ; go through every station and check if using it as an intermediate station gives better path ; ","context":"\nINF = 2147483647\nN = 4\n\n","code":"def minCost(cost):\n    dist = [0 for i in range(N)]\n    for i in range(N):\n        dist[i] = INF\n    dist[0] = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (dist[j] > dist[i] + cost[i][j]):\n                dist[j] = dist[i] + cost[i][j]\n    return dist[N - 1]\n","test":"\ncost = [[0, 15, 80, 90], [INF, 0, 40, 50],\n        [INF, INF, 0, 70], [INF, INF, INF, 0]]\nprint(\"The Minimum cost to reach station \", N, \" is \", minCost(cost))\n","output":"The Minimum cost to reach station  4  is  65\n","fn_call":"minCost"}
{"text":"number of loops of size k starting from a specific node | return the number of ways from a node to make a loop of size k in undirected complete connected graph of n nodes ; ","context":"","code":"def numOfways(n, k):\n    p = 1\n    if (k % 2):\n        p = -1\n    return (pow(n - 1, k) + p * (n - 1)) \/ n\n","test":"\nn = 4\nk = 2\nprint(numOfways(n, k))\n","output":"3.0\n","fn_call":"numOfways"}
{"text":"make largest palindrome by changing at most k | returns maximum possible palindrome using k changes ; initialize l and r by leftmost and rightmost ends ; first try to make palindrome ; replace left and right character by maximum of both ; if k is negative then we can 't make  palindrome ; at mid character , if k > 0 then change it to 9 ; if character at lth ( same as rth ) is less than 9 ; if none of them is changed in the previous loop then subtract 2 from k and convert both to 9 ; if one of them is changed in the previous loop then subtract 1 from k ( 1 more is subtracted already ) and make them 9 ; ","context":"","code":"def maximumPalinUsingKChanges(strr, k):\n    palin = strr[::]\n    l = 0\n    r = len(strr) - 1\n    while (l <= r):\n        if (strr[l] != strr[r]):\n            palin[l] = palin[r] = max(strr[l], strr[r])\n            k -= 1\n        l += 1\n        r -= 1\n    if (k < 0):\n        return \"Not possible\"\n    l = 0\n    r = len(strr) - 1\n    while (l <= r):\n        if (l == r):\n            if (k > 0):\n                palin[l] = '9'\n        if (palin[l] < '9'):\n            if (k >= 2 and palin[l] == strr[l] and palin[r] == strr[r]):\n                k -= 2\n                palin[l] = palin[r] = '9'\n            elif (k >= 1 and (palin[l] != strr[l] or palin[r] != strr[r])):\n                k -= 1\n                palin[l] = palin[r] = '9'\n        l += 1\n        r -= 1\n    return palin\n","test":"\nst = \"43435\"\nstrr = [i for i in st]\nk = 3\na = maximumPalinUsingKChanges(strr, k)\nprint(\"\".join(a))\n","output":"93939\n","fn_call":"maximumPalinUsingKChanges"}
{"text":"count triples with bitwise and equal to zero | function to find the number of triplets whose bitwise and is 0. ; stores the count of triplets having bitwise and equal to 0 ; stores frequencies of all possible a [ i ] & a [ j ] ; traverse the array ; update frequency of bitwise and of all array elements with a ; traverse the array ; iterate the map ; if bitwise and of triplet is zero , increment cnt ; return the number of triplets whose bitwise and is 0. ; ","context":"","code":"def countTriplets(A):\n    cnt = 0\n    tuples = {}\n    for a in A:\n        for b in A:\n            if (a & b) in tuples:\n                tuples[a & b] += 1\n            else:\n                tuples[a & b] = 1\n    for a in A:\n        for t in tuples:\n            if ((t & a) == 0):\n                cnt += tuples[t]\n    return cnt\n","test":"\nif __name__ == \"__main__\":\n    A = [2, 1, 3]\n    print(countTriplets(A))\n","output":"12\n","fn_call":"countTriplets"}
{"text":"minimize the count of adjacent pairs with different parity | python3 implementation of above approach ; recursive function to calculate minimum adjacent pairs with different parity ; if all the numbers are placed ; if replacement is not required ; if replacement is required ; backtracking ; backtracking ; function to display the minimum number of adjacent elements with different parity ; store no of even numbers not present in the array ; store no of odd numbers not present in the array ; erase exisiting numbers ; store non - exisiting even and odd numbers ; ","context":"\nmn = 1000\n\n","code":"def parity(even, odd, v, i):\n    global mn\n    if (i == len(v) or len(even) == 0 or len(odd) == 0):\n        count = 0\n        for j in range(len(v) - 1):\n            if (v[j] % 2 != v[j + 1] % 2):\n                count += 1\n        if (count < mn):\n            mn = count\n        return\n    if (v[i] != -1):\n        parity(even, odd, v, i + 1)\n    else:\n        if (len(even) != 0):\n            x = even[len(even) - 1]\n            even .remove(even[len(even) - 1])\n            v[i] = x\n            parity(even, odd, v, i + 1)\n            even .append(x)\n        if (len(odd) != 0):\n            x = odd[len(odd) - 1]\n            odd .remove(odd[len(odd) - 1])\n            v[i] = x\n            parity(even, odd, v, i + 1)\n            odd .append(x)\n\n\ndef mnDiffParity(v, n):\n    global mn\n    even = []\n    odd = []\n    m = {i: 0 for i in range(100)}\n    for i in range(1, n + 1):\n        m[i] = 1\n    for i in range(len(v)):\n        if (v[i] != -1):\n            m .pop(v[i])\n    for key in m .keys():\n        if (key % 2 == 0):\n            even .append(key)\n        else:\n            odd .append(key)\n    parity(even, odd, v, 0)\n    print(mn + 4)\n","test":"\nif __name__ == '__main__':\n    n = 8\n    v = [2, 1, 4, -1, -1, 6, -1, 8]\n    mnDiffParity(v, n)\n","output":"6\n","fn_call":"mnDiffParity"}
{"text":"find triplet such that number of nodes connecting these triplets is maximum | python3 implementation of the approach ; to store the required nodes ; parent array to retrace the nodes ; visited array to prevent dfs in direction on diameter path ; dfs function to find the startnode ; dfs function to find the endnode of diameter and maintain the parent array ; dfs function to find the end node of the longest branch to diameter ; function to find the required nodes ; to find start node of diameter ; to find end node of diameter ; x is the end node of diameter ; mark all the nodes on diameter using back tracking ; find the end node of longest branch to diameter ; ","context":"\nMAX = 100005\nadjacent = [[]for i in range(MAX)]\nvisited = [False] * MAX\nstartnode = endnode = thirdnode = None\nmaxi, N = -1, None\nparent = [None] * MAX\nvis = [False] * MAX\n\n","code":"def dfs(u, count):\n    visited[u] = True\n    temp = 0\n    global startnode, maxi\n    for i in range(0, len(adjacent[u])):\n        if not visited[adjacent[u][i]]:\n            temp += 1\n            dfs(adjacent[u][i], count + 1)\n    if temp == 0:\n        if maxi < count:\n            maxi = count\n            startnode = u\n\n\ndef dfs1(u, count):\n    visited[u] = True\n    temp = 0\n    global endnode, maxi\n    for i in range(0, len(adjacent[u])):\n        if not visited[adjacent[u][i]]:\n            temp += 1\n            parent[adjacent[u][i]] = u\n            dfs1(adjacent[u][i], count + 1)\n    if temp == 0:\n        if maxi < count:\n            maxi = count\n            endnode = u\n\n\ndef dfs2(u, count):\n    visited[u] = True\n    temp = 0\n    global thirdnode, maxi\n    for i in range(0, len(adjacent[u])):\n        if (not visited[adjacent[u][i]] and not vis[adjacent[u][i]]):\n            temp += 1\n            dfs2(adjacent[u][i], count + 1)\n    if temp == 0:\n        if maxi < count:\n            maxi = count\n            thirdnode = u\n\n\ndef findNodes():\n    dfs(1, 0)\n    global maxi\n    for i in range(0, N + 1):\n        visited[i] = False\n    maxi = -1\n    dfs1(startnode, 0)\n    for i in range(0, N + 1):\n        visited[i] = False\n    x = endnode\n    vis[startnode] = True\n    while x != startnode:\n        vis[x] = True\n        x = parent[x]\n    maxi = -1\n    for i in range(1, N + 1):\n        if vis[i]:\n            dfs2(i, 0)\n","test":"\nif __name__ == \"__main__\":\n    N = 4\n    adjacent[1].append(2)\n    adjacent[2].append(1)\n    adjacent[1].append(3)\n    adjacent[3].append(1)\n    adjacent[1].append(4)\n    adjacent[4].append(1)\n    findNodes()\n    print(\"({}, {}, {})\".format(startnode, endnode, thirdnode))\n","output":"(2, 3, 4)\n","fn_call":"findNodes"}
{"text":"percentage increase in volume of the sphere if radius is increased by a given percentage | python3 program to find percentage increase in the volume of the sphere if radius is increased by a given percentage ; ","context":"","code":"def newvol(x):\n    print(\"percentage increase in the\", pow(x, 3) \/\n          10000 + 3 * x + (3 * pow(x, 2)) \/ 100, \"%\")\n","test":"\nx = 10.0\nnewvol(x)\n","output":"percentage increase in the 33.1 %\n","fn_call":"newvol"}
{"text":"length of the chord of the circle whose radius and the angle subtended at the center by the chord is given | python3 program to find the length chord of the circle whose radius and the angle subtended at the centre is also given ; function to find the length of the chord ; ","context":"\nimport math as mt\n\n","code":"def length_of_chord(r, x):\n    print(\"The length of the chord\",\n          \" of the circle is \",\n          2 * r * mt .sin(x * (3.14 \/ 180)))\n","test":"\nr = 4\nx = 63\nlength_of_chord(r, x)\n","output":"The length of the chord  of the circle is  7.12602654729573\n","fn_call":"length_of_chord"}
{"text":"area of a square inscribed in a circle which is inscribed in an equilateral triangle | python3 program to find the area of the square inscribed within the circle which in turn is inscribed in an equilateral triangle ; function to find the area of the square ; a cannot be negative ; area of the square ; ","context":"\nfrom math import *\n\n","code":"def area(a):\n    if a < 0:\n        return -1\n    area = sqrt(a) \/ 6\n    return area\n","test":"\nif __name__ == \"__main__\":\n    a = 10\n    print(round(area(a), 6))\n","output":"0.527046\n","fn_call":"area"}
{"text":"length of longest rod that can fit into a cuboid | python 3 program to find the longest rod that can fit in a cuboid ; function to find the length ; temporary variable to hold the intermediate result ; length of longest rod is calculated using square root function ; ","context":"\nfrom math import *\n\n","code":"def longestRodInCuboid(length, breadth, height):\n    temp = length * length + breadth * breadth + height * height\n    result = sqrt(temp)\n    return result\n","test":"\nif __name__ == \"__main__\":\n    length, breadth, height = 12, 9, 8\n    print(longestRodInCuboid(length, breadth, height))\n","output":"17.0\n","fn_call":"longestRodInCuboid"}
{"text":"check whether a given point lies on or inside the rectangle | set 3 | function to check whether a given point lies inside or on the rectangle or not ; ","context":"","code":"def LiesInsieRectangle(a, b, x, y):\n    if (x - y - b <= 0 and x - y + b >= 0 and x +\n            y - 2 * a + b <= 0 and x + y - b >= 0):\n        return True\n    return False\n","test":"\nif __name__ == \"__main__\":\n    a, b, x, y = 7, 2, 4, 5\n    if LiesInsieRectangle(a, b, x, y):\n        print(\"Given point lies inside\" \" the rectangle\")\n    else:\n        print(\"Given point does not lie\" \" on the rectangle\")\n","output":"Given point lies inside the rectangle\n","fn_call":"LiesInsieRectangle"}
{"text":"maximize volume of cuboid with given sum of sides | return the maximum volume . ; for length ; for breadth ; for height ; calculating maximum volume . ; ","context":"","code":"def maxvolume(s):\n    maxvalue = 0\n    i = 1\n    for i in range(s - 1):\n        j = 1\n        for j in range(s):\n            k = s - i - j\n            maxvalue = max(maxvalue, i * j * k)\n    return maxvalue\n","test":"\ns = 8\nprint(maxvolume(s))\n","output":"18\n","fn_call":"maxvolume"}
{"text":"maximize volume of cuboid with given sum of sides | return the maximum volume . ; finding length ; finding breadth ; finding height ; ","context":"","code":"def maxvolume(s):\n    length = int(s \/ 3)\n    s -= length\n    breadth = s \/ 2\n    height = s - breadth\n    return int(length * breadth * height)\n","test":"\ns = 8\nprint(maxvolume(s))\n","output":"18\n","fn_call":"maxvolume"}
{"text":"area of a hexagon | python3 program to find area of a hexagon ; function for calculating area of the hexagon . ; ","context":"\nimport math\n\n","code":"def hexagonArea(s):\n    return ((3 * math .sqrt(3) * (s * s)) \/ 2)\n","test":"\nif __name__ == \"__main__\":\n    s = 4\n    print(\"Area:\", \"{0:.4f}\".format(hexagonArea(s)))\n","output":"Area: 41.5692\n","fn_call":"hexagonArea"}
{"text":"maximum number of squares that can fit in a right angle isosceles triangle | function for finding max squares ; return in o ( 1 ) with derived formula ; ","context":"","code":"def maxSquare(b, m):\n    return (b \/ m - 1) * (b \/ m) \/ 2\n","test":"\nb = 10\nm = 2\nprint(int(maxSquare(b, m)))\n","output":"10\n","fn_call":"maxSquare"}
{"text":"check if right triangle possible from given area and hypotenuse | python program to check existence of right triangle . ; prints three sides of a right triangle from given area and hypotenuse if triangle is possible , else prints - 1. ; descriminant of the equation ; applying the linear equation formula to find both the roots ; ","context":"\nfrom math import sqrt\n\n","code":"def findRightAngle(A, H):\n    D = pow(H, 4) - 16 * A * A\n    if D >= 0:\n        root1 = (H * H + sqrt(D)) \/ 2\n        root2 = (H * H - sqrt(D)) \/ 2\n        a = sqrt(root1)\n        b = sqrt(root2)\n        if b >= a:\n            print(a, b, H)\n        else:\n            print(b, a, H)\n    else:\n        print(\"-1\")\n","test":"\nfindRightAngle(6, 5)\n","output":"3.0 4.0 5\n","fn_call":"findRightAngle"}
{"text":"maximum number of 2 x2 squares that can be fit inside a right isosceles triangle | python3 program to count number of 2 x 2 squares in a right isosceles triangle ; removing the extra part we would always need ; since each square has base of length of 2 ; ","context":"","code":"def numberOfSquares(base):\n    base = (base - 2)\n    base = base \/\/ 2\n    return base * (base + 1) \/ 2\n","test":"\nbase = 8\nprint(numberOfSquares(base))\n","output":"6.0\n","fn_call":"numberOfSquares"}
{"text":"bitwise or of bitwise and of all possible non | function to find the bitwise or of bitwise and of all possible subarrays after performing the every query ; traversing each pair of the query ; stores the bitwise or ; updating the array ; find the bitwise or of new updated array ; print the ans ; ","context":"","code":"def performQuery(arr, Q):\n    for i in range(0, len(Q)):\n        orr = 0\n        x = Q[i][0]\n        arr[x - 1] = Q[i][1]\n        for j in range(0, len(arr)):\n            orr = orr | arr[j]\n        print(orr, end=\" \")\n","test":"\narr = [1, 2, 3]\nQ = [[1, 4], [3, 0]]\nperformQuery(arr, Q)\n","output":"7 6 ","fn_call":"performQuery"}
{"text":"smallest length of number divisible by k formed by using d only | function to form the smallest number possible ; array to mark the remainders counted already ; iterate over the range ; if that remainder is already found , return - 1 ; ","context":"","code":"def smallest(k, d):\n    cnt = 1\n    m = d % k\n    v = [0 for i in range(k)]\n    v[m] = 1\n    while (1):\n        if (m == 0):\n            return cnt\n        m = (((m * (10 % k)) % k) + (d % k)) % k\n        if (v[m] == 1):\n            return -1\n        v[m] = 1\n        cnt += 1\n    return -1\n","test":"\nd = 1\nk = 41\nprint(smallest(k, d))\n","output":"5\n","fn_call":"smallest"}
{"text":"fibonacci cube graph | function to find fibonacci number ; function for finding number of vertices in fibonacci cube graph ; return fibonacci number for f ( n + 2 ) ; ","context":"","code":"def fib(n):\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef findVertices(n):\n    return fib(n + 2)\n","test":"\nif __name__ == \"__main__\":\n    n = 3\n    print(findVertices(n))\n","output":"5\n","fn_call":"findVertices"}
{"text":"modify array such that the array does not contain any common divisors other than 1 | python3 program for the above approach ; function to check if it is possible to modify the array such that there is no common factor between array elements except 1 ; stores gcd of the array ; calculate gcd of the array ; if the current divisor is smaller than x ; divide gcd by the current divisor ; if possible ; print the modified array ; otherwise ; ","context":"\nimport math\n\n","code":"def checkCommonDivisor(arr, N, X):\n    G = 0\n    for i in range(N):\n        G = math .gcd(G, arr[i])\n    copy_G = G\n    for divisor in range(2, X + 1):\n        while (G % divisor == 0):\n            G = G \/\/ divisor\n    if (G <= X):\n        print(\"Yes\")\n        for i in range(N):\n            print(arr[i] \/\/ copy_G, end=\" \")\n        print()\n    else:\n        print(\"No\")\n","test":"\nif __name__ == \"__main__\":\n    arr = [6, 15, 6]\n    X = 6\n    N = len(arr)\n    checkCommonDivisor(arr, N, X)\n","output":"Yes\n2 5 2 \n","fn_call":"checkCommonDivisor"}
{"text":"k 'th largest element in bst using constant extra space | helper function to create a new node ; count variable to keep count of visited nodes ; if right child is none ; first increment count and check if count = k ; otherwise move to the left child ; find inorder successor of current node ; set left child of successor to the current node ; move current to its right ; restoring the tree back to original binary search tree removing threaded links ; move current to its left child ; ","context":"\nclass newNode:\n    def __init__(self, data):\n        self .data = data\n        self .right = self .left = None\n\n","code":"def KthLargestUsingMorrisTraversal(root, k):\n    curr = root\n    Klargest = None\n    count = 0\n    while (curr is not None):\n        if (curr .right is None):\n            count += 1\n            if (count == k):\n                Klargest = curr\n            curr = curr .left\n        else:\n            succ = curr .right\n            while (succ .left is not None and succ .left != curr):\n                succ = succ .left\n            if (succ .left is None):\n                succ .left = curr\n                curr = curr .right\n            else:\n                succ .left = None\n                count += 1\n                if (count == k):\n                    Klargest = curr\n                curr = curr .left\n    return Klargest\n","test":"\nif __name__ == '__main__':\n    root = newNode(4)\n    root .left = newNode(2)\n    root .right = newNode(7)\n    root .left .left = newNode(1)\n    root .left .right = newNode(3)\n    root .right .left = newNode(6)\n    root .right .right = newNode(10)\n    print(\"Finding K-th largest Node in BST : \",\n          KthLargestUsingMorrisTraversal(root, 2).data)\n","output":"Finding K-th largest Node in BST :  7\n","fn_call":"KthLargestUsingMorrisTraversal"}
{"text":"magic square | even order | function for calculating magic square ; 2 - d matrix with all entries as 0 ; change value of array elements at fix location as per the rule ( n * n + 1 ) - arr [ i ] [ [ j ] corners of order ( n \/ 4 ) * ( n \/ 4 ) top left corner ; top right corner ; bottom left corner ; bottom right corner ; centre of matrix , order ( n \/ 2 ) * ( n \/ 2 ) ; printing the square ; ","context":"","code":"def DoublyEven(n):\n    arr = [[(n*y)+x+1 for x in range(n)]for y in range(n)]\n    for i in range(0, n\/\/4):\n        for j in range(0, n\/\/4):\n            arr[i][j] = (n*n + 1) - arr[i][j]\n    for i in range(0, n\/\/4):\n        for j in range(3 * (n\/\/4), n):\n            arr[i][j] = (n*n + 1) - arr[i][j]\n    for i in range(3 * (n\/\/4), n):\n        for j in range(0, n\/\/4):\n            arr[i][j] = (n*n + 1) - arr[i][j]\n    for i in range(3 * (n\/\/4), n):\n        for j in range(3 * (n\/\/4), n):\n            arr[i][j] = (n*n + 1) - arr[i][j]\n    for i in range(n\/\/4, 3 * (n\/\/4)):\n        for j in range(n\/\/4, 3 * (n\/\/4)):\n            arr[i][j] = (n*n + 1) - arr[i][j]\n    for i in range(n):\n        for j in range(n):\n            print('%2d ' % (arr[i][j]), end=\" \")\n        print()\n","test":"\nn = 8\nDoublyEven(n)\n","output":"64  63   3   4   5   6  58  57  \n56  55  11  12  13  14  50  49  \n17  18  46  45  44  43  23  24  \n25  26  38  37  36  35  31  32  \n33  34  30  29  28  27  39  40  \n41  42  22  21  20  19  47  48  \n16  15  51  52  53  54  10   9  \n 8   7  59  60  61  62   2   1  \n","fn_call":"DoublyEven"}
{"text":"kronecker product of two matrices | rowa and cola are no of rows and columns of matrix a rowb and colb are no of rows and columns of matrix b ; function to computes the kronecker product of two matrices ; i loops till rowa ; k loops till rowb ; j loops till cola ; l loops till colb ; each element of matrix a is multiplied by whole matrix b resp and stored as matrix c ; ","context":"\ncola = 2\nrowa = 3\ncolb = 3\nrowb = 2\n\n","code":"def Kroneckerproduct(A, B):\n    C = [[0 for j in range(cola * colb)]for i in range(rowa * rowb)]\n    for i in range(0, rowa):\n        for k in range(0, rowb):\n            for j in range(0, cola):\n                for l in range(0, colb):\n                    C[i + l + 1][j + k + 1] = A[i][j] * B[k][l]\n                    print(C[i + l + 1][j + k + 1], end=' ')\n            print(\"\")\n","test":"\nA = [[0 for j in range(2)]for i in range(3)]\nB = [[0 for j in range(3)]for i in range(2)]\nA[0][0] = 1\nA[0][1] = 2\nA[1][0] = 3\nA[1][1] = 4\nA[2][0] = 1\nA[2][1] = 0\nB[0][0] = 0\nB[0][1] = 5\nB[0][2] = 2\nB[1][0] = 6\nB[1][1] = 7\nB[1][2] = 3\nKroneckerproduct(A, B)\n","output":"0 5 2 0 10 4 \n6 7 3 12 14 6 \n0 15 6 0 20 8 \n18 21 9 24 28 12 \n0 5 2 0 0 0 \n6 7 3 0 0 0 \n","fn_call":"Kroneckerproduct"}
{"text":"program to check if matrix is lower triangular | function to check matrix is in lower triangular ; ","context":"","code":"def islowertriangular(M):\n    for i in range(0, len(M)):\n        for j in range(i + 1, len(M)):\n            if (M[i][j] != 0):\n                return False\n    return True\n","test":"\nM = [[1, 0, 0, 0], [1, 4, 0, 0], [4, 6, 2, 0], [0, 4, 7, 6]]\nif islowertriangular(M):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"islowertriangular"}
{"text":"program to check if matrix is upper triangular | function to check matrix is in upper triangular ; ","context":"","code":"def isuppertriangular(M):\n    for i in range(1, len(M)):\n        for j in range(0, i):\n            if (M[i][j] != 0):\n                return False\n    return True\n","test":"\nM = [[1, 3, 5, 3], [0, 4, 6, 2], [0, 0, 2, 5], [0, 0, 0, 6]]\nif isuppertriangular(M):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isuppertriangular"}
{"text":"counting sets of 1 s and 0 s in a binary matrix | no of columns ; no of rows ; function to calculate the number of non empty sets of cell ; stores the final answer ; traverses row - wise ; traverses column wise ; at the end subtract n * m as no of single sets have been added twice . ; ","context":"\nm = 3\nn = 2\n\n","code":"def countSets(a):\n    res = 0\n    for i in range(n):\n        u = 0\n        v = 0\n        for j in range(m):\n            if a[i][j]:\n                u += 1\n            else:\n                v += 1\n        res += pow(2, u) - 1 + pow(2, v) - 1\n    for i in range(m):\n        u = 0\n        v = 0\n        for j in range(n):\n            if a[j][i]:\n                u += 1\n            else:\n                v += 1\n        res += pow(2, u) - 1 + pow(2, v) - 1\n    return res - (n * m)\n","test":"\na = [[1, 0, 1], [0, 1, 0]]\nprint(countSets(a))\n","output":"8\n","fn_call":"countSets"}
{"text":"program to check if a matrix is symmetric | fills transpose of mat [ n ] [ n ] in tr [ n ] [ n ] ; returns true if mat [ n ] [ n ] is symmetric , else false ; ","context":"","code":"def transpose(mat, tr, N):\n    for i in range(N):\n        for j in range(N):\n            tr[i][j] = mat[j][i]\n\n\ndef isSymmetric(mat, N):\n    tr = [[0 for j in range(len(mat[0]))]for i in range(len(mat))]\n    transpose(mat, tr, N)\n    for i in range(N):\n        for j in range(N):\n            if (mat[i][j] != tr[i][j]):\n                return False\n    return True\n","test":"\nmat = [[1, 3, 5], [3, 2, 4], [5, 4, 1]]\nif (isSymmetric(mat, 3)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isSymmetric"}
{"text":"program to check if a matrix is symmetric | returns true if mat [ n ] [ n ] is symmetric , else false ; ","context":"","code":"def isSymmetric(mat, N):\n    for i in range(N):\n        for j in range(N):\n            if (mat[i][j] != mat[j][i]):\n                return False\n    return True\n","test":"\nmat = [[1, 3, 5], [3, 2, 4], [5, 4, 1]]\nif (isSymmetric(mat, 3)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isSymmetric"}
{"text":"count negative numbers in a column | python implementation of naive method to count of negative numbers in m [ n ] [ m ] ; follow the path shown using arrows above ; no more negative numbers in this row ; ","context":"","code":"def countNegative(M, n, m):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if M[i][j] < 0:\n                count += 1\n            else:\n                break\n    return count\n","test":"\nM = [[-3, -2, -1, 1], [-2, 2, 3, 4], [4, 5, 7, 8]]\nprint(countNegative(M, 3, 4))\n","output":"4\n","fn_call":"countNegative"}
{"text":"count negative numbers in a column | function to count negative number ; initialize result ; start with top right corner ; follow the path shown using arrows above ; j is the index of the last negative number in this row . so there must be ( j + 1 ) ; negative numbers in this row . ; move to the left and see if we can find a negative number there ; ","context":"","code":"def countNegative(M, n, m):\n    count = 0\n    i = 0\n    j = m - 1\n    while j >= 0 and i < n:\n        if M[i][j] < 0:\n            count += (j + 1)\n            i += 1\n        else:\n            j -= 1\n    return count\n","test":"\nM = [[-3, -2, -1, 1], [-2, 2, 3, 4], [4, 5, 7, 8]]\nprint(countNegative(M, 3, 4))\n","output":"4\n","fn_call":"countNegative"}
{"text":"count negative numbers in a column | recursive binary search to get last negative value in a row between a start and an end ; base case ; get the mid for binary search ; if current element is negative ; if it is the rightmost negative element in the current row ; check in the right half of the array ; check in the left half of the array ; function to return the count of negative numbers in the given matrix ; initialize result ; to store the index of the rightmost negative element in the row under consideration ; iterate over all rows of the matrix ; if the first element of the current row is positive then there will be no negatives in the matrix below or after it ; run binary search only until the index of last negative integer in the above row ; ","context":"","code":"def getLastNegativeIndex(array, start, end, n):\n    if (start == end):\n        return start\n    mid = start + (end - start) \/\/ 2\n    if (array[mid] < 0):\n        if (mid + 1 < n and array[mid + 1] >= 0):\n            return mid\n        return getLastNegativeIndex(array, mid + 1, end, n)\n    else:\n        return getLastNegativeIndex(array, start, mid - 1, n)\n\n\ndef countNegative(M, n, m):\n    count = 0\n    nextEnd = m - 1\n    for i in range(n):\n        if (M[i][0] >= 0):\n            break\n        nextEnd = getLastNegativeIndex(M[i], 0, nextEnd, 4)\n        count += nextEnd + 1\n    return count\n","test":"\nM = [[-3, -2, -1, 1], [-2, 2, 3, 4], [4, 5, 7, 8]]\nr = 3\nc = 4\nprint(countNegative(M, r, c))\n","output":"4\n","fn_call":"countNegative"}
{"text":"find a specific pair in matrix | a naive method to find maximum value of mat [ d ] [ e ] - mat [ a ] [ b ] such that d > a and e > b ; the function returns maximum value a ( d , e ) - a ( a , b ) over all choices of indexes such that both d > a and e > b . ; stores maximum value ; consider all possible pairs mat [ a ] [ b ] and mat [ d ] [ e ] ; ","context":"\nN = 5\n\n","code":"def findMaxValue(mat):\n    maxValue = 0\n    for a in range(N - 1):\n        for b in range(N - 1):\n            for d in range(a + 1, N):\n                for e in range(b + 1, N):\n                    if maxValue < int(mat[d][e] - mat[a][b]):\n                        maxValue = int(mat[d][e] - mat[a][b])\n    return maxValue\n","test":"\nmat = [[1, 2, -1, -4, -20], [-8, -3, 4, 2, 1],\n       [3, 8, 6, 1, 3], [-4, -1, 1, 7, -6], [0, -4, 10, -5, 1]]\nprint(\"Maximum Value is \" + str(findMaxValue(mat)))\n","output":"Maximum Value is 18\n","fn_call":"findMaxValue"}
{"text":"find a specific pair in matrix | an efficient method to find maximum value of mat [ d ] - ma [ a ] [ b ] such that c > a and d > b ; the function returns maximum value a ( c , d ) - a ( a , b ) over all choices of indexes such that both c > a and d > b . ; stores maximum value ; maxarr [ i ] [ j ] stores max of elements in matrix from ( i , j ) to ( n - 1 , n - 1 ) ; last element of maxarr will be same 's as of the input matrix ; preprocess last row initialize max ; preprocess last column initialize max ; preprocess rest of the matrix from bottom ; update maxvalue ; set maxarr ( i , j ) ; ","context":"\nimport sys\nN = 5\n\n","code":"def findMaxValue(mat):\n    maxValue = -sys .maxsize - 1\n    maxArr = [[0 for x in range(N)]for y in range(N)]\n    maxArr[N - 1][N - 1] = mat[N - 1][N - 1]\n    maxv = mat[N - 1][N - 1]\n    for j in range(N - 2, -1, -1):\n        if (mat[N - 1][j] > maxv):\n            maxv = mat[N - 1][j]\n        maxArr[N - 1][j] = maxv\n    maxv = mat[N - 1][N - 1]\n    for i in range(N - 2, -1, -1):\n        if (mat[i][N - 1] > maxv):\n            maxv = mat[i][N - 1]\n        maxArr[i][N - 1] = maxv\n    for i in range(N - 2, -1, -1):\n        for j in range(N - 2, -1, -1):\n            if (maxArr[i + 1][j + 1] - mat[i][j] > maxValue):\n                maxValue = (maxArr[i + 1][j + 1] - mat[i][j])\n            maxArr[i][j] = max(mat[i][j], max(\n                maxArr[i][j + 1], maxArr[i + 1][j]))\n    return maxValue\n","test":"\nmat = [[1, 2, -1, -4, -20], [-8, -3, 4, 2, 1],\n       [3, 8, 6, 1, 3], [-4, -1, 1, 7, -6], [0, -4, 10, -5, 1]]\nprint(\"Maximum Value is\", findMaxValue(mat))\n","output":"Maximum Value is 18\n","fn_call":"findMaxValue"}
{"text":"print all elements in sorted order from row and column wise sorted matrix | python 3 program to print all elements in sorted order from row and column wise sorted matrix ; a utility function to youngify a young tableau . this is different from standard youngify . it assumes that the value at mat [ 0 ] [ 0 ] is infinite . ; find the values at down and right sides of mat [ i ] [ j ] ; if mat [ i ] [ j ] is the down right corner element , return ; move the smaller of two values ( downval and rightval ) to mat [ i ] [ j ] and recur for smaller value ; a utility function to extract minimum element from young tableau ; this function uses extractmin ( ) to print elements in sorted order ; ","context":"\nimport sys\nINF = sys .maxsize\nN = 4\n\n","code":"def youngify(mat, i, j):\n    downVal = mat[i + 1][j]if (i + 1 < N)else INF\n    rightVal = mat[i][j + 1]if (j + 1 < N)else INF\n    if (downVal == INF and rightVal == INF):\n        return\n    if (downVal < rightVal):\n        mat[i][j] = downVal\n        mat[i + 1][j] = INF\n        youngify(mat, i + 1, j)\n    else:\n        mat[i][j] = rightVal\n        mat[i][j + 1] = INF\n        youngify(mat, i, j + 1)\n\n\ndef extractMin(mat):\n    ret = mat[0][0]\n    mat[0][0] = INF\n    youngify(mat, 0, 0)\n    return ret\n\n\ndef printSorted(mat):\n    print(\"Elements of matrix in sorted order n\")\n    i = 0\n    while i < N * N:\n        print(extractMin(mat), end=\" \")\n        i += 1\n","test":"\nif __name__ == \"__main__\":\n    mat = [[10, 20, 30, 40], [15, 25, 35, 45],\n           [27, 29, 37, 48], [32, 33, 39, 50]]\n    printSorted(mat)\n","output":"Elements of matrix in sorted order n\n10 15 20 25 27 29 30 32 33 35 37 39 40 45 48 50 ","fn_call":"printSorted"}
{"text":"given an n x n square matrix , find sum of all sub | size k x k size of given matrix ; a simple function to find sum of all sub - squares of size k x k in a given square matrix of size n x n ; k must be smaller than or equal to n ; row number of first cell in current sub - square of size k x k ; column of first cell in current sub - square of size k x k ; calculate and print sum of current sub - square ; line separator for sub - squares starting with next row ; ","context":"\nn = 5\n\n","code":"def printSumSimple(mat, k):\n    if (k > n):\n        return\n    for i in range(n - k + 1):\n        for j in range(n - k + 1):\n            sum = 0\n            for p in range(i, k + i):\n                for q in range(j, k + j):\n                    sum += mat[p][q]\n            print(sum, end=\" \")\n        print()\n","test":"\nif __name__ == \"__main__\":\n    mat = [[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [\n        3, 3, 3, 3, 3], [4, 4, 4, 4, 4], [5, 5, 5, 5, 5]]\n    k = 3\n    printSumSimple(mat, k)\n","output":"18 18 18 \n27 27 27 \n36 36 36 \n","fn_call":"printSumSimple"}
{"text":"given an n x n square matrix , find sum of all sub | size of given matrix ; a o ( n ^ 2 ) function to find sum of all sub - squares of size k x k in a given square matrix of size n x n ; k must be smaller than or equal to n ; 1 : preprocessing to store sums of all strips of size k x 1 ; go column by column ; calculate sum of first k x 1 rectangle in this column ; calculate sum of remaining rectangles ; 2 : calculate sum of sub - squares using stripsum [ ] [ ] ; calculate and prsum of first subsquare in this row ; calculate sum of remaining squares in current row by removing the leftmost strip of previous sub - square and adding a new strip ; ","context":"\nn = 5\n\n","code":"def printSumTricky(mat, k):\n    global n\n    if k > n:\n        return\n    stripSum = [[None] * n for i in range(n)]\n    for j in range(n):\n        Sum = 0\n        for i in range(k):\n            Sum += mat[i][j]\n        stripSum[0][j] = Sum\n        for i in range(1, n - k + 1):\n            Sum += (mat[i + k - 1][j] - mat[i - 1][j])\n            stripSum[i][j] = Sum\n    for i in range(n - k + 1):\n        Sum = 0\n        for j in range(k):\n            Sum += stripSum[i][j]\n        print(Sum, end=\" \")\n        for j in range(1, n - k + 1):\n            Sum += (stripSum[i][j + k - 1] - stripSum[i][j - 1])\n            print(Sum, end=\" \")\n        print()\n","test":"\nmat = [[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [\n    3, 3, 3, 3, 3], [4, 4, 4, 4, 4], [5, 5, 5, 5, 5]]\nk = 3\nprintSumTricky(mat, k)\n","output":"18 18 18 \n27 27 27 \n36 36 36 \n","fn_call":"printSumTricky"}
{"text":"program to find transpose of a matrix | python3 program to find transpose of a matrix ; this function stores transpose of a [ ] [ ] in b [ ] [ ] ; ","context":"\nM = 3\nN = 4\n\n","code":"def transpose(A, B):\n    for i in range(N):\n        for j in range(M):\n            B[i][j] = A[j][i]\n","test":"\nA = [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]\nB = [[0 for x in range(M)]for y in range(N)]\ntranspose(A, B)\nprint(\"Result matrix is\")\nfor i in range(N):\n    for j in range(M):\n        print(B[i][j], \" \", end='')\n    print()\n","output":"Result matrix is\n1  2  3  \n1  2  3  \n1  2  3  \n1  2  3  \n","fn_call":"transpose"}
{"text":"program to find transpose of a matrix | python3 program to find transpose of a matrix ; finds transpose of a [ ] [ ] in - place ; ","context":"\nN = 4\n\n","code":"def transpose(A):\n    for i in range(N):\n        for j in range(i + 1, N):\n            A[i][j], A[j][i] = A[j][i], A[i][j]\n","test":"\nA = [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]\ntranspose(A)\nprint(\"Modified matrix is\")\nfor i in range(N):\n    for j in range(N):\n        print(A[i][j], \" \", end='')\n    print()\n","output":"Modified matrix is\n1  2  3  4  \n1  2  3  4  \n1  2  3  4  \n1  2  3  4  \n","fn_call":"transpose"}
{"text":"number of paths with exactly k coins | a naive recursive python program to count paths with exactly ' k ' coins ; recursive function to count paths with sum k from ( 0 , 0 ) to ( m , n ) ; base cases ; ( m , n ) can be reached either through ( m - 1 , n ) or through ( m , n - 1 ) ; a wrapper over pathcountrec ( ) ; ","context":"\nR = 3\nC = 3\n\n","code":"def pathCountRec(mat, m, n, k):\n    if m < 0 or n < 0:\n        return 0\n    elif m == 0 and n == 0:\n        return k == mat[m][n]\n    return (\n        pathCountRec(\n            mat,\n            m -\n            1,\n            n,\n            k -\n            mat[m][n]) +\n        pathCountRec(\n            mat,\n            m,\n            n -\n            1,\n            k -\n            mat[m][n]))\n\n\ndef pathCount(mat, k):\n    return pathCountRec(mat, R - 1, C - 1, k)\n","test":"\nk = 12\nmat = [[1, 2, 3], [4, 6, 5], [3, 2, 1]]\nprint(pathCount(mat, k))\n","output":"2\n","fn_call":"pathCount"}
{"text":"number of paths with exactly k coins | a dynamic programming based python3 program to count paths with exactly ' k ' coins ; base cases ; if this subproblem is already solved ; ( m , n ) can be reached either through ( m - 1 , n ) or through ( m , n - 1 ) ; a wrapper over pathcountdprecdp ( ) ; ","context":"\nR = 3\nC = 3\nMAX_K = 1000\n\n","code":"def pathCountDPRecDP(mat, m, n, k):\n    if m < 0 or n < 0:\n        return 0\n    elif m == 0 and n == 0:\n        return k == mat[m][n]\n    if (dp[m][n][k] != -1):\n        return dp[m][n][k]\n    dp[m][n][k] = (\n        pathCountDPRecDP(\n            mat,\n            m -\n            1,\n            n,\n            k -\n            mat[m][n]) +\n        pathCountDPRecDP(\n            mat,\n            m,\n            n -\n            1,\n            k -\n            mat[m][n]))\n    return dp[m][n][k]\n\n\ndef pathCountDP(mat, k):\n    return pathCountDPRecDP(mat, R - 1, C - 1, k)\n","test":"\nk = 12\ndp = [[[-1 for col in range(MAX_K)]for col in range(C)]for row in range(R)]\nmat = [[1, 2, 3], [4, 6, 5], [3, 2, 1]]\nprint(pathCountDP(mat, k))\n","output":"2\n","fn_call":"pathCountDP"}
{"text":"bubble sort | an optimized version of bubble sort ; traverse the array from 0 to n - i - 1. swap if the element found is greater than the next element ; if no two elements were swapped by inner loop , then break ; ","context":"","code":"def bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                swapped = True\n        if not swapped:\n            break\n","test":"\narr = [64, 34, 25, 12, 22, 11, 90]\nbubbleSort(arr)\nprint(\"Sorted array :\")\nfor i in range(len(arr)):\n    print(\"%d\" % arr[i], end=\" \")\n","output":"Sorted array :\n11 12 22 25 34 64 90 ","fn_call":"bubbleSort"}
{"text":"find k closest elements to a given value | function to find the cross over point ( the point before which elements aresmaller than or equal to x and afterwhich greater than x ) ; base cases x is greater than all ; x is smaller than all ; find the middle point ; if x is same as middle element , then return mid ; if x is greater than arr [ mid ] , then either arr [ mid + 1 ] is ceiling of x or ceiling lies in arr [ mid + 1. . . high ] ; this function prints k closest elements to x in arr [ ] . n is the number of elements in arr [ ] ; find the crossover point ; right index to search ; to keep track of count of elements already printed ; if x is present in arr [ ] , then reduce left index . assumption : all elements in arr [ ] are distinct ; compare elements on left and right of crossover point to find the k closest elements ; if there are no more elements on right side , then print left elements ; if there are no more elements on left side , then print right elements ; ","context":"","code":"def findCrossOver(arr, low, high, x):\n    if (arr[high] <= x):\n        return high\n    if (arr[low] > x):\n        return low\n    mid = (low + high) \/\/ 2\n    if (arr[mid] <= x and arr[mid + 1] > x):\n        return mid\n    if (arr[mid] < x):\n        return findCrossOver(arr, mid + 1, high, x)\n    return findCrossOver(arr, low, mid - 1, x)\n\n\ndef printKclosest(arr, x, k, n):\n    l = findCrossOver(arr, 0, n - 1, x)\n    r = l + 1\n    count = 0\n    if (arr[l] == x):\n        l -= 1\n    while (l >= 0 and r < n and count < k):\n        if (x - arr[l] < arr[r] - x):\n            print(arr[l], end=\" \")\n            l -= 1\n        else:\n            print(arr[r], end=\" \")\n            r += 1\n        count += 1\n    while (count < k and l >= 0):\n        print(arr[l], end=\" \")\n        l -= 1\n        count += 1\n    while (count < k and r < n):\n        print(arr[r], end=\" \")\n        r += 1\n        count += 1\n","test":"\nif __name__ == \"__main__\":\n    arr = [12, 16, 22, 30, 35, 39, 42, 45, 48, 50, 53, 55, 56]\n    n = len(arr)\n    x = 35\n    k = 4\n    printKclosest(arr, x, 4, n)\n","output":"39 30 42 45 ","fn_call":"printKclosest"}
{"text":"coin change | dp | returns the count of ways we can sum s [ 0. . . m - 1 ] coins to get sum n ; if n is 0 then there is 1 solution ( do not include any coin ) ; if n is less than 0 then no solution exists ; if there are no coins and n is greater than 0 , then no solution exist ; count is sum of solutions ( i ) including s [ m - 1 ] ( ii ) excluding s [ m - 1 ] ; ","context":"","code":"def count(S, m, n):\n    if (n == 0):\n        return 1\n    if (n < 0):\n        return 0\n    if (m <= 0 and n >= 1):\n        return 0\n    return count(S, m - 1, n) + count(S, m, n - S[m - 1])\n","test":"\narr = [1, 2, 3]\nm = len(arr)\nprint(count(arr, m, 4))\n","output":"4\n","fn_call":"count"}
{"text":"coin change | dp | dynamic programming python implementation of coin change problem ; table [ i ] will be storing the number of solutions for value i . we need n + 1 rows as the table is constructed in bottom up manner using the base case ( n = 0 ) initialize all table values as 0 ; base case ( if given value is 0 ) ; pick all coins one by one and update the table [ ] values after the index greater than or equal to the value of the picked coin ; ","context":"","code":"def count(S, m, n):\n    table = [0 for k in range(n + 1)]\n    table[0] = 1\n    for i in range(0, m):\n        for j in range(S[i], n + 1):\n            table[j] += table[j - S[i]]\n    return table[n]\n","test":"\narr = [1, 2, 3]\nm = len(arr)\nn = 4\nx = count(arr, m, n)\nprint(x)\n","output":"4\n","fn_call":"count"}
{"text":"matrix chain multiplication | dp | python program using memoization ; function for matrix chain multiplication ; ","context":"\nimport sys\ndp = [[-1 for i in range(100)]for j in range(100)]\n\n","code":"def matrixChainMemoised(p, i, j):\n    if (i == j):\n        return 0\n    if (dp[i][j] != -1):\n        return dp[i][j]\n    dp[i][j] = sys .maxsize\n    for k in range(i, j):\n        dp[i][j] = min(dp[i][j], matrixChainMemoised(p, i, k) +\n                       matrixChainMemoised(p, k + 1, j) + p[i - 1] * p[k] * p[j])\n    return dp[i][j]\n\n\ndef MatrixChainOrder(p, n):\n    i = 1\n    j = n - 1\n    return matrixChainMemoised(p, i, j)\n","test":"\narr = [1, 2, 3, 4]\nn = len(arr)\nprint(\"Minimum number of multiplications is\", MatrixChainOrder(arr, n))\n","output":"Minimum number of multiplications is 18\n","fn_call":"MatrixChainOrder"}
{"text":"matrix chain multiplication | dp | dynamic programming python implementation of matrix chain multiplication . see the cormen book for details of the following algorithm ; matrix ai has dimension p [ i - 1 ] x p [ i ] for i = 1. . n ; for simplicity of the program , one extra row and one extra column are allocated in m [ ] [ ] . 0 th row and 0 th column of m [ ] [ ] are not used ; cost is zero when multiplying one matrix . ; l is chain length . ; q = cost \/ scalar multiplications ; ","context":"\nimport sys\n\n","code":"def MatrixChainOrder(p, n):\n    m = [[0 for x in range(n)]for x in range(n)]\n    for i in range(1, n):\n        m[i][i] = 0\n    for L in range(2, n):\n        for i in range(1, n - L + 1):\n            j = i + L - 1\n            m[i][j] = sys .maxsize\n            for k in range(i, j):\n                q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j]\n                if q < m[i][j]:\n                    m[i][j] = q\n    return m[1][n - 1]\n","test":"\narr = [1, 2, 3, 4]\nsize = len(arr)\nprint(\"Minimum number of multiplications is \" +\n      str(MatrixChainOrder(arr, size)))\n","output":"Minimum number of multiplications is 18\n","fn_call":"MatrixChainOrder"}
{"text":"cutting a rod | dp | a naive recursive solution for rod cutting problem ; a utility function to get the maximum of two integers ; returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces ; recursively cut the rod in different pieces and compare different configurations ; ","context":"\nimport sys\n\n","code":"def max(a, b):\n    return a if (a > b)else b\n\n\ndef cutRod(price, n):\n    if (n <= 0):\n        return 0\n    max_val = -sys .maxsize - 1\n    for i in range(0, n):\n        max_val = max(max_val, price[i] + cutRod(price, n - i - 1))\n    return max_val\n","test":"\narr = [1, 5, 8, 9, 10, 17, 17, 20]\nsize = len(arr)\nprint(\"Maximum Obtainable Value is\", cutRod(arr, size))\n","output":"Maximum Obtainable Value is 22\n","fn_call":"cutRod"}
{"text":"cutting a rod | dp | a dynamic programming solution for rod cutting problem ; returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces ; build the table val [ ] in bottom up manner and return the last entry from the table ; ","context":"\nINT_MIN = -32767\n\n","code":"def cutRod(price, n):\n    val = [0 for x in range(n + 1)]\n    val[0] = 0\n    for i in range(1, n + 1):\n        max_val = INT_MIN\n        for j in range(i):\n            max_val = max(max_val, price[j] + val[i - j - 1])\n        val[i] = max_val\n    return val[n]\n","test":"\narr = [1, 5, 8, 9, 10, 17, 17, 20]\nsize = len(arr)\nprint(\"Maximum Obtainable Value is \" + str(cutRod(arr, size)))\n","output":"Maximum Obtainable Value is 22\n","fn_call":"cutRod"}
{"text":"multiply two integers without using multiplication , division and bitwise operators , and no loops | function to multiply two numbers x and y ; 0 multiplied with anything gives 0 ; add x one by one ; the case where y is negative ; ","context":"","code":"def multiply(x, y):\n    if (y == 0):\n        return 0\n    if (y > 0):\n        return (x + multiply(x, y - 1))\n    if (y < 0):\n        return -multiply(x, -y)\n","test":"\nprint(multiply(5, -11))\n","output":"-55\n","fn_call":"multiply"}
{"text":"sieve of eratosthenes | python program to print all primes smaller than or equal to n using sieve of eratosthenes ; create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . a value in prime [ i ] will finally be false if i is not a prime , else true . ; if prime [ p ] is not changed , then it is a prime ; update all multiples of p ; print all prime numbers ; ","context":"","code":"def SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while (p * p <= n):\n        if (prime[p]):\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            print(p,)\n","test":"\nif __name__ == '__main__':\n    n = 30\n    print(\"Following are the prime numbers smaller\",)\n    print(\"than or equal to\", n)\n    SieveOfEratosthenes(n)\n","output":"Following are the prime numbers smaller\nthan or equal to 30\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n","fn_call":"SieveOfEratosthenes"}
{"text":"pascal 's triangle | binomialcoeff ; a simple o ( n ^ 3 ) program for pascal ' s \u2581 triangle \u2581 function \u2581 to \u2581 print \u2581 first \u2581 n \u2581 lines \u2581 of \u2581 pascal ' s triangle ; iterate through every line and print entries in it ; every line has number of integers equal to line number ; ","context":"","code":"def binomialCoeff(n, k):\n    res = 1\n    if (k > n - k):\n        k = n - k\n    for i in range(0, k):\n        res = res * (n - i)\n        res = res \/\/ (i + 1)\n    return res\n\n\ndef printPascal(n):\n    for line in range(0, n):\n        for i in range(0, line + 1):\n            print(binomialCoeff(line, i), \" \", end=\"\")\n        print()\n","test":"\nn = 7\nprintPascal(n)\n","output":"1  \n1  1  \n1  2  1  \n1  3  3  1  \n1  4  6  4  1  \n1  5  10  10  5  1  \n1  6  15  20  15  6  1  \n","fn_call":"printPascal"}
{"text":"pascal 's triangle | a o ( n ^ 2 ) time and o ( n ^ 2 ) extra space method for pascal 's triangle ; an auxiliary array to store generated pascal triangle values ; iterate through every line and print integer ( s ) in it ; every line has number of integers equal to line number ; first and last values in every row are 1 ; other values are sum of values just above and left of above ; ","context":"","code":"def printPascal(n: int):\n    arr = [[0 for x in range(n)]for y in range(n)]\n    for line in range(0, n):\n        for i in range(0, line + 1):\n            if (i == 0 or i == line):\n                arr[line][i] = 1\n                print(arr[line][i], end=\" \")\n            else:\n                arr[line][i] = (arr[line - 1][i - 1] + arr[line - 1][i])\n                print(arr[line][i], end=\" \")\n        print(\"\",  end=\"\")\n","test":"\nn = 5\nprintPascal(n)\n","output":"1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ","fn_call":"printPascal"}
{"text":"pascal 's triangle | python3 program for pascal ' s \u2581 triangle \u2581 a \u2581 o ( n ^ 2 ) \u2581 time \u2581 and \u2581 o ( 1 ) \u2581 extra \u2581 space \u2581 method \u2581 for \u2581 pascal ' s triangle pascal function ; used to represent c ( line , i ) ; the first value in a line is always 1 ; ","context":"","code":"def printPascal(n):\n    for line in range(1, n + 1):\n        C = 1\n        for i in range(1, line + 1):\n            print(C, end=\" \")\n            C = int(C * (line - i) \/ i)\n        print(\"\")\n","test":"\nn = 5\nprintPascal(n)\n","output":"1 \n1 1 \n1 2 1 \n1 3 3 1 \n1 4 6 4 1 \n","fn_call":"printPascal"}
{"text":"add two numbers without using arithmetic operators | python3 program to add two numbers without using arithmetic operator ; iterate till there is no carry ; carry now contains common set bits of x and y ; sum of bits of x and y where at least one of the bits is not set ; carry is shifted by one so that adding it to x gives the required sum ; ","context":"","code":"def Add(x, y):\n    while (y != 0):\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x\n","test":"\nprint(Add(15, 32))\n","output":"47\n","fn_call":"Add"}
{"text":"compute modulus division by a power | this function will return n % d . d must be one of : 1 , 2 , 4 , 8 , 16 , 32 , ... ; ","context":"","code":"def getModulo(n, d):\n    return (n & (d - 1))\n","test":"\nn = 6\nd = 4\nprint(n, \"moduo\", d, \"is\", getModulo(n, d))\n","output":"6 moduo 4 is 2\n","fn_call":"getModulo"}
{"text":"Count set bits in an integer | Function to get no of set bits in binary representation of positive integer n ; Program to test function countSetBits","context":"","code":"def countSetBits(n):\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n","test":"\ni = 9\nprint(countSetBits(i))\n","output":"2\n","fn_call":"countSetBits"}
{"text":"count set bits in an integer | recursive function to count set bits ; base case ; get value from user ; ","context":"","code":"def countSetBits(n):\n    if (n == 0):\n        return 0\n    else:\n        return 1 + countSetBits(n & (n - 1))\n","test":"\nn = 9\nprint(countSetBits(n))\n","output":"2\n","fn_call":"countSetBits"}
{"text":"count set bits in an integer | python3 program to count set bits by pre - storing count set bits in nibbles . ; recursively get nibble of a given number and map them in the array ; find last nibble ; use pre - stored values to find count in last nibble plus recursively add remaining nibbles . ; ","context":"\nnum_to_bits = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4]\n\n","code":"def countSetBitsRec(num):\n    nibble = 0\n    if (0 == num):\n        return num_to_bits[0]\n    nibble = num & 0xf\n    return num_to_bits[nibble] + countSetBitsRec(num >> 4)\n","test":"\nnum = 31\nprint(countSetBitsRec(num))\n","output":"5\n","fn_call":"countSetBitsRec"}
{"text":"program to find parity | function to get parity of number n . it returns 1 if n has odd parity , and returns 0 if n has even parity ; ","context":"","code":"def getParity(n):\n    parity = 0\n    while n:\n        parity = ~parity\n        n = n & (n - 1)\n    return parity\n","test":"\nn = 7\nprint(\"Parity of no \", n, \" = \", (\"odd\"if getParity(n)else \"even\"))\n","output":"Parity of no  7  =  odd\n","fn_call":"getParity"}
{"text":"program to find whether a no is power of two | python3 program to find whether a no is power of two ; function to check log base 2 ; function to check if x is power of 2 ; ","context":"\nimport math\n\n","code":"def Log2(x):\n    if x == 0:\n        return false\n    return (math .log10(x) \/ math .log10(2))\n\n\ndef isPowerOfTwo(n):\n    return (math .ceil(Log2(n)) == math .floor(Log2(n)))\n","test":"\nif (isPowerOfTwo(31)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\nif (isPowerOfTwo(64)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"No\nYes\n","fn_call":"isPowerOfTwo"}
{"text":"program to find whether a no is power of two | function to check if x is power of 2 ; ","context":"","code":"def isPowerOfTwo(n):\n    if (n == 0):\n        return False\n    while (n != 1):\n        if (n % 2 != 0):\n            return False\n        n = n \/\/ 2\n    return True\n","test":"\nif (isPowerOfTwo(31)):\n    print('Yes')\nelse:\n    print('No')\nif (isPowerOfTwo(64)):\n    print('Yes')\nelse:\n    print('No')\n","output":"No\nYes\n","fn_call":"isPowerOfTwo"}
{"text":"program to find whether a no is power of two | function which checks whether a number is a power of 2 ; base cases '1' is the only odd number which is a power of 2 ( 2 ^ 0 ) ; all other odd numbers are not powers of 2 ; recursive function call ; ","context":"","code":"def powerof2(n):\n    if n == 1:\n        return True\n    elif n % 2 != 0 or n == 0:\n        return False\n    return powerof2(n \/ 2)\n","test":"\nif __name__ == \"__main__\":\n    print(powerof2(64))\n    print(powerof2(12))\n","output":"True\nFalse\n","fn_call":"powerof2"}
{"text":"program to find whether a no is power of two | function to check if x is power of 2 ; first x in the below expression is for the case when x is 0 ; ","context":"","code":"def isPowerOfTwo(x):\n    return (x and (not (x & (x - 1))))\n","test":"\nif (isPowerOfTwo(31)):\n    print('Yes')\nelse:\n    print('No')\nif (isPowerOfTwo(64)):\n    print('Yes')\nelse:\n    print('No')\n","output":"No\nYes\n","fn_call":"isPowerOfTwo"}
{"text":"find the maximum repeating number in o ( n ) time and o ( 1 ) extra space | returns maximum repeating element in arr [ 0. . n - 1 ] . the array elements are in range from 0 to k - 1 ; iterate though input array , for every element arr [ i ] , increment arr [ arr [ i ] % k ] by k ; find index of the maximum repeating element ; return index of the maximum element ; ","context":"","code":"def maxRepeating(arr, n, k):\n    for i in range(0, n):\n        arr[arr[i] % k] += k\n    max = arr[0]\n    result = 0\n    for i in range(1, n):\n        if arr[i] > max:\n            max = arr[i]\n            result = i\n    return result\n","test":"\narr = [2, 3, 3, 5, 3, 4, 1, 7]\nn = len(arr)\nk = 8\nprint(\"The maximum repeating number is\", maxRepeating(arr, n, k))\n","output":"The maximum repeating number is 3\n","fn_call":"maxRepeating"}
{"text":"range query on array whose each element is xor of index value and previous element | function return derived formula value . ; finding xor value of range [ y ... x ] ; function to solve query for l and r . ; if l or r is 0. ; finding x is divisible by 2 or not . ; ","context":"","code":"def fun(x):\n    y = (x \/\/ 4) * 4\n    ans = 0\n    for i in range(y, x + 1):\n        ans ^= i\n    return ans\n\n\ndef query(x):\n    if (x == 0):\n        return 0\n    k = (x + 1) \/\/ 2\n    if x % 2 == 0:\n        return ((fun(k - 1) * 2) ^ (k & 1))\n    else:\n        return (2 * fun(k))\n\n\ndef allQueries(q, l, r):\n    for i in range(q):\n        print(query(r[i]) ^ query(l[i] - 1))\n","test":"\nq = 3\nl = [2, 2, 5]\nr = [4, 8, 9]\nallQueries(q, l, r)\n","output":"0\n2\n0\n","fn_call":"allQueries"}
{"text":"minimum adjacent swaps required to sort binary array | function to find minimum swaps to sort an array of 0 s and 1 s . ; array to store count of zeroes ; count number of zeroes on right side of every one . ; count total number of swaps by adding number of zeroes on right side of every one . ; ","context":"","code":"def findMinSwaps(arr, n):\n    noOfZeroes = [0] * n\n    count = 0\n    noOfZeroes[n - 1] = 1 - arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        noOfZeroes[i] = noOfZeroes[i + 1]\n        if (arr[i] == 0):\n            noOfZeroes[i] = noOfZeroes[i] + 1\n    for i in range(0, n):\n        if (arr[i] == 1):\n            count = count + noOfZeroes[i]\n    return count\n","test":"\narr = [0, 0, 1, 0, 1, 0, 1, 1]\nn = len(arr)\nprint(findMinSwaps(arr, n))\n","output":"3\n","fn_call":"findMinSwaps"}
{"text":"minimum adjacent swaps required to sort binary array |  ; ","context":"","code":"def minswaps(arr):\n    count = 0\n    num_unplaced_zeros = 0\n    for index in range(len(arr) - 1, -1, -1):\n        if arr[index] == 0:\n            num_unplaced_zeros += 1\n        else:\n            count += num_unplaced_zeros\n    return count\n","test":"\narr = [0, 0, 1, 0, 1, 0, 1, 1]\nprint(minswaps(arr))\n","output":"3\n","fn_call":"minswaps"}
{"text":"program to check if an array is sorted or not ( iterative and recursive ) | function that returns true if array is sorted in non - decreasing order . ; array has one or no element ; unsorted pair found ; no unsorted pair found ; ","context":"","code":"def arraySortedOrNot(arr, n):\n    if (n == 0 or n == 1):\n        return True\n    for i in range(1, n):\n        if (arr[i - 1] > arr[i]):\n            return False\n    return True\n","test":"\narr = [20, 23, 23, 45, 78, 88]\nn = len(arr)\nif (arraySortedOrNot(arr, n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"arraySortedOrNot"}
{"text":"find the two numbers with odd occurrences in an unsorted array | prints two numbers that occur odd number of times . the function assumes that the array size is at least 2 and there are exactly two numbers occurring odd number of times . ; will hold xor of two odd occurring elements ; will have only single set bit of xor2 ; get the xor of all elements in arr [ ] . the xor will basically be xor of two odd occurring elements ; get one set bit in the xor2 . we get rightmost set bit in the following line as it is easy to get ; now divide elements in two sets : 1 ) the elements having the corresponding bit as 1. 2 ) the elements having the corresponding bit as 0. ; xor of first set is finally going to hold one odd occurring number x ; xor of second set is finally going to hold the other odd occurring number y ; ","context":"","code":"def printTwoOdd(arr, size):\n    xor2 = arr[0]\n    set_bit_no = 0\n    n = size - 2\n    x, y = 0, 0\n    for i in range(1, size):\n        xor2 = xor2 ^ arr[i]\n    set_bit_no = xor2 & ~(xor2 - 1)\n    for i in range(size):\n        if (arr[i] & set_bit_no):\n            x = x ^ arr[i]\n        else:\n            y = y ^ arr[i]\n    print(\"The two ODD elements are\", x, \"&\", y)\n","test":"\narr = [4, 2, 4, 5, 2, 3, 3, 1]\narr_size = len(arr)\nprintTwoOdd(arr, arr_size)\n","output":"The two ODD elements are 5 & 1\n","fn_call":"printTwoOdd"}
{"text":"find a pair with the given difference | the function assumes that the array is sorted ; initialize positions of two elements ; search for a pair ; ","context":"","code":"def findPair(arr, n):\n    size = len(arr)\n    i, j = 0, 1\n    while i < size and j < size:\n        if i != j and arr[j] - arr[i] == n:\n            print(\"Pair found (\", arr[i], \",\", arr[j], \")\")\n            return True\n        elif arr[j] - arr[i] < n:\n            j += 1\n        else:\n            i += 1\n    print(\"No pair found\")\n    return False\n","test":"\narr = [1, 8, 30, 40, 100]\nn = 60\nfindPair(arr, n)\n","output":"Pair found ( 40 , 100 )\n","fn_call":"findPair"}
{"text":"find k maximum elements of array in original order | function to pr m maximum elements ; vector to store the copy of the original array ; sorting the vector in descending order . please refer below link for details ; traversing through original array and pring all those elements that are in first k of sorted vector . ; ","context":"","code":"def printMax(arr, k, n):\n    brr = arr .copy()\n    brr .sort(reverse=True)\n    for i in range(n):\n        if (arr[i] in brr[0:k]):\n            print(arr[i], end=\" \")\n","test":"\narr = [50, 8, 45, 12, 25, 40, 84]\nn = len(arr)\nk = 3\nprintMax(arr, k, n)\n","output":"50 45 84 ","fn_call":"printMax"}
{"text":"print n smallest elements from given array in their original order | function for binary_search ; function to print smallest n numbers ; make copy of array ; sort copy array ; for each arr [ i ] find whether it is a part of n - smallest with binary search ; ","context":"","code":"def binary_search(arr, low, high, ele):\n    while low < high:\n        mid = (low + high) \/\/ 2\n        if arr[mid] == ele:\n            return mid\n        elif arr[mid] > ele:\n            high = mid\n        else:\n            low = mid + 1\n    return -1\n\n\ndef printSmall(arr, asize, n):\n    copy_arr = arr .copy()\n    copy_arr .sort()\n    for i in range(asize):\n        if binary_search(copy_arr, low=0, high=n, ele=arr[i]) > -1:\n            print(arr[i], end=\" \")\n","test":"\nif __name__ == \"__main__\":\n    arr = [1, 5, 8, 9, 6, 7, 3, 4, 2, 0]\n    asize = len(arr)\n    n = 5\n    printSmall(arr, asize, n)\n","output":"1 3 4 2 0 ","fn_call":"printSmall"}
{"text":"check whether arithmetic progression can be formed from the given array | returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression ; sort array ; after sorting , difference between consecutive elements must be same . ; ","context":"","code":"def checkIsAP(arr, n):\n    if (n == 1):\n        return True\n    arr .sort()\n    d = arr[1] - arr[0]\n    for i in range(2, n):\n        if (arr[i] - arr[i - 1] != d):\n            return False\n    return True\n","test":"\narr = [20, 15, 5, 0, 10]\nn = len(arr)\nprint(\"Yes\")if (checkIsAP(arr, n))else print(\"No\")\n","output":"Yes\n","fn_call":"checkIsAP"}
{"text":"check whether arithmetic progression can be formed from the given array | returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression ; find the smallest and and update second smallest ; find second smallest ; check if the duplicate element found or not ; if duplicate found then return false ; find the difference between smallest and second smallest ; as we have used smallest and second smallest , so we should now only check for n - 2 elements ; ","context":"","code":"def checkIsAP(arr, n):\n    hm = {}\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for i in range(n):\n        if (arr[i] < smallest):\n            second_smallest = smallest\n            smallest = arr[i]\n        elif (arr[i] != smallest and arr[i] < second_smallest):\n            second_smallest = arr[i]\n        if arr[i]not in hm:\n            hm[arr[i]] = 1\n        else:\n            return False\n    diff = second_smallest - smallest\n    for i in range(n - 1):\n        if (second_smallest)not in hm:\n            return False\n        second_smallest += diff\n    return True\n","test":"\narr = [20, 15, 5, 0, 10]\nn = len(arr)\nif (checkIsAP(arr, n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"checkIsAP"}
{"text":"count ways of choosing a pair with maximum difference | python code to find no . of ways of choosing a pair with maximum difference ; to find minimum and maximum of the array ; to find the count of minimum and maximum elements ; count variables ; condition for all elements equal ; ","context":"","code":"def countPairs(a, n):\n    mn = +2147483647\n    mx = -2147483648\n    for i in range(n):\n        mn = min(mn, a[i])\n        mx = max(mx, a[i])\n    c1 = 0\n    c2 = 0\n    for i in range(n):\n        if (a[i] == mn):\n            c1 += 1\n        if (a[i] == mx):\n            c2 += 1\n    if (mn == mx):\n        return n * (n - 1) \/\/ 2\n    else:\n        return c1 * c2\n","test":"\na = [3, 2, 1, 1, 3]\nn = len(a)\nprint(countPairs(a, n))\n","output":"4\n","fn_call":"countPairs"}
{"text":"print all possible rotations of a given array | function to reverse array between indices s and e ; function to generate all possible rotations of array ; ","context":"","code":"def reverse(arr, s, e):\n    while s < e:\n        tem = arr[s]\n        arr[s] = arr[e]\n        arr[e] = tem\n        s = s + 1\n        e = e - 1\n\n\ndef fun(arr, k):\n    n = len(arr) - 1\n    v = n - k\n    if v >= 0:\n        reverse(arr, 0, v)\n        reverse(arr, v + 1, n)\n        reverse(arr, 0, n)\n        return arr\n","test":"\narr = [1, 2, 3, 4]\nfor i in range(0, len(arr)):\n    count = 0\n    p = fun(arr, i)\n    print(p, end=\" \")\n","output":"[1, 2, 3, 4] [4, 1, 2, 3] [2, 3, 4, 1] [3, 4, 1, 2] ","fn_call":"fun"}
{"text":"find array sum using bitwise or after splitting given array in two halves after k circular shifts | python3 program to find bitwise or of two equal halves of an array after performing k right circular shifts ; array for storing the segment tree ; function to build the segment tree ; function to return the or of elements in the range [ l , r ] ; check for out of bound condition ; find middle of the range ; recurse for all the elements in array ; function to find the or sum ; function to build the segment tree ; loop to handle q queries ; effective number of right circular shifts ; or of second half of the array [ n \/ 2 - i , n - 1 - i ] ; or of first half of the array [ n - i , n - 1 ] or [ 0 , n \/ 2 - 1 - i ] ; print final answer to the query ; ","context":"\nMAX = 100005\n\nseg = [0] * (4 * MAX)\n\n","code":"def build(node, l, r, a):\n\n    if (l == r):\n        seg[node] = a[l]\n\n    else:\n        mid = (l + r) \/\/ 2\n\n        build(2 * node, l, mid, a)\n        build(2 * node + 1, mid + 1, r, a)\n\n        seg[node] = (seg[2 * node] |\n                     seg[2 * node + 1])\n\n\ndef query(node, l, r, start, end, a):\n    if (l > end or r < start):\n        return 0\n\n    if (start <= l and r <= end):\n        return seg[node]\n    mid = (l + r) \/\/ 2\n    return ((query(2 * node, l, mid,\n                   start, end, a)) |\n            (query(2 * node + 1, mid + 1,\n                   r, start, end, a)))\n\n\ndef orsum(a, n, q, k):\n    build(1, 0, n - 1, a)\n    for j in range(q):\n        i = k[j] % (n \/\/ 2)\n        sec = query(1, 0, n - 1, n \/\/ 2 - i,\n                    n - i - 1, a)\n        first = (query(1, 0, n - 1, 0,\n                       n \/\/ 2 -\n                       1 - i, a) |\n                 query(1, 0, n - 1,\n                       n - i,\n                       n - 1, a))\n\n        temp = sec + first\n        print(temp)\n","test":"\nif __name__ == \"__main__\":\n    a = [7, 44, 19, 86, 65, 39, 75, 101]\n    n = len(a)\n    q = 2\n    k = [4, 2]\n    orsum(a, n, q, k)\n","output":"238\n230\n","fn_call":"orsum"}
{"text":"maximize count of corresponding same elements in given arrays by rotation | function that prints maximum equal elements ; list to store the index of elements of array b ; storing the positions of array b ; frequency array to keep count of elements with similar difference in distances ; iterate through all element in arr1 [ ] ; calculate number of shift required to make current element equal ; if d is less than 0 ; store the frequency of current diff ; compute the maximum frequency stored ; printing the maximum number of equal elements ; ","context":"","code":"def maximumEqual(a, b, n):\n    store = [0] * 10 ** 5\n    for i in range(n):\n        store[b[i]] = i + 1\n    ans = [0] * 10 ** 5\n    for i in range(n):\n        d = abs(store[a[i]] - (i + 1))\n        if (store[a[i]] < i + 1):\n            d = n - d\n        ans[d] += 1\n    finalans = 0\n    for i in range(10 ** 5):\n        finalans = max(finalans, ans[i])\n    print(finalans)\n","test":"\nif __name__ == '__main__':\n    A = [6, 7, 3, 9, 5]\n    B = [7, 3, 9, 5, 6]\n    size = len(A)\n    maximumEqual(A, B, size)\n","output":"5\n","fn_call":"maximumEqual"}
{"text":"print array after it is right rotated k times | function to rightrotate array ; if rotation is greater than size of array ; printing rightmost kth elements ; prints array after ' k ' elements ; ","context":"","code":"def RightRotate(a, n, k):\n    k = k % n\n    for i in range(0, n):\n        if (i < k):\n            print(a[n + i - k], end=\" \")\n        else:\n            print(a[i - k], end=\" \")\n    print(\"\")\n","test":"\nArray = [1, 2, 3, 4, 5]\nN = len(Array)\nK = 2\nRightRotate(Array, N, K)\n","output":"4 5 1 2 3 \n","fn_call":"RightRotate"}
{"text":"find range value of the expression | function to return the value of the given expression ; value of the first term ; value of the last term ; ","context":"","code":"def get(L, R):\n    x = 1.0 \/ L\n    y = 1.0 \/ (R + 1.0)\n    return (x - y)\n","test":"\nif __name__ == \"__main__\":\n    L = 6\n    R = 12\n    ans = get(L, R)\n    print(round(ans, 2))\n","output":"0.09\n","fn_call":"get"}
{"text":"minimum deletions required such that any number x will occur exactly x times | function to return the minimum deletions required ; to store the frequency of the array elements ; store frequency of each element ; to store the minimum deletions required ; value ; it 's frequency ; if number less than or equal to it 's frequency ; delete extra occurrences ; delete every occurrence of x ; ","context":"","code":"def MinDeletion(a, n):\n    map = dict .fromkeys(a, 0)\n    for i in range(n):\n        map[a[i]] += 1\n    ans = 0\n    for key, value in map .items():\n        x = key\n        frequency = value\n        if (x <= frequency):\n            ans += (frequency - x)\n        else:\n            ans += frequency\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    a = [2, 3, 2, 3, 4, 4, 4, 4, 5]\n    n = len(a)\n    print(MinDeletion(a, n))\n","output":"3\n","fn_call":"MinDeletion"}
{"text":"concatenate strings in any order to get maximum number of \" ab \" | function to find maximum number of abs ; variable a , b , ab for count strings that end with ' a ' but not end with ' b ' , ' b ' but does not end with ' a ' and ' b ' and ends with ' a ' respectively . ; ' ab ' is already present in string before concatenate them ; count of strings that begins with ' b ' and ends with 'a ; count of strings that begins with ' b ' but does not end with 'a ; count of strings that ends with ' a ' but not end with 'b ; updating the value of ans and add extra count of 'ab ; ","context":"","code":"def maxCountAB(s, n):\n    A = 0\n    B = 0\n    BA = 0\n    ans = 0\n\n    for i in range(n):\n        S = s[i]\n        L = len(S)\n        for j in range(L-1):\n            if (S[j] == 'A' and S[j + 1] == 'B'):\n                ans += 1\n        if (S[0] == 'B' and S[L - 1] == 'A'):\n            BA += 1\n        elif (S[0] == 'B'):\n            B += 1\n        elif (S[L - 1] == 'A'):\n            A += 1\n    if (BA == 0):\n        ans += min(B, A)\n    elif (A + B == 0):\n        ans += BA - 1\n    else:\n        ans += BA + min(B, A)\n    return ans\n","test":"\nif __name__ == '__main__':\n    s = [\"ABCA\", \"BOOK\", \"BAND\"]\n\n    n = len(s)\n\n    print(maxCountAB(s, n))\n","output":"2\n","fn_call":"maxCountAB"}
{"text":"minimum operations to make sum of neighbouring elements <= x | function to return the minimum number of operations required ; to store total operations required ; first make all elements equal to x which are currenctly greater ; left scan the array ; update the current element such that neighbouring sum is < x ; ","context":"","code":"def MinOperations(n, x, arr):\n    total = 0\n    for i in range(n):\n        if (arr[i] > x):\n            difference = arr[i] - x\n            total = total + difference\n            arr[i] = x\n    for i in range(n):\n        LeftNeigbouringSum = arr[i] + arr[i - 1]\n        if (LeftNeigbouringSum > x):\n            current_diff = LeftNeigbouringSum - x\n            arr[i] = max(0, arr[i] - current_diff)\n            total = total + current_diff\n    return total\n","test":"\nX = 1\narr = [1, 6, 1, 2, 0, 4]\nN = len(arr)\nprint(MinOperations(N, X, arr))\n","output":"11\n","fn_call":"MinOperations"}
{"text":"find the repeating and the missing number using two equations | python3 implementation of the approach ; function to print the required numbers ; sum of first n natural numbers ; sum of squares of first n natural numbers ; to store the sum and sum of squares of the array elements ; ","context":"\nimport math\n\n","code":"def findNumbers(arr, n):\n    sumN = (n * (n + 1)) \/ 2\n    sumSqN = (n * (n + 1) * (2 * n + 1)) \/ 6\n    sum = 0\n    sumSq = 0\n    for i in range(0, n):\n        sum = sum + arr[i]\n        sumSq = sumSq + (math .pow(arr[i], 2))\n    B = (((sumSq - sumSqN) \/ (sum - sumN)) + sumN - sum) \/ 2\n    A = sum - sumN + B\n    print(\"A = \", int(A))\n    print(\"B = \", int(B))\n","test":"\narr = [1, 2, 2, 3, 4]\nn = len(arr)\nfindNumbers(arr, n)\n","output":"A =  2\nB =  5\n","fn_call":"findNumbers"}
{"text":"lexicographically smallest string with given string as prefix | function to find the whether the string temp starts with str or not ; base case ; check for the corresponding characters in temp & str ; function to find lexicographic smallest string consisting of the string str as prefix ; sort the given array string arr [ ] ; if the i - th string contains given string as a prefix , then print the result ; if no string exists then return \" - 1\" ; ","context":"","code":"def is_prefix(temp, str):\n    if (len(temp) < len(str)):\n        return 0\n    else:\n        for i in range(len(str)):\n            if (str[i] != temp[i]):\n                return 0\n        return 1\n\n\ndef lexicographicallyString(input, n, str):\n    input .sort()\n    for i in range(n):\n        temp = input[i]\n        if (is_prefix(temp, str)):\n            return temp\n    return \"-1\"\n","test":"\nif __name__ == '__main__':\n    arr = [\"apple\", \"appe\", \"apl\", \"aapl\", \"appax\"]\n    S = \"app\"\n    N = 5\n    print(lexicographicallyString(arr, N, S))\n","output":"appax\n","fn_call":"lexicographicallyString"}
{"text":"rearrange array to find k using binary search algorithm without sorting | function to rearrange the array ; stores the rearranged array ; stores whether the arrangement is possible or not ; update k with the position of k ; stores all elements lesser than and greater than in vector smaller and greater respectively ; traverse the array arr [ ] ; if arr [ i ] is less than arr [ k ] ; else ; iterate unil low is less than or equal to high ; stores mid point ; if mid is equal to k ; if mid is less than k ; if mid is greater than k ; if f is - 1 ; iterate in the range [ 1 , n ] ; if ans [ i ] is equal to - 1 ; print the rearranged array ; ","context":"","code":"def Rearrange(arr, K, N):\n    ans = [0] * (N + 1)\n    f = -1\n    for i in range(N):\n        ans[i] = -1\n    K = arr .index(K)\n    smaller = []\n    greater = []\n    for i in range(N):\n        if (arr[i] < arr[K]):\n            smaller .append(arr[i])\n        elif (arr[i] > arr[K]):\n            greater .append(arr[i])\n    low = 0\n    high = N - 1\n    while (low <= high):\n        mid = (low + high) \/\/ 2\n        if (mid == K):\n            ans[mid] = arr[K]\n            f = 1\n            break\n        elif (mid < K):\n            if (len(smaller) == 0):\n                break\n            ans[mid] = smaller[-1]\n            smaller .pop()\n            low = mid + 1\n        else:\n            if (len(greater) == 0):\n                break\n            ans[mid] = greater[-1]\n            greater .pop()\n            high = mid - 1\n    if (f == -1):\n        print(-1)\n        return\n    for i in range(N):\n        if (ans[i] == -1):\n            if (len(smaller)):\n                ans[i] = smaller[-1]\n                smaller .pop()\n            elif (len(greater)):\n                ans[i] = greater[-1]\n                greater .pop()\n    for i in range(N):\n        print(ans[i], end=\" \")\n    print()\n","test":"\nif __name__ == \"__main__\":\n    arr = [10, 7, 2, 5, 3, 8]\n    K = 7\n    N = len(arr)\n    Rearrange(arr, K, N)\n","output":"3 7 8 5 2 10 \n","fn_call":"Rearrange"}
{"text":"minimize k to let person a consume at least ceil ( n \/ ( m + 1 ) ) candies based on given rules | python 3 program for the above approach ; function to find minimum value of k such that the first person gets at least ( n \/ ( m + 1 ) ) candies ; find the minimum required value of candies for the first person ; iterate k from [ 1 , n ] ; total number of candies ; candies taken by person 1 ; candies taken by 1 st person is minimum of k and candies left ; traverse the array arr [ ] ; amount consumed by the person j ; update the number of candies ; good share of candies achieved ; ","context":"\nimport math\n\n","code":"def minimumK(arr,  M, N):\n    good = math.ceil((N * 1.0) \/ ((M + 1) * 1.0))\n    for i in range(1, N + 1):\n        K = i\n        candies = N\n        taken = 0\n\n        while (candies > 0):\n            taken += min(K, candies)\n            candies -= min(K, candies)\n            for j in range(M):\n                consume = (arr[j]\n                           * candies) \/ 100\n                candies -= consume\n        if (taken >= good):\n            print(i)\n            return\n","test":"\nif __name__ == \"__main__\":\n    N = 13\n    M = 1\n    arr = [50]\n    minimumK(arr, M, N)\n","output":"3\n","fn_call":"minimumK"}
{"text":"total time required to travel a path denoted by a given string | function to calculate time taken to travel the path ; stores total time ; initial position ; stores visited segments ; check whether segment is present in the set ; increment the value of time by 2 ; insert segment into the set ; print the value of time ; ","context":"","code":"def calcTotalTime(path):\n    time = 0\n    x = 0\n    y = 0\n    s = set([])\n    for i in range(len(path)):\n        p = x\n        q = y\n        if (path[i] == 'N'):\n            y += 1\n        elif (path[i] == 'S'):\n            y -= 1\n        elif (path[i] == 'E'):\n            x += 1\n        elif (path[i] == 'W'):\n            x -= 1\n        if (p + x, q + y)not in s:\n            time += 2\n            s .add((p + x, q + y))\n        else:\n            time += 1\n    print(time)\n","test":"\nif __name__ == \"__main__\":\n    path = \"NSE\"\n    calcTotalTime(path)\n","output":"5\n","fn_call":"calcTotalTime"}
{"text":"cost required to make all array elements equal to 1 | function to calculate the cost required to make all array elements equal to 1 ; stores the total cost ; traverse the array arr [ ] ; if current element is 0 ; convert 0 to 1 ; add the cost ; return the total cost ; ","context":"","code":"def findCost(A, N):\n    totalCost = 0\n    for i in range(N):\n        if (A[i] == 0):\n            A[i] = 1\n            totalCost += i\n    return totalCost\n","test":"\nif __name__ == '__main__':\n    arr = [1, 0, 1, 0, 1, 0]\n    N = len(arr)\n    print(findCost(arr, N))\n","output":"9\n","fn_call":"findCost"}
{"text":"find the peak index of a given array | function to find the peak index for the given array ; base case ; check for strictly increasing array ; if the strictly increasing condition is violated , then break ; stores the value of i , which is a potential peak index ; second traversal , for strictly decreasing array ; when the strictly decreasing condition is violated , then break ; if i = n - 1 , it means that ans is the peak index ; otherwise , peak index doesn 't exist ; ","context":"","code":"def peakIndex(arr):\n    N = len(arr)\n    if (len(arr) < 3):\n        return -1\n    i = 0\n    while (i + 1 < N):\n        if (arr[i + 1] < arr[i] or arr[i] == arr[i + 1]):\n            break\n        i += 1\n    if (i == 0 or i == N - 1):\n        return -1\n    ans = i\n    while (i < N - 1):\n        if (arr[i] < arr[i + 1] or arr[i] == arr[i + 1]):\n            break\n        i += 1\n    if (i == N - 1):\n        return ans\n    return -1\n","test":"\nif __name__ == '__main__':\n    arr = [0, 1, 0]\n    print(peakIndex(arr))\n","output":"1\n","fn_call":"peakIndex"}
{"text":"given an array a [ ] and a number x , check for pair in a [ ] with sum as x | set 2 | function to check if the array has 2 elements whose sum is equal to the given value ; sort the array in increasing order ; traverse the array , nums [ ] ; store the required number to be found ; perform binary search ; store the mid value ; if nums [ mid ] is greater than x , then update high to mid - 1 ; if nums [ mid ] is less than x , then update low to mid + 1 ; otherwise ; if mid is equal i , check mid - 1 and mid + 1 ; otherwise , prthe pair and return ; if no such pair is found , then pr - 1 ; ","context":"","code":"def hasArrayTwoPairs(nums, n, target):\n    nums = sorted(nums)\n    for i in range(n):\n        x = target - nums[i]\n        low, high = 0, n - 1\n        while (low <= high):\n            mid = low + ((high - low) \/\/ 2)\n            if (nums[mid] > x):\n                high = mid - 1\n            elif (nums[mid] < x):\n                low = mid + 1\n            else:\n                if (mid == i):\n                    if ((mid - 1 >= 0) and nums[mid - 1] == x):\n                        print(nums[i], end=\", \")\n                        print(nums[mid - 1])\n                        return\n                    if ((mid + 1 < n) and nums[mid + 1] == x):\n                        print(nums[i], end=\", \")\n                        print(nums[mid + 1])\n                        return\n                    break\n                else:\n                    print(nums[i], end=\", \")\n                    print(nums[mid])\n                    return\n    print(-1)\n","test":"\nif __name__ == '__main__':\n    A = [0, -1, 2, -3, 1]\n    X = -2\n    N = len(A)\n    hasArrayTwoPairs(A, N, X)\n","output":"-3, 1\n","fn_call":"hasArrayTwoPairs"}
{"text":"smallest divisor of n closest to x | python3 program for the above approach ; function to find the divisor of n closest to the target ; iterate till square root of n ; check if divisors are equal ; check if i is the closest ; check if i is the closest ; check if n \/ i is the closest ; prthe closest value ; ","context":"\nfrom math import sqrt, floor, ceil\n\n","code":"def findClosest(N, target):\n    closest = -1\n    diff = 10 ** 18\n    for i in range(1, ceil(sqrt(N)) + 1):\n        if (N % i == 0):\n            if (N \/\/ i == i):\n                if (abs(target - i) < diff):\n                    diff = abs(target - i)\n                    closest = i\n            else:\n                if (abs(target - i) < diff):\n                    diff = abs(target - i)\n                    closest = i\n                if (abs(target - N \/\/ i) < diff):\n                    diff = abs(target - N \/\/ i)\n                    closest = N \/\/ i\n    print(closest)\n","test":"\nif __name__ == '__main__':\n    N, X = 16, 5\n    findClosest(N, X)\n","output":"4\n","fn_call":"findClosest"}
{"text":"find a pair ( a , b ) such that aa + bb = n | function to calculate the minimum power of a and b greater than n ; stores the power of a which is greater than n ; increment count by 1 ; divide n by a ; function to find a pair ( a , b ) such that a ^ a + b ^ b = n ; calculate the minimum power of a greater than n ; calculate the minimum power of b greater than n ; make copy of a and b ; traverse for every pair ( i , j ) ; check if b ^ j + a ^ i = n to overcome the overflow problem use b = n - a rather than b + a = n ; increment power b by 1 ; increment power a by 1 ; finally pr - 1 if no pair is found ; ","context":"","code":"def power(A, N):\n    count = 0\n    if (A == 1):\n        return 0\n    while (N > 0):\n        count += 1\n        N \/\/= A\n    return int(count)\n\n\ndef Pairs(N, A, B):\n    powerA, powerB = 0, 0\n    powerA = power(A, N)\n    powerB = power(B, N)\n    intialB = B\n    intialA = A\n    A = 1\n    for i in range(powerA + 1):\n        B = 1\n        for j in range(powerB + 1):\n            if (B == N - A):\n                print(i, \" \", j)\n                return\n            B *= intialB\n        A *= intialA\n    print(\"-1\")\n    return\n","test":"\nif __name__ == '__main__':\n    N = 106\n    A = 3\n    B = 5\n    Pairs(N, A, B)\n","output":"4   2\n","fn_call":"Pairs"}
{"text":"count numbers from a given range that are not divisible by any of the array elements | function to find the non - multiples till k ; stores all unique multiples ; iterate the array ; for finding duplicates only once ; inserting all multiples into the set ; returning only the count of numbers that are not divisible by any of the array elements ; function to count the total values in the range [ l , r ] ; count all values in the range using exclusion principle ; ","context":"","code":"def findNonMultiples(arr, n, k):\n    multiples = set([])\n    for i in range(n):\n        if (arr[i]not in multiples):\n            for j in range(1, k \/\/ arr[i] + 1):\n                multiples .add(arr[i] * j)\n    return k - len(multiples)\n\n\ndef countValues(arr, N, L, R):\n    return (findNonMultiples(arr, N, R) - findNonMultiples(arr, N, L - 1))\n","test":"\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6]\n    N = len(arr)\n    L = 1\n    R = 20\n    print(countValues(arr, N, L, R))\n","output":"6\n","fn_call":"countValues"}
{"text":"minimum number of coins to be collected per hour to empty n piles in at most h hours | function to find the minimum number of coins to be collected per hour to empty n piles in h hours ; stores the minimum coins to be removed per hour ; find the maximum array element ; perform binary search ; store the mid value of the range in k ; find the total time taken to empty n piles by removing k coins per hour ; if total time does not exceed h ; otherwise ; prthe required result ; ","context":"","code":"def minCollectingSpeed(piles, H):\n    ans = -1\n    low = 1\n    high = max(piles)\n    while (low <= high):\n        K = low + (high - low) \/\/ 2\n        time = 0\n        for ai in piles:\n            time += (ai + K - 1) \/\/ K\n        if (time <= H):\n            ans = K\n            high = K - 1\n        else:\n            low = K + 1\n    print(ans)\n","test":"\nif __name__ == '__main__':\n    arr = [3, 6, 7, 11]\n    H = 8\n    minCollectingSpeed(arr, H)\n","output":"4\n","fn_call":"minCollectingSpeed"}
{"text":"count distinct pairs with given sum | function to count distinct pairs in array whose sum equal to k ; stores count of distinct pairs whose sum equal to k ; sort the array ; stores index of the left pointer ; stores index of the right pointer ; calculate count of distinct pairs whose sum equal to k ; if sum of current pair is equal to k ; remove consecutive duplicate array elements ; update i ; remove consecutive duplicate array elements ; update j ; update cntpairs ; update i ; update j ; if sum of current pair less than k ; update i ; update j ; ","context":"","code":"def cntDisPairs(arr, N, K):\n    cntPairs = 0\n    arr = sorted(arr)\n    i = 0\n    j = N - 1\n    while (i < j):\n        if (arr[i] + arr[j] == K):\n            while (i < j and arr[i] == arr[i + 1]):\n                i += 1\n            while (i < j and arr[j] == arr[j - 1]):\n                j -= 1\n            cntPairs += 1\n            i += 1\n            j -= 1\n        elif (arr[i] + arr[j] < K):\n            i += 1\n        else:\n            j -= 1\n    return cntPairs\n","test":"\nif __name__ == '__main__':\n    arr = [5, 6, 5, 7, 7, 8]\n    N = len(arr)\n    K = 13\n    print(cntDisPairs(arr, N, K))\n","output":"2\n","fn_call":"cntDisPairs"}
{"text":"count distinct pairs with given sum | function to count distinct pairs in array whose sum equal to k ; stores count of distinct pairs whose sum equal to k ; store frequency of each distinct element of the array ; update frequency of arr [ i ] ; traverse the map ; stores key value of the map ; if i is the half of k ; if frequency of i greater than 1 ; update cntpairs ; update cntpairs ; ","context":"","code":"def cntDisPairs(arr, N, K):\n    cntPairs = 0\n    cntFre = {}\n    for i in arr:\n        if i in cntFre:\n            cntFre[i] += 1\n        else:\n            cntFre[i] = 1\n    for key, value in cntFre .items():\n        i = key\n        if (2 * i == K):\n            if (cntFre[i] > 1):\n                cntPairs += 2\n        else:\n            if (cntFre[K - i]):\n                cntPairs += 1\n    cntPairs = cntPairs \/ 2\n    return cntPairs\n","test":"\narr = [5, 6, 5, 7, 7, 8]\nN = len(arr)\nK = 13\nprint(int(cntDisPairs(arr, N, K)))\n","output":"2\n","fn_call":"cntDisPairs"}
{"text":"queries to find longest subsequence having no similar adjacent elements with updates | function to find the length of the longest subsequence such that no two adjacent elements are equal ; replace element at index x with y ; since x is 1 - indexed , decrement x by 1 ; keep track of number of elements in subsequence ; if previous element is not same as current element ; print the desired count ; ","context":"","code":"def longestSubsequence(N, Q, arr, Queries):\n    for i in range(Q):\n        x = Queries[i][0]\n        y = Queries[i][1]\n        arr[x - 1] = y\n        count = 1\n        for j in range(1, N):\n            if (arr[j] != arr[j - 1]):\n                count += 1\n        print(count, end=' ')\n","test":"\nif __name__ == \"__main__\":\n    arr = [1, 1, 2, 5, 2]\n    N = len(arr)\n    Q = 2\n    Queries = [[1, 3], [4, 2]]\n    longestSubsequence(N, Q, arr, Queries)\n","output":"5 3 ","fn_call":"longestSubsequence"}
{"text":"queries to find longest subsequence having no similar adjacent elements with updates | python3 program for the above approach ; traverse the array arr [ ] ; if previous element is not same as current element ; traverse the queries ; replace element at index x with y ; recalculate for index x ; subtract contribution of element at index x ; add contribution of y ; recalculate for index x + 1 ; subtract contribution of element at index x + 1 ; adds contribution of y ; replace the element ; ","context":"","code":"def longestSubsequence(N, Q, arr, Queries):\n    count = 1\n    for i in range(1, N):\n        if (arr[i] != arr[i - 1]):\n            count += 1\n    for i in range(Q):\n        x = Queries[i][0]\n        y = Queries[i][1]\n        if (x > 1):\n            if (arr[x - 1] != arr[x - 2]):\n                count -= 1\n            if (arr[x - 2] != y):\n                count += 1\n        if (x < N):\n            if (arr[x] != arr[x - 1]):\n                count -= 1\n            if (y != arr[x]):\n                count += 1\n        print(count, end=' ')\n        arr[x - 1] = y\n","test":"\nif __name__ == \"__main__\":\n    arr = [1, 1, 2, 5, 2]\n    N = len(arr)\n    Q = 2\n    Queries = [[1, 3], [4, 2]]\n    longestSubsequence(N, Q, arr, Queries)\n","output":"5 3 ","fn_call":"longestSubsequence"}
{"text":"sum of absolute differences of indices of occurrences of each array element | python3 program for the above approach ; function to find sum of differences of indices of occurrences of each unique array element ; stores indices of each array element ; store the indices ; stores the sums ; traverse the array ; find sum for each element ; iterate over the map ; calculate sum of occurrences of arr [ i ] ; store sum for current element ; print answer for each element ; ","context":"\nfrom collections import defaultdict\n\n","code":"def sum_i(arr, n):\n    mp = defaultdict(lambda: [])\n    for i in range(n):\n        mp[arr[i]].append(i)\n    ans = [0] * n\n    for i in range(n):\n        sum = 0\n        for it in mp[arr[i]]:\n            sum += abs(it - i)\n            ans[i] = sum\n    for i in range(n):\n        print(ans[i], end=\" \")\n","test":"\nif __name__ == '__main__':\n    arr = [1, 3, 1, 1, 2]\n    n = len(arr)\n    sum_i(arr, n)\n","output":"5 0 3 4 0 ","fn_call":"sum_i"}
{"text":"convert vowels into upper case character in a given string | function to convert vowels into uppercase ; stores the length of str ; ","context":"","code":"def conVowUpp(str):\n    N = len(str)\n    str1 = \"\"\n    for i in range(N):\n        if (str[i] == 'a' or str[i] == 'e' or str[i]\n                == 'i' or str[i] == 'o' or str[i] == 'u'):\n            c = (str[i]).upper()\n            str1 += c\n        else:\n            str1 += str[i]\n    print(str1)\n","test":"\nif __name__ == '__main__':\n    str = \"eutopia\"\n    conVowUpp(str)\n","output":"EUtOpIA\n","fn_call":"conVowUpp"}
{"text":"maximize number of days for which p chocolates can be distributed consecutively to n people | stores the frequency of each type of chocolate ; function to check if chocolates can be eaten for ' mid ' no . of days ; if cnt exceeds n , return true ; function to find the maximum number of days for which chocolates can be eaten ; store the frequency of each type of chocolate ; initialize start and end with 0 and p respectively ; calculate mid ; check if chocolates can be distributed for mid days ; check if chocolates can be distributed for more than mid consecutive days ; ","context":"\nmp = {}\nN, P = 0, 0\n\n","code":"def helper(mid):\n    cnt = 0\n    for i in mp:\n        temp = mp[i]\n        while (temp >= mid):\n            temp -= mid\n            cnt += 1\n    return cnt >= N\n\n\ndef findMaximumDays(arr):\n    for i in range(P):\n        mp[arr[i]] = mp .get(arr[i], 0) + 1\n    start = 0\n    end = P\n    ans = 0\n    while (start <= end):\n        mid = start + ((end - start) \/\/ 2)\n        if (mid != 0 and helper(mid)):\n            ans = mid\n            start = mid + 1\n        elif (mid == 0):\n            start = mid + 1\n        else:\n            end = mid - 1\n    return ans\n","test":"\nif __name__ == '__main__':\n    N = 3\n    P = 10\n    arr = [1, 2, 2, 1, 1, 3, 3, 3, 2, 4]\n    print(findMaximumDays(arr))\n","output":"3\n","fn_call":"findMaximumDays"}
{"text":"count subarrays having sum modulo k same as the length of the subarray | function that counts the subarrays having sum modulo k equal to the length of subarray ; stores the count of subarrays ; stores prefix sum of the array ; calculate prefix sum array ; generate all the subarrays ; check if this subarray is a valid subarray or not ; total count of subarrays ; given arr [ ] ; size of the array ; ","context":"","code":"def countSubarrays(a, n, k):\n    ans = 0\n    pref = []\n    pref .append(0)\n    for i in range(n):\n        pref .append((a[i] + pref[i]) % k)\n    for i in range(1, n + 1, 1):\n        for j in range(i, n + 1, 1):\n            if ((pref[j] - pref[i - 1] + k) % k == j - i + 1):\n                ans += 1\n    print(ans, end=' ')\n","test":"\narr = [2, 3, 5, 3, 1, 5]\nN = len(arr)\nK = 4\ncountSubarrays(arr, N, K)\n","output":"5 ","fn_call":"countSubarrays"}
{"text":"count subarrays having sum modulo k same as the length of the subarray | function that counts the subarrays s . t . sum of elements in the subarray modulo k is equal to size of subarray ; stores the count of ( pref [ i ] - i ) % k ; stores the count of subarray ; stores prefix sum of the array ; find prefix sum array ; base condition ; remove the index at present after k indices from the current index ; update the answer for subarrays ending at the i - th index ; add the calculated value of current index to count ; print the count of subarrays ; given arr [ ] ; size of the array ; ","context":"","code":"def countSubarrays(a, n, k):\n    cnt = {}\n    ans = 0\n    pref = []\n    pref .append(0)\n    for i in range(n):\n        pref .append((a[i] + pref[i]) % k)\n    cnt[0] = 1\n    for i in range(1, n + 1):\n        remIdx = i - k\n        if (remIdx >= 0):\n            if ((pref[remIdx] - remIdx % k + k) % k in cnt):\n                cnt[(pref[remIdx] - remIdx % k + k) % k] -= 1\n            else:\n                cnt[(pref[remIdx] - remIdx % k + k) % k] = -1\n        if (pref[i] - i % k + k) % k in cnt:\n            ans += cnt[(pref[i] - i % k + k) % k]\n        if (pref[i] - i % k + k) % k in cnt:\n            cnt[(pref[i] - i % k + k) % k] += 1\n        else:\n            cnt[(pref[i] - i % k + k) % k] = 1\n    print(ans, end=' ')\n","test":"\narr = [2, 3, 5, 3, 1, 5]\nN = len(arr)\nK = 4\ncountSubarrays(arr, N, K)\n","output":"5 ","fn_call":"countSubarrays"}
{"text":"check if all substrings of length k of a binary string has equal count of 0 s and 1 s | function to check if the substring of length k has equal 0 and 1 ; traverse the string ; check if every k - th character is the same or not ; traverse substring of length k ; if current character is 0 ; increment count ; otherwise ; decrement count ; check for equal 0 s and 1 s ; ","context":"","code":"def check(s, k):\n    n = len(s)\n    for i in range(k):\n        for j in range(i, n, k):\n            if (s[i] != s[j]):\n                return False\n    c = 0\n    for i in range(k):\n        if (s[i] == '0'):\n            c += 1\n        else:\n            c -= 1\n    if (c == 0):\n        return True\n    else:\n        return False\n","test":"\ns = \"101010\"\nk = 2\nif (check(s, k) != 0):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"check"}
{"text":"check if characters of a given string can be used to form any n equal strings | python3 program for the above approach ; function to check if the freq of any character is divisible by n ; stores the frequency of characters ; if frequency of a character is not divisible by n ; if no character has frequency at least n ; ","context":"\nfrom collections import defaultdict\n\n","code":"def isSame(str, n):\n    mp = defaultdict(lambda: 0)\n    for i in range(len(str)):\n        mp[ord(str[i]) - ord('a')] += 1\n    for it in mp .keys():\n        if (mp[it] >= n):\n            return True\n    return False\n","test":"\nstr = \"ccabcba\"\nn = 4\nif (isSame(str, n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"No\n","fn_call":"isSame"}
{"text":"find the root of given non decreasing function between a and b | python3 program for the above approach ; given function ; function to find the root of the given non - decreasing function ; to get the minimum possible answer for the root ; find mid ; search in [ low , x ] ; search in [ x , high ] ; return the required answer ; function to find the roots of the given equation within range [ a , b ] ; if root doesn 't exists ; else find the root upto 4 decimal places ; ","context":"\nimport math\neps = 1e-6\n\n","code":"def func(a, b, c, x):\n    return a * x * x + b * x + c\n\n\ndef findRoot(a, b, c, low, high):\n    x = -1\n    while abs(high - low) > eps:\n        x = (low + high) \/ 2\n        if (func(a, b, c, low) * func(a, b, c, x) <= 0):\n            high = x\n        else:\n            low = x\n    return x\n\n\ndef solve(a, b, c, A, B):\n    if (func(a, b, c, A) * func(a, b, c, B) > 0):\n        print(\"No solution\")\n    else:\n        print(\"{:.4f}\".format(findRoot(a, b, c, A, B)))\n","test":"\nif __name__ == '__main__':\n    a = 2\n    b = -3\n    c = -2\n    A = 0\n    B = 3\n    solve(a, b, c, A, B)\n","output":"2.0000\n","fn_call":"solve"}
{"text":"median of difference of all pairs from an array | function check if mid can be median index of the difference array ; size of the array ; total possible no of pair possible ; the index of the element in the difference of all pairs from the array ; count the number of pairs having difference <= mid ; if the difference between end and first element is less then or equal to mid ; checking for the no of element less than or equal to mid is greater than median or not ; function to calculate the median of differences of all pairs from the array ; size of the array ; initialising the low and high ; binary search ; calculate mid ; if mid can be the median of the array ; returning the median of the differences of pairs from the array ; ","context":"","code":"def possible(mid, a):\n    n = len(a)\n    total = (n * (n - 1)) \/\/ 2\n    need = (total + 1) \/\/ 2\n    count = 0\n    start = 0\n    end = 1\n    while (end < n):\n        if (a[end] - a[start] <= mid):\n            end += 1\n        else:\n            count += (end - start - 1)\n            start += 1\n    if (end == n and start < end and a[end - 1] - a[start] <= mid):\n        t = end - start - 1\n        count += (t * (t + 1) \/\/ 2)\n    if (count >= need):\n        return True\n    else:\n        return False\n\n\ndef findMedian(a):\n    n = len(a)\n    low = 0\n    high = a[n - 1] - a[0]\n    while (low <= high):\n        mid = (low + high) \/\/ 2\n        if (possible(mid, a)):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return high + 1\n","test":"\nif __name__ == \"__main__\":\n    a = [1, 7, 5, 2]\n    a .sort()\n    print(findMedian(a))\n","output":"3\n","fn_call":"findMedian"}
{"text":"print all strings from array a [ ] having all strings from array b [ ] as subsequence | function to find strings from a [ ] having all strings in b [ ] as subsequence ; calculate respective sizes ; stores the answer ; stores the frequency of each character in strings of a [ ] ; compute the frequencies of characters of all strings ; stores the frequency of each character in strings of b [ ] each character of a string in b [ ] ; if the frequency of a character in b [ ] exceeds that in a [ ] ; a string exists in b [ ] which is not a proper subset of a [ i ] ; if all strings in b [ ] are proper subset of a [ ] ; push the string in resultant vector ; if any string is found ; print those strings ; otherwise ; ","context":"","code":"def UniversalSubset(A, B):\n    n1 = len(A)\n    n2 = len(B)\n    res = []\n    A_freq = [[0 for x in range(26)]for y in range(n1)]\n    for i in range(n1):\n        for j in range(len(A[i])):\n            A_freq[i][ord(A[i][j]) - ord('a')] += 1\n    B_freq = [0] * 26\n    for i in range(n2):\n        arr = [0] * 26\n        for j in range(len(B[i])):\n            arr[ord(B[i][j]) - ord('a')] += 1\n            B_freq[ord(B[i][j]) - ord('a')] = max(B_freq[ord(B[i][j]\n                                                             ) - ord('a')], arr[ord(B[i][j]) - ord('a')])\n    for i in range(n1):\n        flag = 0\n        for j in range(26):\n            if (A_freq[i][j] < B_freq[j]):\n                flag = 1\n                break\n        if (flag == 0):\n            res .append(A[i])\n    if (len(res)):\n        for i in range(len(res)):\n            for j in range(len(res[i])):\n                print(res[i][j], end=\"\")\n    else:\n        print(-1, end=\"\")\n","test":"\nif __name__ == '__main__':\n    A = [\"geeksforgeeks\", \"topcoder\", \"leetcode\"]\n    B = [\"geek\", \"ee\"]\n    UniversalSubset(A, B)\n","output":"geeksforgeeks","fn_call":"UniversalSubset"}
{"text":"closest pair in an array such that one number is multiple of the other | python3 program for the above approach ; function to find the minimum distance pair where one is the multiple of the other ; initialize the variables ; iterate for all the elements ; loop to make pairs ; check for minimum distance ; check if one is a multiple of other ; update the distance ; store indexes ; if no such pair exists ; print the answer ; ","context":"\nimport sys\n\n","code":"def findPair(a, n):\n    min_dist = sys .maxsize\n    index_a = -1\n    index_b = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (j - i < min_dist):\n                if ((a[i] % a[j] == 0) or (a[j] % a[i] == 0)):\n                    min_dist = j - i\n                    index_a = i\n                    index_b = j\n    if (index_a == -1):\n        print(\"-1\")\n    else:\n        print(\"(\", a[index_a], \", \", a[index_b], \")\")\n","test":"\na = [2, 3, 4, 5, 6]\nn = len(a)\nfindPair(a, n)\n","output":"( 2 ,  4 )\n","fn_call":"findPair"}
{"text":"print all numbers in given range having digits in strictly increasing order | function to print all numbers in the range [ l , r ] having digits in strictly increasing order ; iterate over the range ; iterate over the digits ; check if the current digit is >= the previous digit ; if the digits are in ascending order ; ","context":"","code":"def printNum(L, R):\n    for i in range(L, R + 1):\n        temp = i\n        c = 10\n        flag = 0\n        while (temp > 0):\n            if (temp % 10 >= c):\n                flag = 1\n                break\n            c = temp % 10\n            temp \/\/= 10\n        if (flag == 0):\n            print(i, end=\" \")\n","test":"\nL = 10\nR = 15\nprintNum(L, R)\n","output":"12 13 14 15 ","fn_call":"printNum"}
{"text":"find the missing number in unordered arithmetic progression | python3 program for the above approach ; function to find the missing element ; fix left and right boundary for binary search ; find index of middle element ; check if the element just after the middle element is missing ; check if the element just before mid is missing ; check if the elements till mid follow the ap , then recur for right half ; else recur for left half ; function to find the missing element in ap series ; sort the array arr [ ] ; calculate common difference ; binary search for the missing ; ","context":"\nimport sys\n\n","code":"def findMissing(arr, left, right, diff):\n    if (right <= left):\n        return sys .maxsize\n    mid = left + (right - left) \/\/ 2\n    if (arr[mid + 1] - arr[mid] != diff):\n        return (arr[mid] + diff)\n    if (mid > 0 and arr[mid] - arr[mid - 1] != diff):\n        return (arr[mid - 1] + diff)\n    if (arr[mid] == arr[0] + mid * diff):\n        return findMissing(arr, mid + 1, right, diff)\n    return findMissing(arr, left, mid - 1, diff)\n\n\ndef missingElement(arr, n):\n    arr .sort()\n    diff = (arr[n - 1] - arr[0]) \/\/ n\n    return findMissing(arr, 0, n - 1, diff)\n","test":"\narr = [2, 8, 6, 10]\nn = len(arr)\nprint(missingElement(arr, n))\n","output":"4\n","fn_call":"missingElement"}
{"text":"floor value kth root of a number using recursive binary search | function to calculate x raised to the power y in o ( logn ) ; function to find the kth root of the number n using bs ; if the range is still valid ; find the mid - value of range ; base case ; condition to check if the left search space is useless ; ","context":"","code":"def power(x, y):\n    if (y == 0):\n        return 1\n    temp = power(x, y \/\/ 2)\n    if (y % 2 == 0):\n        return temp * temp\n    else:\n        return x * temp * temp\n\n\ndef nthRootSearch(low, high, N, K):\n    if (low <= high):\n        mid = (low + high) \/\/ 2\n        if ((power(mid, K) <= N) and (power(mid + 1, K) > N)):\n            return mid\n        elif (power(mid, K) < N):\n            return nthRootSearch(mid + 1, high, N, K)\n        else:\n            return nthRootSearch(low, mid - 1, N, K)\n    return low\n","test":"\nN = 16\nK = 4\nprint(nthRootSearch(0, N, N, K))\n","output":"2\n","fn_call":"nthRootSearch"}
{"text":"count of subsets having sum of min and max element less than k | function that return the count of subset such that min ( s ) + max ( s ) < k ; sorting the array ; ans stores total number of subsets ; add all possible subsets between i and j ; decrease the sum ; ","context":"","code":"def get_subset_count(arr, K, N):\n    arr .sort()\n    left = 0\n    right = N - 1\n    ans = 0\n    while (left <= right):\n        if (arr[left] + arr[right] < K):\n            ans += 1 << (right - left)\n            left += 1\n        else:\n            right -= 1\n    return ans\n","test":"\narr = [2, 4, 5, 7]\nK = 8\nprint(get_subset_count(arr, K, 4))\n","output":"4\n","fn_call":"get_subset_count"}
{"text":"minimize the maximum difference of adjacent elements after at most k insertions | python3 program to find the minimum of maximum difference between adjacent elements after at most k insertions ; calculate the maximum adjacent difference ; if the maximum adjacent difference is already zero ; best and worst specifies range of the maximum adjacent difference ; to store the no of insertions required for respective values of mid ; if the number of insertions required exceeds k ; otherwise ; ","context":"","code":"def minMaxDiff(arr, n, k):\n    max_adj_dif = float('-inf')\n    for i in range(n - 1):\n        max_adj_dif = max(max_adj_dif, abs(arr[i] - arr[i + 1]))\n    if (max_adj_dif == 0):\n        return 0\n    best = 1\n    worst = max_adj_dif\n    while (best < worst):\n        mid = (best + worst) \/\/ 2\n        required = 0\n        for i in range(n - 1):\n            required += (abs(arr[i] - arr[i + 1]) - 1) \/\/ mid\n        if (required > k):\n            best = mid + 1\n        else:\n            worst = mid\n    return worst\n","test":"\narr = [3, 12, 25, 50]\nn = len(arr)\nk = 7\nprint(minMaxDiff(arr, n, k))\n","output":"5\n","fn_call":"minMaxDiff"}
{"text":"check if minimum element in array is less than or equals half of every other element | python3 implementation to check if the minimum element in the array is greater than or equal to half of every other element ; function to check if the minimum element in the array is greater than or equal to half of every other element ; initialise the variables to store smallest and second smallest ; check if current element is smaller than smallest , the current smallest will become secondsmallest and current element will be the new smallest ; check if current element is smaller than secondsmallest simply update the latter ; ","context":"\nimport math\n\n","code":"def checkMin(arr, n):\n    smallest = math .inf\n    secondSmallest = math .inf\n    for i in range(n):\n        if (arr[i] < smallest):\n            secondSmallest = smallest\n            smallest = arr[i]\n        elif (arr[i] < secondSmallest):\n            secondSmallest = arr[i]\n    if (2 * smallest <= secondSmallest):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\nif __name__ == '__main__':\n    arr = [2, 3, 4, 5]\n    n = len(arr)\n    checkMin(arr, n)\n","output":"No\n","fn_call":"checkMin"}
{"text":"largest and smallest fibonacci numbers in an array | python 3 program to find minimum and maximum fibonacci number in given array ; function to create hash table to check fibonacci numbers ; insert initial two numbers in the hash table ; sum of previous two numbers ; update the variable each time ; function to find minimum and maximum fibonacci number in given array ; find maximum value in the array ; creating a set containing all fibonacci numbers up to maximum value in the array ; for storing the minimum and maximum fibonacci number ; check if current element is a fibonacci number ; update the maximum and minimum accordingly ; ","context":"\nimport sys\n\n","code":"def createHash(hash, maxElement):\n    prev = 0\n    curr = 1\n    hash .add(prev)\n    hash .add(curr)\n    while (curr <= maxElement):\n        temp = curr + prev\n        hash .add(temp)\n        prev = curr\n        curr = temp\n\n\ndef fibonacci(arr, n):\n    max_val = max(arr)\n    hash = set()\n    createHash(hash, max_val)\n    minimum = sys .maxsize\n    maximum = -sys .maxsize - 1\n    for i in range(n):\n        if (arr[i] in hash):\n            minimum = min(minimum, arr[i])\n            maximum = max(maximum, arr[i])\n    print(minimum, end=\", \")\n    print(maximum)\n","test":"\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    n = len(arr)\n    fibonacci(arr, n)\n","output":"1, 5\n","fn_call":"fibonacci"}
{"text":"longest substring with k unique characters using binary search | function that returns true if there is a sub of length len with <= k unique characters ; size of the ; map to store the characters and their frequency ; update the map for the first sub ; check for the rest of the subs ; add the new character ; remove the first character of the previous window ; update the map ; function to return the length of the longest sub which has k unique characters ; check if the complete contains k unique characters ; size of the ; apply binary search ; ","context":"","code":"def isValidLen(s, lenn, k):\n    n = len(s)\n    mp = dict()\n    right = 0\n    while (right < lenn):\n        mp[s[right]] = mp .get(s[right], 0) + 1\n        right += 1\n    if (len(mp) <= k):\n        return True\n    while (right < n):\n        mp[s[right]] = mp .get(s[right], 0) + 1\n        mp[s[right - lenn]] -= 1\n        if (mp[s[right - lenn]] == 0):\n            del mp[s[right - lenn]]\n        if (len(mp) <= k):\n            return True\n        right += 1\n    return len(mp) <= k\n\n\ndef maxLenSubStr(s, k):\n    uni = dict()\n    for x in s:\n        uni[x] = 1\n    if (len(uni) < k):\n        return -1\n    n = len(s)\n    lo = -1\n    hi = n + 1\n    while (hi - lo > 1):\n        mid = lo + hi >> 1\n        if (isValidLen(s, mid, k)):\n            lo = mid\n        else:\n            hi = mid\n    return lo\n","test":"\ns = \"aabacbebebe\"\nk = 3\nprint(maxLenSubStr(s, k))\n","output":"7\n","fn_call":"maxLenSubStr"}
{"text":"largest area square in an array when elements can be shuffled | function that returns true if it is possible to make a square with side equal to l ; to store the count of elements greater than or equal to l ; increment the count ; if the count becomes greater than or equal to l ; function to return the maximum area of the square that can be obtained ; if square is possible with side length m ; try to find a square with smaller side length ; return the area ; ","context":"","code":"def isSquarePossible(arr, n, l):\n    cnt = 0\n    for i in range(n):\n        if arr[i] >= l:\n            cnt += 1\n        if cnt >= l:\n            return True\n    return False\n\n\ndef maxArea(arr, n):\n    l, r = 0, n\n    len = 0\n    while l <= r:\n        m = l + ((r - l) \/\/ 2)\n        if isSquarePossible(arr, n, m):\n            len = m\n            l = m + 1\n        else:\n            r = m - 1\n    return (len * len)\n","test":"\narr = [1, 3, 4, 5, 5]\nn = len(arr)\nprint(maxArea(arr, n))\n","output":"9\n","fn_call":"maxArea"}
{"text":"check duplicates in a stream of strings | function to insert the names and check whether they appear for the first time ; to store the names of the employees ; if current name is appearing for the first time ; ","context":"","code":"def insertNames(arr, n):\n    string = set()\n    for i in range(n):\n        if arr[i]not in string:\n            print(\"No\")\n            string .add(arr[i])\n        else:\n            print(\"Yes\")\n","test":"\nif __name__ == \"__main__\":\n    arr = [\"geeks\", \"for\", \"geeks\"]\n    n = len(arr)\n    insertNames(arr, n)\n","output":"No\nNo\nYes\n","fn_call":"insertNames"}
{"text":"count the triplets such that a [ i ] < b [ j ] < c [ k ] | function to return the count of elements in arr [ ] which are less than the given key ; modified binary search ; function to return the count of elements in arr [ ] which are greater than the given key ; modified binary search ; function to return the count of the required triplets ; sort all three arrays ; iterate for all the elements of array b ; count of elements in a [ ] which are less than the chosen element from b [ ] ; count of elements in c [ ] which are greater than the chosen element from b [ ] ; update the count ; ","context":"","code":"def countLessThan(arr, n, key):\n    l = 0\n    r = n - 1\n    index = -1\n    while (l <= r):\n        m = (l + r) \/\/ 2\n        if (arr[m] < key):\n            l = m + 1\n            index = m\n        else:\n            r = m - 1\n    return (index + 1)\n\n\ndef countGreaterThan(arr, n, key):\n    l = 0\n    r = n - 1\n    index = -1\n    while (l <= r):\n        m = (l + r) \/\/ 2\n        if (arr[m] <= key):\n            l = m + 1\n        else:\n            r = m - 1\n            index = m\n    if (index == -1):\n        return 0\n    return (n - index)\n\n\ndef countTriplets(n, a, b, c):\n    a .sort\n    b .sort()\n    c .sort()\n    count = 0\n    for i in range(n):\n        current = b[i]\n        a_index = -1\n        c_index = -1\n        low = countLessThan(a, n, current)\n        high = countGreaterThan(c, n, current)\n        count += (low * high)\n    return count\n","test":"\nif __name__ == \"__main__\":\n    a = [1, 5]\n    b = [2, 4]\n    c = [3, 6]\n    size = len(a)\n    print(countTriplets(size, a, b, c))\n","output":"3\n","fn_call":"countTriplets"}
{"text":"cost to balance the parentheses | python 3 code to calculate the minimum cost to make the given parentheses balanced ; to store absolute count of balanced and unbalanced parenthesis ; o ( open bracket ) stores count of ' ( ' and c ( close bracket ) stores count of ') ; ","context":"","code":"def costToBalance(s):\n    if (len(s) == 0):\n        print(0)\n    ans = 0\n\n    o = 0\n    c = 0\n    for i in range(len(s)):\n        if (s[i] == '('):\n            o += 1\n        if (s[i] == ')'):\n            c += 1\n    if (o != c):\n        return -1\n    a = [0 for i in range(len(s))]\n    if (s[0] == '('):\n        a[0] = 1\n    else:\n        a[0] = -1\n    if (a[0] < 0):\n        ans += abs(a[0])\n    for i in range(1, len(s)):\n        if (s[i] == '('):\n            a[i] = a[i - 1] + 1\n        else:\n            a[i] = a[i - 1] - 1\n        if (a[i] < 0):\n            ans += abs(a[i])\n    return ans\n","test":"\nif __name__ == '__main__':\n    s = \")))(((\"\n    print(costToBalance(s))\n    s = \"))((\"\n    print(costToBalance(s))\n","output":"9\n4\n","fn_call":"costToBalance"}
{"text":"middle of three using minimum comparisons | function to find the middle of three number ; x is positive if a is greater than b . x is negative if b is greater than a . ; similar to x ; similar to x and y . ; checking if b is middle ( x and y both are positive ) ; checking if c is middle ( x and z both are positive ) ; ","context":"","code":"def middleOfThree(a, b, c):\n    x = a - b\n    y = b - c\n    z = a - c\n    if x * y > 0:\n        return b\n    elif (x * z > 0):\n        return\n    else:\n        return a\n","test":"\na = 20\nb = 30\nc = 40\nprint(middleOfThree(a, b, c))\n","output":"30\n","fn_call":"middleOfThree"}
{"text":"find four missing numbers in an array containing elements from 1 to n | finds missing 4 numbers in o ( n ) time and o ( 1 ) auxiliary space . ; to keep track of 4 possible numbers greater than length of input array in java , helper is automatically initialized as 0. ; traverse the input array and mark visited elements either by marking them as negative in arr [ ] or in helper [ ] . ; if element is smaller than or equal to length , mark its presence in arr [ ] ; mark presence in helper [ ] ; print all those elements whose presence is not marked . ; ","context":"","code":"def missing4(arr):\n    helper = [0] * 4\n    for i in range(0, len(arr)):\n        temp = abs(arr[i])\n        if (temp <= len(arr)):\n            arr[temp - 1] = arr[temp - 1] * (-1)\n        elif (temp > len(arr)):\n            if (temp % len(arr)):\n                helper[temp % len(arr) - 1] = -1\n            else:\n                helper[(temp % len(arr)) + len(arr) - 1] = -1\n    for i in range(0, len(arr)):\n        if (arr[i] > 0):\n            print((i + 1), end=\" \")\n    for i in range(0, len(helper)):\n        if (helper[i] >= 0):\n            print((len(arr) + i + 1), end=\" \")\n","test":"\narr = [1, 7, 3, 12, 5, 10, 8, 4, 9]\nmissing4(arr)\n","output":"2 6 11 13 ","fn_call":"missing4"}
{"text":"permutation present at the middle of lexicographic ordering of permutations of at most length n made up integers up to k | function that finds the middle the lexicographical smallest sequence ; if k is even ; first element is k \/ 2 ; remaining elements of the sequence are all integer k ; stores the sequence when k is odd ; iterate over the range [ 0 , n \/ 2 ] ; check if the sequence ends with in 1 or not ; remove the sequence ending in 1 ; if it doesn 't end in 1 ; decrement by 1 ; insert k to the sequence till its size is n ; prthe sequence stored in the vector ; ","context":"","code":"def lexiMiddleSmallest(K, N):\n    if (K % 2 == 0):\n        print(K \/\/ 2, end=\" \")\n        for i in range(N - 1):\n            print(K, end=\" \")\n        print()\n        return\n    a = [(K + 1) \/\/ 2] * (N)\n    for i in range(N \/\/ 2):\n        if (a[-1] == 1):\n            del a[-1]\n        else:\n            a[-1] -= 1\n            while (len(a) < N):\n                a .append(K)\n    for i in a:\n        print(i, end=\" \")\n    print()\n","test":"\nif __name__ == '__main__':\n    K, N = 2, 4\n    lexiMiddleSmallest(K, N)\n","output":"1 2 2 2 \n","fn_call":"lexiMiddleSmallest"}
{"text":"remaining array element after repeated removal of the smallest element from pairs with absolute difference of 2 or 0 | function to find the last remaining array element after repeatedly removing the smallest from pairs having absolute difference 2 or 0 ; sort the given array in ascending order ; traverse the array ; if difference between adjacent elements is not equal to 0 or 2 ; if operations can be performed ; ","context":"","code":"def findLastElement(arr, N):\n    arr .sort()\n    i = 0\n    for i in range(1, N):\n        if (arr[i] - arr[i - 1] != 0 and arr[i] - arr[i - 1] != 2):\n            print(\"-1\")\n            return\n    print(arr[N - 1])\n","test":"\nif __name__ == '__main__':\n    arr = [2, 4, 6, 8, 0, 8]\n    N = len(arr)\n    findLastElement(arr, N)\n","output":"8\n","fn_call":"findLastElement"}
{"text":"maximize count of subsets into which the given array can be split such that it satisfies the given condition | function to count maximum subsets into which the given array can be split such that it satisfies the given condition ; sort the array in decreasing order ; stores count of subsets possible ; stores count of elements in current subset ; traverse the array arr [ ] ; update size ; if product of the smallest element present in the current subset and size of current subset is >= k ; update maxsub ; update size ; ","context":"","code":"def maxDivisions(arr, N, X):\n    arr .sort(reverse=True)\n    maxSub = 0\n    size = 0\n    for i in range(N):\n        size += 1\n        if (arr[i] * size >= X):\n            maxSub += 1\n            size = 0\n    print(maxSub)\n","test":"\nif __name__ == \"__main__\":\n    arr = [1, 3, 3, 7]\n    N = len(arr)\n    X = 3\n    maxDivisions(arr, N, X)\n","output":"3\n","fn_call":"maxDivisions"}
{"text":"maximize sum of second minimums in all quadruples of a given array | function to find maximum possible sum of second minimums in each quadruple ; sort the array ; add the second minimum ; print maximum possible sum ; ","context":"","code":"def maxPossibleSum(arr, N):\n    arr .sort()\n    sum = 0\n    j = N - 3\n    while (j >= 0):\n        sum += arr[j]\n        j -= 3\n    print(sum)\n","test":"\nif __name__ == \"__main__\":\n    arr = [7, 4, 5, 2, 3, 1, 5, 9]\n    N = 8\n    maxPossibleSum(arr, N)\n","output":"8\n","fn_call":"maxPossibleSum"}
{"text":"count pairs ( i , j ) from given array such that i k * arr [ j ] | function to find the count required pairs ; stores count of pairs ; traverse the array ; check if the condition is satisfied or not ; ","context":"","code":"def getPairs(arr, N, K):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (arr[i] > K * arr[i + 1]):\n                count += 1\n    print(count)\n","test":"\nif __name__ == '__main__':\n    arr = [5, 6, 2, 1]\n    N = len(arr)\n    K = 2\n    getPairs(arr, N, K)\n","output":"2\n","fn_call":"getPairs"}
{"text":"count pairs ( i , j ) from given array such that i k * arr [ j ] | function to merge two sorted arrays ; i : index to left subarray ; j : index to right subarray ; stores count of pairs that satisfy the given condition ; traverse to check for the valid conditions ; if condition satisfies ; all elements in the right side of the left subarray also satisfies ; sort the two given arrays and store in the resultant array ; elements which are left in the left subarray ; elements which are left in the right subarray ; return the count obtained ; function to partition array into two halves ; same as ( l + r ) \/ 2 , but avoids overflow for large l and h ; sort first and second halves ; call the merging function ; function to print the count of required pairs using merge sort ; ","context":"","code":"def merge(arr, temp, l, m, r, K):\n    i = l\n    j = m + 1\n    cnt = 0\n    for l in range(m + 1):\n        found = False\n        while (j <= r):\n            if (arr[i] >= K * arr[j]):\n                found = True\n            else:\n                break\n            j += 1\n        if (found):\n            cnt += j - (m + 1)\n            j -= 1\n    k = l\n    i = l\n    j = m + 1\n    while (i <= m and j <= r):\n        if (arr[i] <= arr[j]):\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp[k] = arr[j]\n            k += 1\n            j += 1\n    while (i <= m):\n        temp[k] = arr[i]\n        k += 1\n        i += 1\n    while (j <= r):\n        temp[k] = arr[j]\n        k += 1\n        j += 1\n    for i in range(l, r + 1):\n        arr[i] = temp[i]\n    return cnt\n\n\ndef mergeSortUtil(arr, temp, l, r, K):\n    cnt = 0\n    if (l < r):\n        m = (l + r) \/\/ 2\n        cnt += mergeSortUtil(arr, temp, l, m, K)\n        cnt += mergeSortUtil(arr, temp, m + 1, r, K)\n        cnt += merge(arr, temp, l, m, r, K)\n    return cnt\n\n\ndef mergeSort(arr, N, K):\n    temp = [0] * N\n    print(mergeSortUtil(arr, temp, 0, N - 1, K))\n","test":"\narr = [5, 6, 2, 5]\nN = len(arr)\nK = 2\nmergeSort(arr, N, K)\n","output":"2\n","fn_call":"mergeSort"}
{"text":"minimize consecutive removals of elements of the same type to empty given array | function to count minimum consecutive removals of elements of the same type ; sort the array ; stores the maximum element present in the array ; stores the sum of array ; calculate sum of array ; ","context":"","code":"def minRemovals(A, N):\n    A .sort()\n    mx = A[N - 1]\n    sum = 1\n    for i in range(0, N):\n        sum += A[i]\n    if ((sum - mx) >= mx):\n        print(0, end=\"\")\n    else:\n        print(2 * mx - sum, end=\"\")\n","test":"\nif __name__ == \"__main__\":\n    A = [3, 3, 2]\n    N = len(A)\n    minRemovals(A, N)\n","output":"0","fn_call":"minRemovals"}
{"text":"rearrange given array such that no array element is same as its index | function to rearrange the array a [ ] such that none of the array elements is same as its index ; sort the array ; traverse the indices [ 0 , n - 2 ] of the given array ; check if the current element is equal to its index ; if found to be true , swap current element with the next element ; check if the last element is same as its index ; if found to be true , swap current element with the previous element ; prthe modified array ; ","context":"","code":"def rearrangeArray(a, n):\n    a = sorted(a)\n    for i in range(n - 1):\n        if (a[i] == i + 1):\n            a[i], a[i + 1] = a[i + 1], a[i]\n    if (a[n - 1] == n):\n        a[n - 1], a[n - 2] = a[n - 2], a[n - 1]\n    for i in range(n):\n        print(a[i], end=\" \")\n","test":"\nif __name__ == '__main__':\n    arr = [1, 5, 3, 2, 4]\n    N = len(arr)\n    rearrangeArray(arr, N)\n","output":"2 1 4 5 3 ","fn_call":"rearrangeArray"}
{"text":"count minimum number of moves to front or end to sort an array | function that counts the minimum moves required to covert arr [ ] to brr [ ] ; base case ; if arr [ i ] < arr [ j ] ; include the current element ; otherwise , excluding the current element ; function that counts the minimum moves required to sort the array ; if both the arrays are equal ; no moves required ; otherwise ; print minimum operations required ; ","context":"","code":"def minOperations(arr1, arr2, i, j):\n    if arr1 == arr2:\n        return 0\n    if i >= len(arr1) or j >= len(arr2):\n        return 0\n    if arr1[i] < arr2[j]:\n        return 1 + minOperations(arr1, arr2, i + 1, j + 1)\n    return max(\n        minOperations(\n            arr1,\n            arr2,\n            i,\n            j + 1),\n        minOperations(\n            arr1,\n            arr2,\n            i + 1,\n            j))\n\n\ndef minOperationsUtil(arr):\n    brr = sorted(arr)\n    if (arr == brr):\n        print(\"0\")\n    else:\n        print(minOperations(arr, brr, 0, 0))\n","test":"\narr = [4, 7, 2, 3, 9]\nminOperationsUtil(arr)\n","output":"2\n","fn_call":"minOperationsUtil"}
{"text":"check if a string can be transformed to another by sorting substrings | function to check if str1 can be transformed to t by sorting substrings ; occur [ i ] stores the indices of ( ' a ' + i ) in string s ; idx [ i ] stores the next available index of ( ' a ' + i ) in occur [ i ] ; if this is not available anymore ; conversion not possible ; if one of the smaller characters is available and occurs before ; conversion not possible ; print the answer ; ","context":"","code":"def canTransform(s, t):\n    n = len(s)\n    occur = [[]for i in range(26)]\n    for x in range(n):\n        ch = ord(s[x]) - ord('a')\n        occur[ch].append(x)\n    idx = [0] * (26)\n    poss = True\n    for x in range(n):\n        ch = ord(t[x]) - ord('a')\n        if (idx[ch] >= len(occur[ch])):\n            poss = False\n            break\n        for small in range(ch):\n            if (idx[small] < len(occur[small]) and occur[small]\n                    [idx[small]] < occur[ch][idx[ch]]):\n                poss = False\n                break\n        idx[ch] += 1\n    if (poss):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\nif __name__ == '__main__':\n    s = \"hdecb\"\n    t = \"cdheb\"\n    canTransform(s, t)\n","output":"Yes\n","fn_call":"canTransform"}
{"text":"check whether two strings can be made equal by reversing substring of equal length from both strings | function to count inversion count of the string ; for storing frequency ; we 'll add all the characters  which are less than the ith  character before i. ; adding the count to inversion count ; updating the character in the frequency array ; function to check whether any of the string have a repeated character ; function to check whether the string s1 and s2 can be made equal by reversing sub strings ofsame size in both strings ; frequency array to check whether both string have same character or not ; adding the frequency ; ; if the character is not in s1 ; decrementing the frequency ; if both string does not have same characters or not ; finding inversion count of both strings ; if inversion count is same , or have same parity or if any of the string have a repeated character then the answer is yes else no ; ","context":"","code":"def inversionCount(s):\n    freq = [0 for _ in range(26)]\n    inv = 0\n    for i in range(len(s)):\n        temp = 0\n        for j in range(ord(s[i]) - ord('a')):\n            temp += freq[j]\n        inv += (i - temp)\n        freq[ord(s[i]) - ord('a')] += 1\n    return inv\n\n\ndef haveRepeated(S1, S2):\n    freq = [0 for _ in range(26)]\n    for i in range(len(S1)):\n        if freq[ord(S1[i]) - ord('a')] > 0:\n            return 1\n        freq[ord(S1[i]) - ord('a')] += 1\n    for i in range(26):\n        freq[i] = 0\n    for i in range(len(S2)):\n        if freq[ord(S2[i]) - ord('a')] > 0:\n            return 1\n        freq[ord(S2[i]) - ord('a')] += 1\n    return 0\n\n\ndef checkToMakeEqual(S1, S2):\n    freq = [0 for _ in range(26)]\n    for i in range(len(S1)):\n        freq[ord(S1[i]) - ord('a')] += 1\n    flag = 0\n    for i in range(len(S2)):\n        if freq[ord(S2[i]) - ord('a')] == 0:\n            flag = 1\n            break\n        freq[ord(S2[i]) - ord('a')] -= 1\n    if flag == 1:\n        print(\"No\")\n        return\n    invCount1 = inversionCount(S1)\n    invCount2 = inversionCount(S2)\n    if ((invCount1 == invCount2) or ((invCount1 % 2) ==\n                                     (invCount2 % 2)) or haveRepeated(S1, S2) == 1):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\nS1 = \"abbca\"\nS2 = \"acabb\"\ncheckToMakeEqual(S1, S2)\n","output":"Yes\n","fn_call":"checkToMakeEqual"}
{"text":"sort a bitonic array | python3 program for the above approach ; function to sort bitonic array in constant space ; initialize thevalue of k ; in each iteration compare elements k distance apart and swap it they are not in order ; k is reduced to half after every iteration ; print the array elements ; ","context":"\nimport math\n\n","code":"def sortArr(a, n):\n    k = int(math .log(n, 2))\n    k = int(pow(2, k))\n    while (k > 0):\n        i = 0\n        while i + k < n:\n            if a[i] > a[i + k]:\n                a[i], a[i + k] = a[i + k], a[i]\n            i = i + 1\n        k = k \/\/ 2\n    for i in range(n):\n        print(a[i], end=\" \")\n","test":"\na = [5, 20, 30, 40, 36, 33, 25, 15, 10]\nn = len(a)\nsortArr(a, n)\n","output":"5 10 15 20 25 30 33 36 40 ","fn_call":"sortArr"}
{"text":"split array into k subsets to maximize their sum of maximums and minimums | function that prints the maximum sum possible ; find elements in each group ; sort all elements in non - descending order ; add k largest elements ; for sum of minimum elements from each subset ; printing the maximum sum ; ","context":"","code":"def maximumSum(arr, n, k):\n    elt = n \/\/ k\n    sum = 0\n    arr .sort()\n    count = 0\n    i = n - 1\n    while (count < k):\n        sum += arr[i]\n        i -= 1\n        count += 1\n    count = 0\n    i = 0\n    while (count < k):\n        sum += arr[i]\n        i += elt - 1\n        count += 1\n    print(sum)\n","test":"\nif __name__ == '__main__':\n    Arr = [1, 13, 7, 17, 6, 5]\n    K = 2\n    size = len(Arr)\n    maximumSum(Arr, size, K)\n","output":"37\n","fn_call":"maximumSum"}
{"text":"minimize sum of smallest elements from k subsequences of length l | function to find the minimum sum ; sort the array ; calculate sum of smallest k elements ; return the sum ; ","context":"","code":"def findMinSum(arr, K, L, size):\n    if (K * L > size):\n        return -1\n    minsum = 0\n    arr .sort()\n    for i in range(K):\n        minsum += arr[i]\n    return minsum\n","test":"\nif __name__ == '__main__':\n    arr = [2, 15, 5, 1, 35, 16, 67, 10]\n    K = 3\n    L = 2\n    length = len(arr)\n    print(findMinSum(arr, K, L, length))\n","output":"8\n","fn_call":"findMinSum"}
{"text":"kth smallest or largest element in unsorted array | set 4 | function to find the kth smallest element in unsorted array ; initialize the max element as 0 ; iterate arr [ ] and find the maximum element in it ; frequency array to store the frequencies ; counter variable ; counting the frequencies ; iterate through the freq [ ] ; check if num is present in the array ; increment the counter with the frequency of num ; checking if we have reached the kth smallest element ; return the kth smallest element ; ","context":"","code":"def findKthSmallest(arr, n, k):\n    max = 0\n    for i in range(n):\n        if (arr[i] > max):\n            max = arr[i]\n    counter = [0] * (max + 1)\n    smallest = 0\n    for i in range(n):\n        counter[arr[i]] += 1\n    for num in range(1, max + 1):\n        if (counter[num] > 0):\n            smallest += counter[num]\n        if (smallest >= k):\n            return num\n","test":"\nif __name__ == \"__main__\":\n    arr = [7, 1, 4, 4, 20, 15, 8]\n    N = len(arr)\n    K = 5\n    print(findKthSmallest(arr, N, K))\n","output":"8\n","fn_call":"findKthSmallest"}
{"text":"generate all numbers up to n in lexicographical order | function to print all the numbers up to n in lexicographical order ; ","context":"","code":"def lexNumbers(n):\n    s = []\n    for i in range(1, n + 1):\n        s .append(str(i))\n    s .sort()\n    ans = []\n    for i in range(n):\n        ans .append(int(s[i]))\n    for i in range(n):\n        print(ans[i], end=' ')\n","test":"\nif __name__ == \"__main__\":\n    n = 15\n    lexNumbers(n)\n","output":"1 10 11 12 13 14 15 2 3 4 5 6 7 8 9 ","fn_call":"lexNumbers"}
{"text":"sort matrix in alternating ascending and descending order rowwise | python3 implementation to print row of matrix in ascending or descending order alternatively ; iterate matrix rowwise ; sort even rows in ascending order ; compare adjacent elements ; swap adjacent element ; sort even rows in descending order ; compare adjacent elements ; swap adjacent element ; printing the final output ; ","context":"\nN = 4\n\n","code":"def func(a):\n    for i in range(N):\n        if i % 2 == 0:\n            for j in range(N):\n                for k in range(j + 1, N):\n                    if a[i][j] > a[i][k]:\n                        temp = a[i][j]\n                        a[i][j] = a[i][k]\n                        a[i][k] = temp\n        else:\n            for j in range(N):\n                for k in range(j + 1, N):\n                    if a[i][j] < a[i][k]:\n                        temp = a[i][j]\n                        a[i][j] = a[i][k]\n                        a[i][k] = temp\n    for i in range(N):\n        for j in range(N):\n            print(a[i][j], end=\" \")\n        print()\n","test":"\nif __name__ == '__main__':\n    a = [[5, 7, 3, 4], [9, 5, 8, 2], [6, 3, 8, 1], [5, 8, 9, 3]]\n    func(a)\n","output":"3 4 5 7 \n9 8 5 2 \n1 3 6 8 \n9 8 5 3 \n","fn_call":"func"}
{"text":"find weight of mst in a complete graph with edge | to store the edges of the given graph ; a utility function to perform dfs traversal ; check those vertices which are stored in the set ; vertices are included if the weight of edge is 0 ; a utility function to find the weight of minimum spanning tree ; to count the connected components ; inserting the initial vertices in the set ; traversing vertices stored in the set and run dfs traversal for each vertices ; incrementing the zero weight connected components ; dfs traversal for every vertex remove ; ","context":"\ng = [dict()for i in range(200005)]\ns = set()\nns = set()\n\n","code":"def dfs(x):\n    global s, g, ns\n    v = []\n    v .clear()\n    ns .clear()\n    for it in s:\n        if (x in g and not g[x][it]):\n            v .append(it)\n        else:\n            ns .add(it)\n    s = ns\n    for i in v:\n        dfs(i)\n\n\ndef weightOfMST(N):\n    cnt = 0\n    for i in range(1, N + 1):\n        s .add(i)\n    while (len(s) != 0):\n        cnt += 1\n        t = list(s)[0]\n        s .discard(t)\n        dfs(t)\n    print(cnt)\n","test":"\nif __name__ == '__main__':\n    N = 6\n    M = 11\n    edges = [\n        [\n            1, 3], [\n            1, 4], [\n                1, 5], [\n                    1, 6], [\n                        2, 3], [\n                            2, 4], [\n                                2, 5], [\n                                    2, 6], [\n                                        3, 4], [\n                                            3, 5], [\n                                                3, 6]]\n    for i in range(M):\n        u = edges[i][0]\n        v = edges[i][1]\n        g[u][v] = 1\n        g[v][u] = 1\n    weightOfMST(N)\n","output":"2\n","fn_call":"weightOfMST"}
{"text":"count of distinct possible pairs such that the element from a is greater than the element from b | function to return the count of pairs ; ","context":"","code":"def countPairs(A, B):\n    n = len(A)\n    A .sort()\n    B .sort()\n    ans = 0\n    for i in range(n):\n        if (A[i] > B[ans]):\n            ans += 1\n    return ans\n","test":"\nif __name__ == '__main__':\n    A = [30, 28, 45, 22]\n    B = [35, 25, 22, 48]\n    print(countPairs(A, B))\n","output":"3\n","fn_call":"countPairs"}
{"text":"maximum possible remainder when an element is divided by other element in the array | function to return the maximum mod value for any pair from the array ; find the second maximum element from the array ; ","context":"","code":"def maxMod(arr, n):\n    maxVal = max(arr)\n    secondMax = 0\n    for i in range(0, n):\n        if (arr[i] < maxVal and arr[i] > secondMax):\n            secondMax = arr[i]\n    return secondMax\n","test":"\narr = [2, 4, 1, 5, 3, 6]\nn = len(arr)\nprint(maxMod(arr, n))\n","output":"5\n","fn_call":"maxMod"}
{"text":"choose x elements from a [ ] and y elements from b [ ] which satisfy the given condition | function to that returns true if it possible to choose the elements ; if elements can 't be chosen ; sort both the arrays ; if xth smallest element of a [ ] is smaller than the yth greatest element of b [ ] ; ","context":"","code":"def isPossible(A, B, n, m, x, y):\n    if (x > n or y > m):\n        return False\n    A .sort()\n    B .sort()\n    if (A[x - 1] < B[m - y]):\n        return True\n    else:\n        return False\n","test":"\nA = [1, 1, 1, 1, 1]\nB = [2, 2]\nn = len(A)\nm = len(B)\nx = 3\ny = 1\nif (isPossible(A, B, n, m, x, y)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isPossible"}
{"text":"find minimum changes required in an array for it to contain k distinct elements | python 3 program to minimum changes required in an array for k distinct elements . ; function to minimum changes required in an array for k distinct elements . ; store the frequency of each element ; store the frequency of elements ; sort frequencies in descending order ; to store the required answer ; return the required answer ; ","context":"\nMAX = 100005\n\n","code":"def Min_Replace(arr, n, k):\n    arr .sort(reverse=False)\n    freq = [0 for i in range(MAX)]\n    p = 0\n    freq[p] = 1\n    for i in range(1, n, 1):\n        if (arr[i] == arr[i - 1]):\n            freq[p] += 1\n        else:\n            p += 1\n            freq[p] += 1\n    freq .sort(reverse=True)\n    ans = 0\n    for i in range(k, p + 1, 1):\n        ans += freq[i]\n    return ans\n","test":"\nif __name__ == '__main__':\n    arr = [1, 2, 7, 8, 2, 3, 2, 3]\n    n = len(arr)\n    k = 2\n    print(Min_Replace(arr, n, k))\n","output":"3\n","fn_call":"Min_Replace"}
{"text":"maximum number of elements without overlapping in a line | function to find maximum number of elements without overlapping in a line ; if n = 1 , then answer is one ; we can always make 1 st element to cover left segment and nth the right segment ; if left segment for ith element doesnt overlap with i - 1 th element then do left ; else try towards right if possible ; update x [ i ] to right endpoof segment covered by it ; return the required answer ; ","context":"","code":"def Segment(x, l, n):\n    if (n == 1):\n        return 1\n    ans = 2\n    for i in range(1, n - 1):\n        if (x[i] - l[i] > x[i - 1]):\n            ans += 1\n        elif (x[i] + l[i] < x[i + 1]):\n            x[i] = x[i] + l[i]\n            ans += 1\n    return ans\n","test":"\nx = [1, 3, 4, 5, 8]\nl = [10, 1, 2, 2, 5]\nn = len(x)\nprint(Segment(x, l, n))\n","output":"4\n","fn_call":"Segment"}
{"text":"delete odd and even numbers at alternate step such that sum of remaining elements is minimized | function to find the minimized sum ; if more odd elements ; sort the elements ; left - over elements ; find the sum of leftover elements ; return the sum ; if more even elements ; sort the elements ; left - over elements ; find the sum of leftover elements ; return the sum ; if same elements ; ","context":"","code":"def MinimizeleftOverSum(a, n):\n    v1, v2 = [], []\n    for i in range(n):\n        if (a[i] % 2):\n            v1 .append(a[i])\n        else:\n            v2 .append(a[i])\n    if (len(v1) > len(v2)):\n        v1 .sort()\n        v2 .sort()\n        x = len(v1) - len(v2) - 1\n        sum = 0\n        i = 0\n        while (i < x):\n            sum += v1[i]\n            i += 1\n        return sum\n    elif (len(v2) > len(v1)):\n        v1 .sort()\n        v2 .sort()\n        x = len(v2) - len(v1) - 1\n        sum = 0\n        i = 0\n        while (i < x):\n            sum += v2[i]\n            i += 1\n        return sum\n    else:\n        return 0\n","test":"\nif __name__ == \"__main__\":\n    a = [2, 2, 2, 2]\n    n = len(a)\n    print(MinimizeleftOverSum(a, n))\n","output":"6\n","fn_call":"MinimizeleftOverSum"}
{"text":"minimum operations to make frequency of all characters equal k | function to find the minimum number of operations to convert the given string ; check if n is divisible by k ; array to store frequency of characters in given string ; two arrays with number of operations required ; checking for all possibility ; ","context":"","code":"def minOperation(S, N, K):\n    if N % K:\n        print(\"Not Possible\")\n        return\n    count = [0] * 26\n    for i in range(0, N):\n        count[ord(S[i]) - 97] += 1\n    E = N \/\/ K\n    greaterE = []\n    lessE = []\n    for i in range(0, 26):\n        if count[i] < E:\n            lessE .append(E - count[i])\n        else:\n            greaterE .append(count[i] - E)\n    greaterE .sort()\n    lessE .sort()\n    mi = float('inf')\n    for i in range(0, K + 1):\n        set1, set2 = i, K - i\n        if (len(greaterE) >= set1 and len(lessE) >= set2):\n            step1, step2 = 0, 0\n            for j in range(0, set1):\n                step1 += greaterE[j]\n            for j in range(0, set2):\n                step2 += lessE[j]\n            mi = min(mi, max(step1, step2))\n    print(mi)\n","test":"\nif __name__ == \"__main__\":\n    S = \"accb\"\n    N = len(S)\n    K = 2\n    minOperation(S, N, K)\n","output":"1\n","fn_call":"minOperation"}
{"text":"minimum range increment operations to sort an array | function to find minimum range increments to sort an array ; if current element is found greater than last element increment all terms in range i + 1 to n - 1 ; mn = arr [ i ] minimum in range i to n - 1 ; ","context":"","code":"def minMovesToSort(arr, n):\n    moves = 0\n    mn = arr[n - 1]\n    for i in range(n - 1, -1, -1):\n        if (arr[i] > mn):\n            moves += arr[i] - mn\n    return moves\n","test":"\nif __name__ == \"__main__\":\n    arr = [3, 5, 2, 8, 4]\n    n = len(arr)\n    print(minMovesToSort(arr, n))\n","output":"5\n","fn_call":"minMovesToSort"}
{"text":"sort prime numbers of an array in descending order | python3 implementation of the approach ; false here indicates that it is not prime ; if prime [ p ] is not changed , then it is a prime ; update all multiples of p , set them to non - prime ; function that sorts all the prime numbers from the array in descending ; this vector will contain prime numbers to sort ; if the element is prime ; update the array elements ; ","context":"","code":"def SieveOfEratosthenes(n):\n    prime[1] = False\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n\n\ndef sortPrimes(arr, n):\n    SieveOfEratosthenes(100005)\n    v = []\n    for i in range(0, n):\n        if prime[arr[i]]:\n            v .append(arr[i])\n    v .sort(reverse=True)\n    j = 0\n    for i in range(0, n):\n        if prime[arr[i]]:\n            arr[i] = v[j]\n            j += 1\n    return arr\n","test":"\nif __name__ == \"__main__\":\n    arr = [4, 3, 2, 6, 100, 17]\n    n = len(arr)\n    prime = [True] * 100006\n    arr = sortPrimes(arr, n)\n    for i in range(0, n):\n        print(arr[i], end=\" \")\n","output":"4 17 3 6 100 2 ","fn_call":"sortPrimes"}
{"text":"pair formation such that maximum pair sum is minimized | python 3 program to divide the array into n pairs such that maximum pair is minimized ; after sorting maintain two variables i and j pointing to start and end of array such that smallest element of array pairs with largest element ; ","context":"","code":"def findOptimalPairs(arr, N):\n    arr .sort(reverse=False)\n    i = 0\n    j = N - 1\n    while (i <= j):\n        print(\"(\", arr[i], \",\", arr[j], \")\", end=\" \")\n        i += 1\n        j -= 1\n","test":"\nif __name__ == '__main__':\n    arr = [9, 6, 5, 1]\n    N = len(arr)\n    findOptimalPairs(arr, N)\n","output":"( 1 , 9 ) ( 5 , 6 ) ","fn_call":"findOptimalPairs"}
{"text":"lexicographically smallest binary string formed by flipping bits at indices not divisible k1 or k2 such that count of 1 s is always greater than 0 s from left | function to find lexicographically smallest string having number of 1 s greater than number of 0 s ; c1s and c0s stores the count of 1 s and 0 s at every position ; traverse the string s ; if the position is not divisible by k1 and k2 ; if c0s >= c1s and pos [ ] is empty then the string can 't  be formed ; if pos [ ] is not empty then flip the bit of last position present in pos [ ] ; print the result ; ","context":"","code":"def generateString(k1, k2, s):\n    s = list(s)\n    C1s = 0\n    C0s = 0\n    flag = 0\n    pos = []\n    for i in range(len(s)):\n        if (s[i] == '0'):\n            C0s += 1\n            if ((i + 1) % k1 != 0 and (i + 1) % k2 != 0):\n                pos .append(i)\n        else:\n            C1s += 1\n        if (C0s >= C1s):\n            if (len(pos) == 0):\n                print(-1)\n                flag = 1\n                break\n            else:\n                k = pos[len(pos) - 1]\n                s[k] = '1'\n                C0s -= 1\n                C1s += 1\n                pos = pos[:-1]\n    s = ''.join(s)\n    if (flag == 0):\n        print(s)\n","test":"\nif __name__ == '__main__':\n    K1 = 2\n    K2 = 4\n    S = \"11000100\"\n    generateString(K1, K2, S)\n","output":"11100110\n","fn_call":"generateString"}
{"text":"find a pair of numbers with set bit count as at most that of n and whose bitwise xor is n | python 3 program for the above approach ; function to find the pair ( x , y ) such that x xor y = n and the count of set bits in x and y is less than count of set bit in n ; stores msb ( most significant bit ) ; stores the value of x ; \/ stores the value of y ; traversing over all bits of n ; if ith bit of n is 0 ; \/ set ith bit of x to 1 ; set ith bit of y to 1 ; print answer ; ","context":"\nimport math\n\n","code":"def maximizeProduct(N):\n    MSB = (int)(math .log2(N))\n    X = 1 << MSB\n    Y = N - (1 << MSB)\n    for i in range(MSB):\n        if (not (N & (1 << i))):\n            X += 1 << i\n            Y += 1 << i\n    print(X, Y)\n","test":"\nif __name__ == \"__main__\":\n    N = 45\n    maximizeProduct(N)\n","output":"50 31\n","fn_call":"maximizeProduct"}
{"text":"count of numbers in range [ l , r ] having sum of digits of its square equal to square of sum of digits | python 3 program for the above approach ; function to check if the number is valid ; sum of digits of num ; squared number ; sum of digits of ( num * num ) ; function to convert a string to an integer ; function to generate all possible strings of length len ; desired string ; take only valid numbers ; recurse for all possible digits ; function to calculate unique numbers in range [ l , r ] ; initialize a variable to store the answer ; calculate the maximum possible length ; set to store distinct valid numbers ; generate all possible strings of length i ; iterate the set to get the count of valid numbers in the range [ l , r ] ; ","context":"\nfrom math import log10\n\n","code":"def check(num):\n    sm = 0\n    num2 = num * num\n    while (num):\n        sm += num % 10\n        num \/\/= 10\n    sm2 = 0\n    while (num2):\n        sm2 += num2 % 10\n        num2 \/\/= 10\n    return ((sm * sm) == sm2)\n\n\ndef convert(s):\n    val = 0\n    s = s[::-1]\n    cur = 1\n    for i in range(len(s)):\n        val += (ord(s[i]) - ord('0')) * cur\n        cur *= 10\n    return val\n\n\ndef generate(s, len1, uniq):\n    if (len(s) == len1):\n        if (check(convert(s))):\n            uniq .add(convert(s))\n        return\n    for i in range(4):\n        generate(s + chr(i + ord('0')), len1, uniq)\n\n\ndef totalNumbers(L, R):\n    ans = 0\n    max_len = int(log10(R)) + 1\n    uniq = set()\n    for i in range(1, max_len + 1, 1):\n        generate(\"\", i, uniq)\n    for x in uniq:\n        if (x >= L and x <= R):\n            ans += 1\n    return ans\n","test":"\nif __name__ == '__main__':\n    L = 22\n    R = 22\n    print(totalNumbers(L, R))\n","output":"1\n","fn_call":"totalNumbers"}
{"text":"convert x into y by repeatedly multiplying x with 2 or appending 1 at the end | function to check if x can be converted to y by multiplying x by 2 or appending 1 at the end ; iterate until y is at least x ; if y is even ; if the last digit of y is 1 ; otherwise ; check if x is equal to y ; ","context":"","code":"def convertXintoY(X, Y):\n    while (Y > X):\n        if (Y % 2 == 0):\n            Y \/\/= 2\n        elif (Y % 10 == 1):\n            Y \/\/= 10\n        else:\n            break\n    if (X == Y):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\nif __name__ == '__main__':\n    X, Y = 100, 40021\n    convertXintoY(X, Y)\n","output":"Yes\n","fn_call":"convertXintoY"}
{"text":"lexicographically smallest string of maximum length made up of first k alphabets that does not contain any repeating substring | function to find the lexicographically smallest string of the first k lower case alphabets having unique substrings ; stores the resultant string ; iterate through all the characters ; inner loop for making pairs and adding them into string ; adding first character so that substring consisting of the last the first alphabet is present ; print the resultant string ; ","context":"","code":"def generateString(K):\n    s = \"\"\n    for i in range(97, 97 + K, 1):\n        s = s + chr(i)\n        for j in range(i + 1, 97 + K, 1):\n            s += chr(i)\n            s += chr(j)\n    s += chr(97)\n    print(s)\n","test":"\nif __name__ == '__main__':\n    K = 4\n    generateString(K)\n","output":"aabacadbbcbdccdda\n","fn_call":"generateString"}
{"text":"generate quadratic equation having given sum and product of roots | function to find the quadratic equation from the given sum and products of roots ; print the coefficients ; ","context":"","code":"def findEquation(S, M):\n    print(\"1 \", ((-1) * S), \" \", M)\n","test":"\nS = 5\nM = 6\nfindEquation(S, M)\n","output":"1  -5   6\n","fn_call":"findEquation"}
{"text":"make all array elements equal by replacing adjacent pairs by their sum | function to count the minimum number of pairs of adjacent elements required to be replaced by their sum to make all arrat elements equal ; stores the prefix sum of the array ; calculate the prefix sum array ; stores the maximum number of subarrays into which the array can be split ; iterate over all possible sums ; traverse the array ; if the sum is equal to the current prefix sum ; increment count of groups by 1 ; otherwise discard this subgroup sum ; update the maximum this of subarrays ; return the minimum number of operations ; ","context":"","code":"def minSteps(a, n):\n    prefix_sum = a[:]\n    for i in range(1, n):\n        prefix_sum[i] += prefix_sum[i - 1]\n    mx = -1\n    for subgroupsum in prefix_sum:\n        sum = 0\n        i = 0\n        grp_count = 0\n        while i < n:\n            sum += a[i]\n            if sum == subgroupsum:\n                grp_count += 1\n                sum = 0\n            elif sum > subgroupsum:\n                grp_count = -1\n                break\n            i += 1\n        if grp_count > mx:\n            mx = grp_count\n    return n - mx\n","test":"\nif __name__ == '__main__':\n    A = [1, 2, 3, 2, 1, 3]\n    N = len(A)\n    print(minSteps(A, N))\n","output":"2\n","fn_call":"minSteps"}
{"text":"most frequent character in a string after replacing all occurrences of x in a binary string | function to find the most frequent character after replacing x with either '0' or '1' according as per the given conditions ; store the count of 0 s and 1 s in the s ; count the frequency of 0 and 1 ; if the character is 1 ; if the character is 0 ; stores first occurence of 1 ; traverse the to count the number of x between two consecutive 1 s ; if the current character is not x ; if the current character is 1 , add the number of xs to count1 and set prev to i ; otherwise ; find next occurence of 1 in the string ; if it is found , set i to prev ; otherwise , break out of the loop ; store the first occurence of 0 ; repeat the same procedure to count the number of x between two consecutive 0 s ; if the current character is not x ; if the current character is 0 ; add the count of xs to count0 ; set prev to i ; otherwise ; find the next occurence of 0 in the string ; if it is found , set i to prev ; otherwise , break out of the loop ; count number of x present in the starting of the string as xxxx1 ... ; store the count of x ; increment count1 by count if the condition is satisfied ; count the number of x present in the ending of the as ... xxxx0 ; store the count of x ; increment count0 by count if the condition is satisfied ; if count of 1 is equal to count of 0 , prx ; otherwise , if count of 1 is greater than count of 0 ; otherwise , pr0 ; ","context":"","code":"def maxOccurringCharacter(s):\n    count0 = 0\n    count1 = 0\n    for i in range(len(s)):\n        if (s[i] == '1'):\n            count1 += 1\n        elif (s[i] == '0'):\n            count0 += 1\n    prev = -1\n    for i in range(len(s)):\n        if (s[i] == '1'):\n            prev = i\n            break\n    for i in range(prev + 1, len(s)):\n        if (s[i] != 'X'):\n            if (s[i] == '1'):\n                count1 += i - prev - 1\n                prev = i\n            else:\n                flag = True\n                for j in range(i+1, len(s)):\n                    if (s[j] == '1'):\n                        flag = False\n                        prev = j\n                        break\n                if (flag == False):\n                    i = prev\n                else:\n                    i = len(s)\n    prev = -1\n    for i in range(0, len(s)):\n\n        if (s[i] == '0'):\n            prev = i\n            break\n    for i in range(prev + 1, len(s)):\n        if (s[i] != 'X'):\n            if (s[i] == '0'):\n                count0 += i - prev - 1\n                prev = i\n            else:\n                flag = True\n\n                for j in range(i + 1, len(s)):\n                    if (s[j] == '0'):\n                        prev = j\n                        flag = False\n                        break\n                if (flag == False):\n                    i = prev\n                else:\n                    i = len(s)\n    if (s[0] == 'X'):\n        count = 0\n        i = 0\n        while (s[i] == 'X'):\n            count += 1\n            i += 1\n        if (s[i] == '1'):\n            count1 += count\n    if (s[(len(s) - 1)] == 'X'):\n        count = 0\n        i = len(s) - 1\n        while (s[i] == 'X'):\n            count += 1\n            i -= 1\n        if (s[i] == '0'):\n            count0 += count\n    if (count0 == count1):\n        print(\"X\")\n    elif (count0 > count1):\n        print(0)\n    else:\n        print(1)\n","test":"\nS = \"XX10XX10XXX1XX\"\nmaxOccurringCharacter(S)\n","output":"1\n","fn_call":"maxOccurringCharacter"}
{"text":"maximize count of sheets possible by repeatedly reducing its area to half | function to calculate the maximum number of sheets possible by given operations ; initial count of sheets ; keep dividing the sheets into half ; reduce area by half ; increase count by twice ; ","context":"","code":"def maxSheets(A, B):\n    area = A * B\n    count = 1\n    while (area % 2 == 0):\n        area \/\/= 2\n        count *= 2\n    return count\n","test":"\nA = 5\nB = 10\nprint(maxSheets(A, B))\n","output":"2\n","fn_call":"maxSheets"}
{"text":"minimum number of steps required to reach origin from a given point | function to find the minimum moves required to reach origin from ( a , b ) ; stores the minimum number of moves ; check if the absolute difference is 1 or 0 ; store the minimum of a , b ; store the maximum of a , b ; prthe answer ; ","context":"","code":"def findMinMoves(a, b):\n    ans = 0\n    if (a == b or abs(a - b) == 1):\n        ans = a + b\n    else:\n        k = min(a, b)\n        j = max(a, b)\n        ans = 2 * k + 2 * (j - k) - 1\n    print(ans)\n","test":"\nif __name__ == '__main__':\n    a, b = 3, 5\n    findMinMoves(a, b)\n","output":"9\n","fn_call":"findMinMoves"}
{"text":"count even sum pairs possible by selecting two integers from two given ranges respectively | function to count even sum pairs in the given range ; stores the count of even numbers between 1 to x ; stores the count of odd numbers between 1 to x ; stores the count of even numbers between 1 to y ; stores the count of odd numbers between 1 to y ; stores the count of pairs having even sum ; returns the count of pairs having even sum ; ","context":"","code":"def cntEvenSumPairs(X, Y):\n    cntXEvenNums = X \/ 2\n    cntXOddNums = (X + 1) \/ 2\n    cntYEvenNums = Y \/ 2\n    cntYOddNums = (Y + 1) \/ 2\n    cntPairs = ((cntXEvenNums * cntYEvenNums) + (cntXOddNums * cntYOddNums))\n    return cntPairs\n","test":"\nX = 2\nY = 3\nprint(cntEvenSumPairs(X, Y))\n","output":"4.5\n","fn_call":"cntEvenSumPairs"}
{"text":"minimize array elements required to be incremented or decremented to convert given array into a fibonacci series | python3 program for the above approach ; function to calculate minimum number of moves to make the sequence a fibonacci series ; if number of elements is less than 3 ; initialize the value of the result ; try all permutations of the first two elements ; value of first element after operation ; value of second element after operation ; calculate number of moves for rest of the elements of the array ; element at idx index ; if it is not possible to change the element in atmost one move ; otherwise ; update the answer ; return the answer ; ","context":"\nimport sys\n\n","code":"def minMoves(arr):\n    N = len(arr)\n    if (N <= 2):\n        return 0\n    ans = sys .maxsize\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            num1 = arr[0] + i\n            num2 = arr[1] + j\n            flag = 1\n            moves = abs(i) + abs(j)\n            for idx in range(2, N):\n                num = num1 + num2\n                if (abs(arr[idx] - num) > 1):\n                    flag = 0\n                else:\n                    moves += abs(arr[idx] - num)\n                num1 = num2\n                num2 = num\n            if (flag):\n                ans = min(ans, moves)\n    if (ans == sys .maxsize):\n        return -1\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    arr = [4, 8, 9, 17, 27]\n    print(minMoves(arr))\n","output":"3\n","fn_call":"minMoves"}
{"text":"queries to calculate sum of array elements present at every yth index starting from the index x | function to find the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all queries ; iterate over each query ; stores the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... ; traverse the array and calculate the sum of the expression ; update sum ; update x ; ","context":"","code":"def querySum(arr, N, Q, M):\n    for i in range(M):\n        x = Q[i][0]\n        y = Q[i][1]\n        sum = 0\n        while (x < N):\n            sum += arr[x]\n            x += y\n        print(sum, end=\" \")\n","test":"\nif __name__ == '__main__':\n    arr = [1, 2, 7, 5, 4]\n    Q = [[2, 1], [3, 2]]\n    N = len(arr)\n    M = len(Q)\n    querySum(arr, N, Q, M)\n","output":"16 5 ","fn_call":"querySum"}
{"text":"calculate bitwise or of two integers from their given bitwise and and bitwise xor values | function to calculate bitwise or from given bitwise xor and bitwise and values ; ","context":"","code":"def findBitwiseORGivenXORAND(X, Y):\n    return X + Y\n","test":"\nif __name__ == \"__main__\":\n    X = 5\n    Y = 2\n    print(findBitwiseORGivenXORAND(X, Y))\n","output":"7\n","fn_call":"findBitwiseORGivenXORAND"}
{"text":"check if a given value can be reached from another value in a circular queue by k | function to return gcd of two numbers a and b ; base case ; recursively find the gcd ; function to check of b can be reaced from a with a jump of k elements in the circular queue ; find gcd of n and k ; if a - b is divisible by gcd then pryes ; otherwise ; ","context":"","code":"def GCD(a, b):\n    if (b == 0):\n        return a\n    return GCD(b, a % b)\n\n\ndef canReach(N, A, B, K):\n    gcd = GCD(N, K)\n    if (abs(A - B) % gcd == 0):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\nif __name__ == '__main__':\n    N = 5\n    A = 2\n    B = 1\n    K = 2\n    canReach(N, A, B, K)\n","output":"Yes\n","fn_call":"canReach"}
{"text":"count of subarrays having sum equal to its length | set 2 | python3 program for the above approach ; function that counts the subarrays with sum of its elements as its length ; store count of elements upto current element with length i ; stores the final count of subarray ; stores the prefix sum ; if size of subarray is 1 ; iterate the array ; find the sum ; update frequency in map ; print the total count ; ","context":"\nfrom collections import defaultdict\n\n","code":"def countOfSubarray(arr, N):\n    mp = defaultdict(lambda: 0)\n    answer = 0\n    sum = 0\n    mp[1] += 1\n    for i in range(N):\n        sum += arr[i]\n        answer += mp[sum - i]\n        mp[sum - i] += 1\n    print(answer)\n","test":"\nif __name__ == '__main__':\n    arr = [1, 0, 2, 1, 2, -2, 2, 4]\n    N = len(arr)\n    countOfSubarray(arr, N)\n","output":"7\n","fn_call":"countOfSubarray"}
{"text":"split first n natural numbers into two sets with minimum absolute difference of their sums | function to split the first n natural numbers into two sets having minimum absolute difference of their sums ; stores the sum of elements of set1 ; stores the sum of elements of set2 ; traverse first n natural numbers ; check if sum of elements of set1 is less than or equal to sum of elements of set2 ; ","context":"\n","code":"def minAbsDiff(N):\n    sumSet1 = 0\n    sumSet2 = 0\n    for i in reversed(range(N + 1)):\n        if sumSet1 <= sumSet2:\n            sumSet1 = sumSet1 + i\n        else:\n            sumSet2 = sumSet2 + i\n    return abs(sumSet1 - sumSet2)\n","test":"\nN = 6\nprint(minAbsDiff(N))\n","output":"1\n","fn_call":"minAbsDiff"}
{"text":"check if a number is prime in flipped upside down , mirror flipped and mirror flipped upside down | function to check if n contains digits 0 , 1 , 2 , 5 , 8 only ; extract digits of n ; return false if any of these digits are present ; function to check if n is prime or not ; check for all factors ; function to check if n is prime in all the desired forms ; ","context":"","code":"def checkDigits(n):\n    while True:\n        r = n % 10\n        if (r == 3 or r == 4 or r == 6 or r == 7 or r == 9):\n            return False\n        n \/\/= 10\n        if n == 0:\n            break\n    return True\n\n\ndef isPrime(n):\n    if (n <= 1):\n        return False\n    for i in range(2, n + 1):\n        if i * i > n:\n            break\n        if (n % i == 0):\n            return False\n    return True\n\n\ndef isAllPrime(n):\n    return isPrime(n) and checkDigits(n)\n","test":"\nif __name__ == '__main__':\n    N = 101\n    if (isAllPrime(N)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"isAllPrime"}
{"text":"minimum cost required to generate a balanced bracket sequence | function to calculate the minimum cost required to generate a balanced bracket sequence ; stores the count of unbalanced open brackets ; stores the count of unbalanced closed brackets ; stores the count of open brackets ; stores the count of closed brackets ; if open brace is encountered ; otherwise ; if no unbalanced open brackets are present ; increase count of unbalanced closed brackets ; otherwise ; reduce count of unbalanced open brackets ; increase count of closed brackets ; calculate lower bound of minimum cost ; reduce excess open or closed brackets to prevent counting them twice ; update answer by adding minimum of removing both unbalanced open and closed brackets or inserting closed unbalanced brackets to end of string ; prthe result ; ","context":"","code":"def minCost(str, a, b):\n    openUnbalanced = 0\n    closedUnbalanced = 0\n    openCount = 0\n    closedCount = 0\n    for i in range(len(str)):\n        if (str[i] == '('):\n            openUnbalanced += 1\n            openCount += 1\n        else:\n            if (openUnbalanced == 0):\n                closedUnbalanced += 1\n            else:\n                openUnbalanced -= 1\n            closedCount += 1\n    result = a * (abs(openCount - closedCount))\n    if (closedCount > openCount):\n        closedUnbalanced -= (closedCount - openCount)\n    if (openCount > closedCount):\n        openUnbalanced -= (openCount - closedCount)\n    result += min(a * (openUnbalanced + closedUnbalanced),\n                  b * closedUnbalanced)\n    print(result)\n","test":"\nif __name__ == '__main__':\n    str = \"))()(()()(\"\n    A = 1\n    B = 3\n    minCost(str, A, B)\n","output":"4\n","fn_call":"minCost"}
{"text":"count of permutations such that sum of k numbers from given range is even | function to return the number of all permutations such that sum of k numbers in range is even ; find total count of even and odd number in given range ; iterate loop k times and update even_sum & odd_sum using previous values ; update the prev_even and odd_sum ; even sum ; odd sum ; return even_sum ; ","context":"","code":"def countEvenSum(low, high, k):\n    even_count = high \/ 2 - (low - 1) \/ 2\n    odd_count = (high + 1) \/ 2 - low \/ 2\n    even_sum = 1\n    odd_sum = 0\n    for i in range(0, k):\n        prev_even = even_sum\n        prev_odd = odd_sum\n        even_sum = ((prev_even * even_count) + (prev_odd * odd_count))\n        odd_sum = ((prev_even * odd_count) + (prev_odd * even_count))\n    print(int(even_sum))\n","test":"\nlow = 4\nhigh = 5\nK = 3\ncountEvenSum(low, high, K)\n","output":"4\n","fn_call":"countEvenSum"}
{"text":"count of n digit numbers whose sum of every k consecutive digits is equal | set 2 | function to count the number of n - digit numbers such that sum of every k consecutive digits are equal ; print the answer ; ","context":"","code":"def count(n, k):\n    count = (pow(10, k) - pow(10, k - 1))\n    print(count)\n","test":"\nif __name__ == '__main__':\n    n = 2\n    k = 1\n    count(n, k)\n","output":"9\n","fn_call":"count"}
{"text":"sum of largest divisor of numbers upto n not divisible by given prime number p | function to find the sum of largest divisors of numbers in range 1 to n not divisible by prime number p ; total sum upto n ; if no multiple of p exist up to n ; if only p itself is in the range from 1 to n ; sum of those that are divisible by p ; recursively function call to find the sum for n \/ p ; ","context":"","code":"def func(N, P):\n    sumUptoN = (N * (N + 1) \/ 2)\n    sumOfMultiplesOfP = 0\n    if (N < P):\n        return sumUptoN\n    elif ((N \/ P) == 1):\n        return sumUptoN - P + 1\n    sumOfMultiplesOfP = (((N \/ P) * (2 * P + (N \/ P - 1) * P)) \/ 2)\n    return (sumUptoN + func(N \/ P, P) - sumOfMultiplesOfP)\n","test":"\nif __name__ == '__main__':\n    N = 10\n    P = 5\n    print(func(N, P))\n","output":"43.0\n","fn_call":"func"}
{"text":"count of right shifts for each array element to be in its sorted position | function to find the right shifts required for each element to reach its sorted array position in a [ ] ; stores required number of shifts for each element ; if the element is at sorted position ; otherwise ; calculate right shift ; print the respective shifts ; ","context":"","code":"def findShifts(A, N):\n    shift = [0 for i in range(N)]\n    for i in range(N):\n        if (i == A[i] - 1):\n            shift[i] = 0\n        else:\n            shift[i] = (A[i] - 1 - i + N) % N\n    for i in range(N):\n        print(shift[i], end=\" \")\n","test":"\nif __name__ == '__main__':\n    arr = [1, 4, 3, 2, 5]\n    N = len(arr)\n    findShifts(arr, N)\n","output":"0 2 0 3 0 ","fn_call":"findShifts"}
{"text":"construct a matrix with sum equal to the sum of diagonal elements | function to construct matrix with diagonal sum equal to matrix sum ; if diagonal position ; positive element ; negative element ; ","context":"","code":"def constructmatrix(N):\n    check = bool(True)\n    for i in range(N):\n        for j in range(N):\n            if (i == j):\n                print(1, end=\" \")\n            elif (check):\n                print(2, end=\" \")\n                check = bool(False)\n            else:\n                print(-2, end=\" \")\n                check = bool(True)\n        print()\n","test":"\nN = 5\nconstructmatrix(5)\n","output":"1 2 -2 2 -2 \n2 1 -2 2 -2 \n2 -2 1 2 -2 \n2 -2 2 1 -2 \n2 -2 2 -2 1 \n","fn_call":"constructmatrix"}
{"text":"minimum count of numbers required with unit digit x that sums up to n | function to calculate and return the minimum number of times a number with unit digit x needs to be added to get a sum n ; calculate the number of additions required to get unit digit of n ; if unit digit of n cannot be obtained ; function to return the minimum number required to represent n ; stores unit digit of n ; stores minimum addition of x required to obtain unit digit of n ; if unit digit of n cannot be obtained ; otherwise ; if n is greater than or equal to ( x * times ) ; minimum count of numbers that needed to represent n ; representation not possible ; ","context":"","code":"def check(unit_digit, X):\n    for times in range(1, 11):\n        digit = (X * times) % 10\n        if (digit == unit_digit):\n            return times\n    return -1\n\n\ndef getNum(N, X):\n    unit_digit = N % 10\n    times = check(unit_digit, X)\n    if (times == -1):\n        return times\n    else:\n        if (N >= (times * X)):\n            return times\n        else:\n            return -1\n","test":"\nN = 58\nX = 7\nprint(getNum(N, X))\n","output":"4\n","fn_call":"getNum"}
{"text":"minimum number of points required to cover all blocks of a 2 | function to find the minimum number of points required to cover a grid ; if number of block is even ; return the minimum points ; ","context":"","code":"def minPoints(n, m):\n    ans = 0\n    if ((n % 2 != 0) and (m % 2 != 0)):\n        ans = ((n * m) \/\/ 2) + 1\n    else:\n        ans = (n * m) \/\/ 2\n    return ans\n","test":"\nif __name__ == '__main__':\n    N = 5\n    M = 7\n    print(minPoints(N, M))\n","output":"18\n","fn_call":"minPoints"}
{"text":"largest lexicographical string with at most k consecutive elements | function to find the largest lexicographical string with given constraints . ; vector containing frequency of each character . ; assigning frequency to ; empty string of string class type ; loop to iterate over maximum priority first . ; if frequency is greater than or equal to k . ; temporary variable to operate in - place of k . ; concatenating with the resultant string ans . ; handling k case by adjusting with just smaller priority element . ; condition to verify if index j does have frequency greater than 0 ; ; if no such element is found than string can not be processed further . ; if frequency is greater than 0 and less than k . ; here we don 't need to fix k  consecutive element criteria. ; otherwise check for next possible element . ; ","context":"","code":"def getLargestString(s, k):\n    frequency_array = [0] * 26\n    for i in range(len(s)):\n        frequency_array[ord(s[i]) - ord('a')] += 1\n    ans = \"\"\n    i = 25\n    while i >= 0:\n        if (frequency_array[i] > k):\n            temp = k\n            st = chr(i + ord('a'))\n            while (temp > 0):\n                ans += st\n                temp -= 1\n            frequency_array[i] -= k\n            j = i - 1\n            while (frequency_array[j] <= 0 and j >= 0):\n                j -= 1\n            if (frequency_array[j] > 0 and j >= 0):\n                str1 = chr(j + ord('a'))\n                ans += str1\n                frequency_array[j] -= 1\n            else:\n                break\n        elif (frequency_array[i] > 0):\n            temp = frequency_array[i]\n            frequency_array[i] -= temp\n            st = chr(i + ord('a'))\n            while (temp > 0):\n                ans += st\n                temp -= 1\n        else:\n            i -= 1\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    S = \"xxxxzza\"\n    k = 3\n    print(getLargestString(S, k))\n","output":"zzxxxax\n","fn_call":"getLargestString"}
{"text":"minimum operations to make all elements equal using the second array | function to find the minimum operations required to make all elements of the array equal ; minimum element of a ; traverse through all final values ; variable indicating whether all elements can be converted to x or not ; total operations ; traverse through all array elements ; all elements can 't  be converted to x ; ","context":"","code":"def minOperations(a, b, n):\n    minA = min(a)\n    for x in range(minA, -1, -1):\n        check = True\n        operations = 0\n        for i in range(n):\n            if (x % b[i] == a[i] % b[i]):\n                operations += (a[i] - x) \/ b[i]\n            else:\n                check = False\n                break\n        if (check):\n            return operations\n    return -1\n","test":"\nif __name__ == '__main__':\n    N = 5\n    A = [5, 7, 10, 5, 15]\n    B = [2, 2, 1, 3, 5]\n    print(int(minOperations(A, B, N)))\n","output":"8\n","fn_call":"minOperations"}
{"text":"find the maximum sum ( a + b ) for a given input integer n satisfying the given condition | function to return the maximum sum of a + b satisfying the given condition ; initialize max_sum ; consider all the possible pairs ; check if the product is divisible by the sum ; storing the maximum sum in the max_sum variable ; return the max_sum value ; ","context":"","code":"def getLargestSum(N):\n    max_sum = 0\n    for i in range(1, N + 1):\n        for j in range(i + 1, N + 1, 1):\n            if (i * j % (i + j) == 0):\n                max_sum = max(max_sum, i + j)\n    return max_sum\n","test":"\nif __name__ == '__main__':\n    N = 25\n    max_sum = getLargestSum(N)\n    print(max_sum)\n","output":"36\n","fn_call":"getLargestSum"}
{"text":"maximize the sum of array after multiplying a prefix and suffix by | kadane 's algorithm to find the maximum subarray sum ; loop to find the maximum subarray array sum in the given array ; function to find the maximum sum of the array by multiplying the prefix and suffix by - 1 ; total intital sum ; loop to find the maximum sum of the array ; maximum value ; ","context":"","code":"def maxSubArraySum(a, size):\n    max_so_far = -10 ** 9\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if (max_ending_here < 0):\n            max_ending_here = 0\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    return max_so_far\n\n\ndef maxSum(a, n):\n    S = 0\n    for i in range(n):\n        S += a[i]\n    X = maxSubArraySum(a, n)\n    return 2 * X - S\n","test":"\nif __name__ == '__main__':\n    a = [-1, -2, -3]\n    n = len(a)\n    max_sum = maxSum(a, n)\n    print(max_sum)\n","output":"6\n","fn_call":"maxSum"}
{"text":"count of interesting primes upto n | python3 program to find the number of interesting primes up to n ; function to check if a number is prime or not ; if n is divisible by any number between 2 and sqrt ( n ) , it is not prime ; function to check if a number is perfect square or not ; find floating povalue of square root of x . ; if square root is an integer ; function to find the number of interesting primes less than equal to n . ; check whether the number is prime or not ; iterate for values of b ; check condition for a ; return the required answer ; ","context":"\nimport math\n\n","code":"def isPrime(n):\n    flag = 1\n    i = 2\n    while (i * i <= n):\n        if (n % i == 0):\n            flag = 0\n            break\n        i += 1\n    return (True if flag == 1 else False)\n\n\ndef isPerfectSquare(x):\n    sr = math .sqrt(x)\n    return ((sr - math .floor(sr)) == 0)\n\n\ndef countInterestingPrimes(n):\n    answer = 0\n    for i in range(2, n):\n        if (isPrime(i)):\n            j = 1\n            while (j * j * j * j <= i):\n                if (isPerfectSquare(i - j * j * j * j)):\n                    answer += 1\n                    break\n                j += 1\n    return answer\n","test":"\nif __name__ == '__main__':\n    N = 10\n    print(countInterestingPrimes(N))\n","output":"2\n","fn_call":"countInterestingPrimes"}
{"text":"maximize the number by flipping at most k bits | python implementation of the approach ; function to convert decimal number n to its binary representation stored as an array arr [ ] ; function to convert the number represented as a binary array arr [ ] into its decimal equivalent ; function to return the maximized number by flipping atmost k bits ; number of bits in n ; find the binary representation of n ; to count the number of 0 s flipped ; return the decimal equivalent of the maximized number ; ","context":"\nimport math\n\n","code":"def decBinary(arr, n):\n    k = int(math .log2(n))\n    while (n > 0):\n        arr[k] = n % 2\n        k = k - 1\n        n = n \/\/ 2\n\n\ndef binaryDec(arr, n):\n    ans = 0\n    for i in range(0, n):\n        ans = ans + (arr[i] << (n - i - 1))\n    return ans\n\n\ndef maxNum(n, k):\n    l = int(math .log2(n)) + 1\n    a = [0 for i in range(0, l)]\n    decBinary(a, n)\n    cn = 0\n    for i in range(0, l):\n        if (a[i] == 0 and cn < k):\n            a[i] = 1\n            cn = cn + 1\n    return binaryDec(a, l)\n","test":"\nn = 4\nk = 1\nprint(maxNum(n, k))\n","output":"6\n","fn_call":"maxNum"}
{"text":"find the subsequence with given sum in a superincreasing sequence | function to find the required subsequence ; current element cannot be a part of the required subsequence ; include current element in the required subsequence so update the sum ; print the elements of the required subsequence ; if the current element was included in the subsequence ; ","context":"","code":"def findSubSeq(arr, n, sum):\n    for i in range(n - 1, -1, -1):\n        if (sum < arr[i]):\n            arr[i] = -1\n        else:\n            sum -= arr[i]\n    for i in range(n):\n        if (arr[i] != -1):\n            print(arr[i], end=\" \")\n","test":"\nif __name__ == \"__main__\":\n    arr = [17, 25, 46, 94, 201, 400]\n    n = len(arr)\n    sum = 272\n    findSubSeq(arr, n, sum)\n","output":"25 46 201 ","fn_call":"findSubSeq"}
{"text":"find the most valued alphabet in the string | python implementation of the approach ; function to return the maximum valued alphabet ; set the first and the last occurrence of all the characters to - 1 ; update the occurrences of the characters ; only set the first occurrence if it hasn 't already been set ; to store the result ; for every alphabet ; if current alphabet doesn 't appear  in the given string ; if the current character has the highest value so far ; ","context":"\nMAX = 26\n\n","code":"def maxAlpha(str, len):\n    first = [-1 for x in range(MAX)]\n    last = [-1 for x in range(MAX)]\n    for i in range(0, len):\n        index = ord(str[i]) - 97\n        if (first[index] == -1):\n            first[index] = i\n        last[index] = i\n    ans = -1\n    maxVal = -1\n    for i in range(0, MAX):\n        if (first[i] == -1):\n            continue\n        if ((last[i] - first[i]) > maxVal):\n            maxVal = last[i] - first[i]\n            ans = i\n    return chr(ans + 97)\n","test":"\nstr = \"abbba\"\nlen = len(str)\nprint(maxAlpha(str, len))\n","output":"a\n","fn_call":"maxAlpha"}
{"text":"queries for number of distinct elements from a given index till last index in an array | python implementation of the approach ; function to perform queries to find number of distinct elements from a given index till last index in an array ; check if current element already visited or not ; if not visited store current counter and increment it and mark check as 1 ; otherwise if visited simply store current counter ; perform queries ; ","context":"\nMAX = 100001\n\n","code":"def find_distinct(a, n, q, queries):\n    check = [0] * MAX\n    idx = [0] * MAX\n    cnt = 1\n    for i in range(n - 1, -1, -1):\n        if (check[a[i]] == 0):\n            idx[i] = cnt\n            check[a[i]] = 1\n            cnt += 1\n        else:\n            idx[i] = cnt - 1\n    for i in range(0, q):\n        m = queries[i]\n        print(idx[m], end=\" \")\n","test":"\na = [1, 2, 3, 1, 2, 3, 4, 5]\nn = len(a)\nqueries = [0, 3, 5, 7]\nq = len(queries)\nfind_distinct(a, n, q, queries)\n","output":"5 5 3 1 ","fn_call":"find_distinct"}
{"text":"convert given integer x to the form 2 ^ n | python3 implementation of the approach ; function to return the count of operations required ; to store the powers of 2 ; temporary variable to store x ; to store the index of smaller number larger than x ; to store the count of operations ; stores the index of number in the form of 2 ^ n - 1 ; if x is already in the form 2 ^ n - 1 then no operation is required ; if number is less than x increase the index ; calculate all the values ( x xor 2 ^ n - 1 ) for all possible n ; only take value which is closer to the number ; if number is in the form of 2 ^ n - 1 then break ; return the count of operations required to obtain the number ; ","context":"\nMAX = 24\n\n","code":"def countOp(x):\n    arr = [0] * MAX\n    arr[0] = 1\n    for i in range(1, MAX):\n        arr[i] = arr[i - 1] * 2\n    temp = x\n    flag = True\n    ans = 0\n    operations = 0\n    flag2 = False\n    for i in range(MAX):\n        if (arr[i] - 1 == x):\n            flag2 = True\n        if (arr[i] > x):\n            ans = i\n            break\n    if (flag2):\n        return 0\n    while (flag):\n        if (arr[ans] < x):\n            ans += 1\n        operations += 1\n        for i in range(MAX):\n            take = x ^ (arr[i] - 1)\n            if (take <= arr[ans] - 1):\n                if (take > temp):\n                    temp = take\n        if (temp == arr[ans] - 1):\n            flag = False\n            break\n        temp += 1\n        operations += 1\n        x = temp\n        if (x == arr[ans] - 1):\n            flag = False\n    return operations\n","test":"\nif __name__ == \"__main__\":\n    x = 39\n    print(countOp(x))\n","output":"4\n","fn_call":"countOp"}
{"text":"minimum number of given operations required to reduce the array to 0 element | function to return the minimum operations required ; count the frequency of each element ; maximum element from the array ; find all the multiples of i ; delete the multiples ; increment the operations ; ","context":"","code":"def minOperations(arr, n):\n    result = 0\n    freq = [0] * 1000001\n    for i in range(0, n):\n        freq[arr[i]] += 1\n    maxi = max(arr)\n    for i in range(1, maxi + 1):\n        if freq[i] != 0:\n            for j in range(i * 2, maxi + 1, i):\n                freq[j] = 0\n            result += 1\n    return result\n","test":"\nif __name__ == \"__main__\":\n    arr = [2, 4, 2, 4, 4, 4]\n    n = len(arr)\n    print(minOperations(arr, n))\n","output":"1\n","fn_call":"minOperations"}
{"text":"form lexicographically smallest string with minimum replacements having equal number of 0 s , 1 s and 2 s | python3 implementation of the approach ; function that returns the modified lexicographically smallest string after performing minimum number of given operations ; stores the initial frequencies of characters 0 s , 1 s and 2 s ; stores number of processed characters upto that point of each type ; required number of characters of each type ; if the current type has already reqd number of characters , no need to perform any operation ; process all 3 cases ; check for 1 first ; else 2 ; here we need to check processed [ 1 ] only for 2 since 0 is less than 1 and we can replace it anytime ; here we can replace 2 with 0 and 1 anytime ; keep count of processed characters of each type ; ","context":"\nimport math\n\n","code":"def formStringMinOperations(ss):\n    count = [0] * 3\n    s = list(ss)\n    for i in range(len(s)):\n        count[ord(s[i]) - ord('0')] += 1\n    processed = [0] * 3\n    reqd = math .floor(len(s) \/ 3)\n    for i in range(len(s)):\n        if (count[ord(s[i]) - ord('0')] == reqd):\n            continue\n        if (s[i] == '0' and count[0] > reqd and processed[0] >= reqd):\n            if (count[1] < reqd):\n                s[i] = '1'\n                count[1] += 1\n                count[0] -= 1\n            elif (count[2] < reqd):\n                s[i] = '2'\n                count[2] += 1\n                count[0] -= 1\n        if (s[i] == '1' and count[1] > reqd):\n            if (count[0] < reqd):\n                s[i] = '0'\n                count[0] += 1\n                count[1] -= 1\n            elif (count[2] < reqd and processed[1] >= reqd):\n                s[i] = '2'\n                count[2] += 1\n                count[1] -= 1\n        if (s[i] == '2' and count[2] > reqd):\n            if (count[0] < reqd):\n                s[i] = '0'\n                count[0] += 1\n                count[2] -= 1\n            elif (count[1] < reqd):\n                s[i] = '1'\n                count[1] += 1\n                count[2] -= 1\n        processed[ord(s[i]) - ord('0')] += 1\n    return ''.join(s)\n","test":"\ns = \"011200\"\nprint(formStringMinOperations(s))\n","output":"011202\n","fn_call":"formStringMinOperations"}
{"text":"minimum number of adjacent swaps for arranging similar elements together | function to find minimum swaps ; visited array to check if value is seen already ; if the arr [ i ] is seen first time ; stores the number of swaps required to find the correct position of current element 's partner ; increment count only if the current element has not been visited yet ( if is visited , means it has already been placed at its correct position ) ; if current element 's partner is found ; ","context":"","code":"def findMinimumAdjacentSwaps(arr, N):\n    visited = [False] * (N + 1)\n    minimumSwaps = 0\n    for i in range(2 * N):\n        if (visited[arr[i]] == False):\n            visited[arr[i]] = True\n            count = 0\n            for j in range(i + 1, 2 * N):\n                if (visited[arr[j]] == False):\n                    count += 1\n                elif (arr[i] == arr[j]):\n                    minimumSwaps += count\n    return minimumSwaps\n","test":"\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 3, 1, 2]\n    N = len(arr)\n    N \/\/= 2\n    print(findMinimumAdjacentSwaps(arr, N))\n","output":"5\n","fn_call":"findMinimumAdjacentSwaps"}
{"text":"largest palindromic number by permuting digits | python3 program to print the largest palindromic number by permuting digits of a number ; function to check if a number can be permuted to form a palindrome number ; counts the occurrence of number which is odd ; if occurrence is odd ; if number exceeds 1 ; function to print the largest palindromic number by permuting digits of a number ; string length ; map that marks the occurrence of a number ; check the possibility of a palindromic number ; string array that stores the largest permuted palindromic number ; pointer of front ; greedily start from 9 to 0 and place the greater number in front and odd in the middle ; if the occurrence of number is odd ; place one odd occurring number in the middle ; decrease the count ; place the rest of numbers greedily ; if all numbers occur even times , then place greedily ; place greedily at front ; 2 numbers are placed , so decrease the count ; increase placing position ; print the largest string thus formed ; ","context":"\nfrom collections import defaultdict\n\n","code":"def possibility(m, length, s):\n    countodd = 0\n    for i in range(0, length):\n        if m[int(s[i])] & 1:\n            countodd += 1\n        if countodd > 1:\n            return False\n    return True\n\n\ndef largestPalindrome(s):\n    l = len(s)\n    m = defaultdict(lambda: 0)\n    for i in range(0, l):\n        m[int(s[i])] += 1\n    if possibility(m, l, s) == False:\n        print(\"Palindrome cannot be formed\")\n        return\n    largest = [None] * l\n    front = 0\n    for i in range(9, -1, -1):\n        if m[i] & 1:\n            largest[l \/\/ 2] = chr(i + 48)\n            m[i] -= 1\n            while m[i] > 0:\n                largest[front] = chr(i + 48)\n                largest[l - front - 1] = chr(i + 48)\n                m[i] -= 2\n                front += 1\n        else:\n            while m[i] > 0:\n                largest[front] = chr(i + 48)\n                largest[l - front - 1] = chr(i + 48)\n                m[i] -= 2\n                front += 1\n    for i in range(0, l):\n        print(largest[i], end=\"\")\n","test":"\nif __name__ == \"__main__\":\n    s = \"313551\"\n    largestPalindrome(s)\n","output":"531135","fn_call":"largestPalindrome"}
{"text":"minimum swaps for bracket balancing | function to calculate swaps required ; keep track of '[ ; to count number of encountered ' [ ' ; to track position of next ' [ ' in pos ; to store result ; increment count and move p to next position ; we have encountered an unbalanced part of string ; increment sum by number of swaps required i . e . position of next ' [ ' - current position ; reset count to 1 ; ","context":"","code":"def swapCount(s):\n\n    pos = []\n    for i in range(len(s)):\n        if (s[i] == '['):\n            pos .append(i)\n    count = 0\n    p = 0\n    sum = 0\n    s = list(s)\n    for i in range(len(s)):\n        if (s[i] == '['):\n            count += 1\n            p += 1\n        elif (s[i] == ']'):\n            count -= 1\n        if (count < 0):\n            sum += pos[p] - i\n            s[i], s[pos[p]] = (s[pos[p]], s[i])\n            p += 1\n            count = 1\n    return sum\n","test":"\ns = \"[]][][\"\nprint(swapCount(s))\ns = \"[[][]]\"\nprint(swapCount(s))\n","output":"2\n0\n","fn_call":"swapCount"}
{"text":"minimum cost to cut a board into squares | method returns minimum cost to break board into m * n squares ; sort the horizontal cost in reverse order ; sort the vertical cost in reverse order ; initialize current width as 1 ; loop until one or both cost array are processed ; increase current horizontal part count by 1 ; increase current vertical part count by 1 ; loop for horizontal array , if remains ; loop for vertical array , if remains ; ","context":"","code":"def minimumCostOfBreaking(X, Y, m, n):\n    res = 0\n    X .sort(reverse=True)\n    Y .sort(reverse=True)\n    hzntl = 1\n    vert = 1\n    i = 0\n    j = 0\n    while (i < m and j < n):\n        if (X[i] > Y[j]):\n            res += X[i] * vert\n            hzntl += 1\n            i += 1\n        else:\n            res += Y[j] * hzntl\n            vert += 1\n            j += 1\n    total = 0\n    while (i < m):\n        total += X[i]\n        i += 1\n    res += total * vert\n    total = 0\n    while (j < n):\n        total += Y[j]\n        j += 1\n    res += total * hzntl\n    return res\n","test":"\nm = 6\nn = 4\nX = [2, 1, 3, 1, 4]\nY = [4, 1, 2]\nprint(minimumCostOfBreaking(X, Y, m - 1, n - 1))\n","output":"42\n","fn_call":"minimumCostOfBreaking"}
{"text":"minimize the count of characters to be added or removed to make string repetition of same substring | function to find the minimum of the three numbers ; function to find the minimum number operations required to convert string str1 to str2 using the operations ; stores the results of subproblems ; fill dp [ ] [ ] in bottom up manner ; if str1 is empty , then insert all characters of string str2 ; minimum operations is j ; if str2 is empty , then remove all characters of string str2 ; minimum operations is i ; if the last characters are same , then ignore last character ; if the last character is different , then find the minimum ; perform one of the insert , remove and the replace ; return the minimum number of steps required ; function to find the minimum number of steps to modify the string such that first half and second half becomes the same ; stores the minimum number of operations required ; traverse the given string s ; find the minimum operations ; update the ans ; print the result ; ","context":"","code":"def getMin(x, y, z):\n    return min(min(x, y), z)\n\n\ndef editDistance(str1, str2, m, n):\n    dp = [[0 for i in range(n + 1)]for j in range(m + 1)]\n    for i in range(0, m + 1):\n        for j in range(0, n + 1):\n            if (i == 0):\n                dp[i][j] = j\n            elif (j == 0):\n                dp[i][j] = i\n            elif (str1[i - 1] == str2[j - 1]):\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + getMin(dp[i][j - 1], dp[i - 1]\n                                      [j], dp[i - 1][j - 1])\n    return dp[m][n]\n\n\ndef minimumSteps(S, N):\n    ans = 10 ** 10\n    for i in range(1, N):\n        S1 = S[:i]\n        S2 = S[i:]\n        count = editDistance(S1, S2, len(S1), len(S2))\n        ans = min(ans, count)\n    print(ans)\n","test":"\nS = \"aabb\"\nN = len(S)\nminimumSteps(S, N)\n","output":"2\n","fn_call":"minimumSteps"}
{"text":"minimize operations to reduce n to 2 by repeatedly reducing by 3 or dividing by 5 | function to find the minimum number of operations to reduce n to 2 by dividing n by 5 or decrementing by 3 ; initialize the dp array ; initialize the array dp [ ] ; for n = 2 number of operations needed is zero ; iterating over the range [ 1 , n ] ; if it 's not possible to  create current n ; multiply with 5 ; adding the value 3 ; checking if not possible to make the number as 2 ; return the minimum number of operations ; ","context":"","code":"def minimumOperations(N):\n    dp = [0 for i in range(N + 1)]\n    for i in range(N + 1):\n        dp[i] = 1000000000\n    dp[2] = 0\n    for i in range(2, N + 1, 1):\n        if (dp[i] == 1000000000):\n            continue\n        if (i * 5 <= N):\n            dp[i * 5] = min(dp[i * 5], dp[i] + 1)\n        if (i + 3 <= N):\n            dp[i + 3] = min(dp[i + 3], dp[i] + 1)\n    if (dp[N] == 1000000000):\n        return -1\n    return dp[N]\n","test":"\nif __name__ == '__main__':\n    N = 25\n    print(minimumOperations(N))\n","output":"2\n","fn_call":"minimumOperations"}
{"text":"maximum profit after buying and selling the stocks with transaction fees | set 2 | function to find the maximum profit with transaction fee ; traversing the stocks for each day ; update buy and sell ; return the maximum profit ; ","context":"","code":"def MaxProfit(arr, n, transactionFee):\n    buy = -arr[0]\n    sell = 0\n    for i in range(1, n, 1):\n        temp = buy\n        buy = max(buy, sell - arr[i])\n        sell = max(sell, temp + arr[i] - transactionFee)\n    return max(sell, buy)\n","test":"\nif __name__ == '__main__':\n    arr = [6, 1, 7, 2, 8, 4]\n    n = len(arr)\n    transactionFee = 2\n    print(MaxProfit(arr, n, transactionFee))\n","output":"8\n","fn_call":"MaxProfit"}
{"text":"maximum path sum from top left to bottom right of a matrix passing through one of the given cells | stores the maximum path sum from the cell ( 1 , 1 ) to ( n , m ) ; stores the maximum path sum from the cell ( j , j ) to ( n , m ) ; function to find the maximum path sum from the cell ( 1 , 1 ) to ( n , m ) ; traverse the first row ; traverse the first column ; traverse the matrix ; update the value of start [ i ] [ j ] ; function to find the maximum path sum from the cell ( j , j ) to ( n , m ) ; traverse the last row ; traverse the last column ; traverse the matrix ; update the value of ending [ i ] [ j ] ; function to find the maximum path sum from the top - left to the bottom right cell such that path contains one of the cells in the array coordinates [ ] [ ] ; initialize the start and the end matrices ; calculate the start matrix ; calculate the end matrix ; stores the maximum path sum ; traverse the coordinates ; update the value of ans ; print the resultant maximum sum path value ; ","context":"\nstart = [[0 for i in range(3)]for j in range(3)]\nending = [[0 for i in range(3)]for j in range(3)]\n\n","code":"def calculateStart(n, m):\n    for i in range(1, m, 1):\n        start[0][i] += start[0][i - 1]\n    for i in range(1, n, 1):\n        start[i][0] += start[i - 1][0]\n    for i in range(1, n, 1):\n        for j in range(1, m, 1):\n            start[i][j] += max(start[i - 1][j], start[i][j - 1])\n\n\ndef calculateEnd(n, m):\n    i = n - 2\n    while (i >= 0):\n        ending[i][m - 1] += ending[i + 1][m - 1]\n        i -= 1\n    i = m - 2\n    while (i >= 0):\n        ending[n - 1][i] += ending[n - 1][i + 1]\n        i -= 1\n    i = n - 2\n    while (i >= 0):\n        j = m - 2\n        while (j >= 0):\n            ending[i][j] += max(ending[i + 1][j], ending[i][j + 1])\n            j -= 1\n        i -= 1\n\n\ndef maximumPathSum(mat, n, m, q, coordinates):\n    for i in range(n):\n        for j in range(m):\n            start[i][j] = mat[i][j]\n            ending[i][j] = mat[i][j]\n    calculateStart(n, m)\n    calculateEnd(n, m)\n    ans = 0\n    for i in range(q):\n        X = coordinates[i][0] - 1\n        Y = coordinates[i][1] - 1\n        ans = max(ans, start[X][Y] + ending[X][Y] - mat[X][Y])\n    print(ans)\n","test":"\nif __name__ == '__main__':\n    mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    N = 3\n    M = 3\n    Q = 2\n    coordinates = [[1, 2], [2, 2]]\n    maximumPathSum(mat, N, M, Q, coordinates)\n","output":"27\n","fn_call":"maximumPathSum"}
{"text":"length of longest subset consisting of a 0 s and b 1 s from an array of strings | set 2 | function to find the length of the longest subset of an array of strings with at most a 0 s and b 1 s ; initialize a 2d array with its entries as 0 ; traverse the given array ; store the count of 0 s and 1 s in the current string ; iterate in the range [ a , zeros ] ; iterate in the range [ b , ones ] ; update the value of dp [ i ] [ j ] ; print the result ; ","context":"","code":"def MaxSubsetlength(arr, A, B):\n    dp = [[0 for i in range(B + 1)]for i in range(A + 1)]\n    for str in arr:\n        zeros = str .count('0')\n        ones = str .count('1')\n        for i in range(A, zeros - 1, -1):\n            for j in range(B, ones - 1, -1):\n                dp[i][j] = max(dp[i][j], dp[i - zeros][j - ones] + 1)\n    return dp[A][B]\n","test":"\nif __name__ == '__main__':\n    arr = [\"1\", \"0\", \"0001\", \"10\", \"111001\"]\n    A, B = 5, 3\n    print(MaxSubsetlength(arr, A, B))\n","output":"4\n","fn_call":"MaxSubsetlength"}
{"text":"count ways to select n pairs of candies of distinct colors ( dynamic programming + bitmasking ) | function to count ways to select n distinct pairs of candies with different colours ; if n pairs are selected ; stores count of ways to select the i - th pair ; iterate over the range [ 0 , n ] ; if pair ( i , j ) is not included ; ","context":"","code":"def numOfWays(a, n, i=0, blue=[]):\n    if i == n:\n        return 1\n    count = 0\n    for j in range(n):\n        if mat[i][j] == 1 and j not in blue:\n            count += numOfWays(mat, n, i + 1, blue + [j])\n    return count\n","test":"\nif __name__ == \"__main__\":\n    n = 3\n    mat = [[0, 1, 1], [1, 0, 1], [1, 1, 1]]\n    print(numOfWays(mat, n))\n","output":"3\n","fn_call":"numOfWays"}
{"text":"minimize cost to reach end of an array by two forward jumps or one backward jump in each move | function to find the minimum cost to reach the end of an array ; base case : when n < 3 ; store the results in table ; initialize base cases ; iterate over the range [ 2 , n - 2 ] to construct the dp array ; handle case for the last index , i . e . n - 1 ; print the answer ; ","context":"","code":"def minCost(arr, n):\n    if (n < 3):\n        print(arr[0])\n        return\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = dp[0] + arr[1] + arr[2]\n    for i in range(2, n - 1):\n        dp[i] = min(dp[i - 2] + arr[i], dp[i - 1] + arr[i] + arr[i + 1])\n    dp[n - 1] = min(dp[n - 2], dp[n - 3] + arr[n - 1])\n    print(dp[n - 1])\n","test":"\nif __name__ == \"__main__\":\n    arr = [9, 4, 6, 8, 5]\n    N = len(arr)\n    minCost(arr, N)\n","output":"20\n","fn_call":"minCost"}
{"text":"calculate the value of 2 raised to the power of twice the binary representation of n | python3 program to implement the above approach ; function to find the value of power ( x , y ) in o ( log y ) ; stores power ( x , y ) ; update x ; base case ; calculate power ( x , y ) ; if y is an odd number ; update res ; update y ; update x ; function to calculate ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 ) ; stores binary representation of n ; stores power of 10 ; calculate the binary representation of n ; if n is an odd number ; update x ; update pow_10 ; update n ; double the value of x ; stores the value of ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 ) ; ","context":"\nM = 1000000007\n\n","code":"def power(X, Y):\n    res = 1\n    X = X % M\n    if (X == 0):\n        return 0\n    while (Y > 0):\n        if (Y & 1):\n            res = (res * X) % M\n        Y = Y >> 1\n        X = (X * X) % M\n    return res\n\n\ndef findValue(n):\n    X = 0\n    pow_10 = 1\n    while (n):\n        if (n & 1):\n            X += pow_10\n        pow_10 *= 10\n        n \/\/= 2\n    X = (X * 2) % M\n    res = power(2, X)\n    return res\n","test":"\nif __name__ == \"__main__\":\n    n = 2\n    print(findValue(n))\n","output":"1048576\n","fn_call":"findValue"}
{"text":"calculate the value of 2 raised to the power of twice the binary representation of n | python3 program to implement the above approach ; function to find the value of power ( x , y ) in o ( log y ) ; stores power ( x , y ) ; update x ; base case ; calculate power ( x , y ) ; if y is an odd number ; update res ; update y ; update x ; function to calculate ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 ) ; dp [ n ] * dp [ n ] : stores value of ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 ) ; base case ; iterate over the range [ 3 , n ] ; stores rightmost bit of i ; stores the value of ( i - y ) ; if x is power of 2 ; update dp [ i ] ; update dp [ i ] ; ","context":"\nM = 1000000007\n\n","code":"def power(X, Y):\n    res = 1\n    X = X % M\n    if (X == 0):\n        return 0\n    while (Y > 0):\n        if (Y % 2 == 1):\n            res = (res * X) % M\n        Y = Y >> 1\n        X = (X * X) % M\n    return res\n\n\ndef findValue(N):\n    dp = [0] * (N + 1)\n    dp[1] = 2\n    dp[2] = 1024\n    for i in range(3, N + 1):\n        y = (i & (-i))\n        x = i - y\n        if (x == 0):\n            dp[i] = power(dp[i \/\/ 2], 10)\n        else:\n            dp[i] = (dp[x] * dp[y]) % M\n    return (dp[N] * dp[N]) % M\n","test":"\nif __name__ == '__main__':\n    n = 150\n    print(findValue(n))\n","output":"654430484\n","fn_call":"findValue"}
{"text":"count ways to obtain given sum by repeated throws of a dice | function to find the number of ways to get the sum n with throw of dice ; base case ; stores the count of total number of ways to get sum n ; recur for all 6 states ; return answer ; ","context":"","code":"def findWays(N):\n    if (N == 0):\n        return 1\n    cnt = 0\n    for i in range(1, 7):\n        if (N - i >= 0):\n            cnt = cnt + findWays(N - i)\n    return cnt\n","test":"\nif __name__ == '__main__':\n    N = 4\n    print(findWays(N))\n","output":"8\n","fn_call":"findWays"}
{"text":"check if an array can be split into 3 subsequences of equal sum or not | utility function to check array can be partition to 3 subsequences of equal sum or not ; base case ; when element at index j is added to sm1 ; when element at index j is added to sm2 ; when element at index j is added to sm3 ; return maximum value among all above 3 recursive call ; function to check array can be partition to 3 subsequences of equal sum or not ; initialise 3 sums to 0 ; function call ; ","context":"","code":"def checkEqualSumUtil(arr, N, sm1, sm2, sm3, j):\n    if j == N:\n        if sm1 == sm2 and sm2 == sm3:\n            return 1\n        else:\n            return 0\n    else:\n        l = checkEqualSumUtil(arr, N, sm1 + arr[j], sm2, sm3, j + 1)\n        m = checkEqualSumUtil(arr, N, sm1, sm2 + arr[j], sm3, j + 1)\n        r = checkEqualSumUtil(arr, N, sm1, sm2, sm3 + arr[j], j + 1)\n        return max(l, m, r)\n\n\ndef checkEqualSum(arr, N):\n    sum1 = sum2 = sum3 = 0\n    if checkEqualSumUtil(arr, N, sum1, sum2, sum3, 0) == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\narr = [17, 34, 59, 23, 17, 67, 57, 2, 18, 59, 1]\nN = len(arr)\ncheckEqualSum(arr, N)\n","output":"Yes\n","fn_call":"checkEqualSum"}
{"text":"check if an array can be split into 3 subsequences of equal sum or not | python3 program for the above approach ; function to check array can be partition into sum of 3 equal ; base case ; if value at particular index is not - 1 then return value at that index which ensure no more further calls ; when element at index j is added to sm1 ; when element at index j is added to sm2 ; when element at index j is added to sm3 ; update the current state and return that value ; function to check array can be partition to 3 subsequences of equal sum or not ; initialise 3 sums to 0 ; function call ; ","context":"\ndp = {}\n\n","code":"def checkEqualSumUtil(arr, N, sm1, sm2, sm3, j):\n    s = str(sm1) + \"_\" + str(sm2) + str(j)\n    if j == N:\n        if sm1 == sm2 and sm2 == sm3:\n            return 1\n        else:\n            return 0\n    if s in dp:\n        return dp[s]\n    l = checkEqualSumUtil(arr, N, sm1 + arr[j], sm2, sm3, j + 1)\n    m = checkEqualSumUtil(arr, N, sm1, sm2 + arr[j], sm3, j + 1)\n    r = checkEqualSumUtil(arr, N, sm1, sm2, sm3 + arr[j], j + 1)\n    dp[s] = max(l, m, r)\n    return dp[s]\n\n\ndef checkEqualSum(arr, N):\n    sum1 = sum2 = sum3 = 0\n    if checkEqualSumUtil(arr, N, sum1, sum2, sum3, 0) == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\narr = [17, 34, 59, 23, 17, 67, 57, 2, 18, 59, 1]\nN = len(arr)\ncheckEqualSum(arr, N)\n","output":"Yes\n","fn_call":"checkEqualSum"}
{"text":"smallest index in given range of indices which is not equal to x | precompute the index of next different element in the array for every array element ; default value ; compute nextpos [ i ] using nextpos [ i + 1 ] ; function to return the smallest index ; nextpos [ i ] will store the next position p where arr [ p ] != arr [ i ] ; if x is not present at l ; otherwise ; find the index which stores a value different from x ; if that index is within the range ; ","context":"","code":"def precompute(nextpos, arr, N):\n    nextpos[N - 1] = N\n    for i in range(N - 2, -1, -1):\n        if arr[i] == arr[i + 1]:\n            nextpos[i] = nextpos[i + 1]\n        else:\n            nextpos[i] = i + 1\n\n\ndef findIndex(query, arr, N, Q):\n    nextpos = [0] * N\n    precompute(nextpos, arr, N)\n    for i in range(Q):\n        l = query[i][0]\n        r = query[i][1]\n        x = query[i][2]\n        ans = -1\n        if arr[l] != x:\n            ans = l\n        else:\n            d = nextpos[l]\n            if d <= r:\n                ans = d\n        print(ans)\n","test":"\nN = 6\nQ = 3\narr = [1, 2, 1, 1, 3, 5]\nquery = [[0, 3, 1], [1, 5, 2], [2, 3, 1]]\nfindIndex(query, arr, N, Q)\n","output":"1\n2\n-1\n","fn_call":"findIndex"}
{"text":"count number of ways to convert string s to t by performing k cyclic shifts | python3 program for the above approach ; function to count number of ways to convert string s to string t by performing k cyclic shifts ; calculate length of string ; a is no . of good cyclic shifts b is no . of bad cyclic shifts ; iterate in string ; precompute the number of good and bad cyclic shifts ; dp2 [ i ] to store the no of ways to get to a bad shift in i moves ; calculate good and bad shifts ; return the required number of ways ; given strings ; ","context":"\nmod = 1000000007\n\n","code":"def countWays(s, t, k):\n    n = len(s)\n    a = 0\n    b = 0\n    for i in range(n):\n        p = s[i:n - i + 1] + s[:i + 1]\n        if (p == t):\n            a += 1\n        else:\n            b += 1\n    dp1 = [0] * (k + 1)\n    dp2 = [0] * (k + 1)\n    if (s == t):\n        dp1[0] = 1\n        dp2[0] = 0\n    else:\n        dp1[0] = 0\n        dp2[0] = 1\n    for i in range(1, k + 1):\n        dp1[i] = ((dp1[i - 1] * (a - 1)) % mod + (dp2[i - 1] * a) % mod) % mod\n        dp2[i] = ((dp1[i - 1] * (b)) %\n                  mod + (dp2[i - 1] * (b - 1)) % mod) % mod\n    return (dp1[k])\n","test":"\nS = 'ab'\nT = 'ab'\nK = 2\nprint(countWays(S, T, K))\n","output":"1\n","fn_call":"countWays"}
{"text":"minimize steps to reach k from 0 by adding 1 or doubling at each step | function to find minimum operations ; dp is initialised to store the steps ; for all even numbers ; ","context":"","code":"def minOperation(k):\n    dp = [0] * (k + 1)\n    for i in range(1, k + 1):\n        dp[i] = dp[i - 1] + 1\n        if (i % 2 == 0):\n            dp[i] = min(dp[i], dp[i \/\/ 2] + 1)\n    return dp[k]\n","test":"\nif __name__ == '__main__':\n    k = 12\n    print(minOperation(k))\n","output":"5\n","fn_call":"minOperation"}
{"text":"find maximum subset sum formed by partitioning any subset of array into 2 partitions with equal sum | function to find the maximum subset sum ; ignore the current element ; including element in partition 1 ; including element in partition 2 ; ","context":"","code":"def maxSum(p0, p1, a, pos, n):\n    if (pos == n):\n        if (p0 == p1):\n            return p0\n        else:\n            return 0\n    ans = maxSum(p0, p1, a, pos + 1, n)\n    ans = max(ans, maxSum(p0 + a[pos], p1, a, pos + 1, n))\n    ans = max(ans, maxSum(p0, p1 + a[pos], a, pos + 1, n))\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    n = 4\n    a = [1, 2, 3, 6]\n    print(maxSum(0, 0, a, 0, n))\n","output":"6\n","fn_call":"maxSum"}
{"text":"find maximum subset sum formed by partitioning any subset of array into 2 partitions with equal sum | python3 implementation for the above mentioned dynamic programming approach ; function to find the maximum subset sum ; sum of all elements ; bottom up lookup table ; ; initialising dp table with int_min where , int_min means no solution ; case when diff is 0 ; putting ith element in g0 ; putting ith element in g1 ; ignoring ith element ; ","context":"\nimport numpy as np\nimport sys\nINT_MIN = -(sys .maxsize - 1)\n\n","code":"def maxSum(a, n):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    limit = 2 * sum + 1\n    dp = np .zeros((n + 1, limit))\n    for i in range(n + 1):\n        for j in range(limit):\n            dp[i][j] = INT_MIN\n    dp[0][sum] = 0\n    for i in range(1, n + 1):\n        for j in range(limit):\n            if ((j - a[i - 1]) >= 0 and dp[i - 1][j - a[i - 1]] != INT_MIN):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i - 1]] + a[i - 1])\n            if ((j + a[i - 1]) < limit and dp[i - 1][j + a[i - 1]] != INT_MIN):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j + a[i - 1]])\n            if (dp[i - 1][j] != INT_MIN):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j])\n    return dp[n][sum]\n","test":"\nif __name__ == \"__main__\":\n    n = 4\n    a = [1, 2, 3, 6]\n    print(maxSum(a, n))\n","output":"6.0\n","fn_call":"maxSum"}
{"text":"golomb sequence | set 2 | python3 program to find the first n terms of golomb sequence ; function to print the golomb sequence ; initialise the array ; initialise the cnt to 0 ; first and second element of golomb sequence is 0 , 1 ; map to store the count of current element in golomb sequence ; store the count of 2 ; iterate over 2 to n ; if cnt is equals to 0 then we have new number for golomb sequence which is 1 + previous element ; else the current element is the previous element in this sequence ; map the current index to current value in arr [ ] ; print the golomb sequence ; ","context":"\nMAX = 100001\n\n","code":"def printGolombSequence(N):\n    arr = [0] * MAX\n    cnt = 0\n    arr[0] = 0\n    arr[1] = 1\n    M = dict()\n    M[2] = 2\n    for i in range(2, N + 1):\n        if (cnt == 0):\n            arr[i] = 1 + arr[i - 1]\n            cnt = M[arr[i]]\n            cnt -= 1\n        else:\n            arr[i] = arr[i - 1]\n            cnt -= 1\n        M[i] = arr[i]\n    for i in range(1, N + 1):\n        print(arr[i], end=\" \")\n","test":"\nN = 11\nprintGolombSequence(N)\n","output":"1 2 2 3 3 4 4 4 5 5 5 ","fn_call":"printGolombSequence"}
{"text":"count ways to reach nth stairs by taking 1 and 2 steps with exactly one 3 step | function to find the number the number of ways to reach nth stair ; array including number of ways that includes 3 ; array including number of ways that doesn 't includes 3 ; initially to reach 3 stairs by taking 3 steps can be reached by 1 way ; loop to find the number the number of ways to reach nth stair ; ","context":"","code":"def number_of_ways(n):\n    includes_3 = [0] * (n + 1)\n    not_includes_3 = [0] * (n + 1)\n    includes_3[3] = 1\n    not_includes_3[1] = 1\n    not_includes_3[2] = 2\n    not_includes_3[3] = 3\n    for i in range(4, n + 1):\n        includes_3[i] = includes_3[i - 1] + \\\n            includes_3[i - 2] + not_includes_3[i - 3]\n        not_includes_3[i] = not_includes_3[i - 1] + not_includes_3[i - 2]\n    return includes_3[n]\n","test":"\nn = 7\nprint(number_of_ways(n))\n","output":"20\n","fn_call":"number_of_ways"}
{"text":"maximum number of multiples in an array before any element | python3 implementation of the approach ; map to store the divisor count ; function to generate the divisors of all the array elements ; function to find the maximum number of multiples in an array before it ; to store the maximum divisor count ; update ans if more number of divisors are found ; generating all the divisors of the next element of the array ; ","context":"\nfrom math import ceil, sqrt\nMAX = 100000\ndivisors = [0] * MAX\n\n","code":"def generateDivisors(n):\n    for i in range(1, ceil(sqrt(n)) + 1):\n        if (n % i == 0):\n            if (n \/\/ i == i):\n                divisors[i] += 1\n            else:\n                divisors[i] += 1\n                divisors[n \/\/ i] += 1\n\n\ndef findMaxMultiples(arr, n):\n    ans = 0\n    for i in range(n):\n        ans = max(divisors[arr[i]], ans)\n        generateDivisors(arr[i])\n    return ans\n","test":"\narr = [8, 1, 28, 4, 2, 6, 7]\nn = len(arr)\nprint(findMaxMultiples(arr, n))\n","output":"3\n","fn_call":"findMaxMultiples"}
{"text":"number of ways to reach the end of matrix with non | python3 implementation of the approach ; 3d array to store states of dp ; array to determine whether a state has been solved before ; function to return the count of required paths ; base cases ; if a state has been solved before it won 't be evaluated again ; recurrence relation ; ","context":"\nn = 3\nmaxV = 20\ndp = [[[0 for i in range(maxV)]for i in range(n)]for i in range(n)]\nv = [[[0 for i in range(maxV)]for i in range(n)]for i in range(n)]\n\n","code":"def countWays(i, j, x, arr):\n    if (i == n or j == n):\n        return 0\n    x = (x & arr[i][j])\n    if (x == 0):\n        return 0\n    if (i == n - 1 and j == n - 1):\n        return 1\n    if (v[i][j][x]):\n        return dp[i][j][x]\n    v[i][j][x] = 1\n    dp[i][j][x] = countWays(i + 1, j, x, arr) + countWays(i, j + 1, x, arr)\n    return dp[i][j][x]\n","test":"\narr = [[1, 2, 1], [1, 1, 0], [2, 1, 1]]\nprint(countWays(0, 0, arr[0][0], arr))\n","output":"1\n","fn_call":"countWays"}
{"text":"number of ways to make binary string of length n such that 0 s always occur together in groups of size k | python3 iimplementation of the above approach ; function to return no of ways to build a binary string of length n such that 0 s always occur in groups of size k ; ","context":"\nmod = 1000000007\n\n","code":"def noOfBinaryStrings(N, k):\n    dp = [0] * 100002\n    for i in range(1, K):\n        dp[i] = 1\n    dp[k] = 2\n    for i in range(k + 1, N + 1):\n        dp[i] = (dp[i - 1] + dp[i - k]) % mod\n    return dp[N]\n","test":"\nif __name__ == \"__main__\":\n    N = 4\n    K = 2\n    print(noOfBinaryStrings(N, K))\n","output":"5\n","fn_call":"noOfBinaryStrings"}
{"text":"number of ways to pair people | function to find number of ways to pair people in party ; to store count of number of ways . ; using the recurrence defined find count for different values of p . ; ","context":"","code":"def findWays(p):\n    dp = [0] * (p + 1)\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, p + 1):\n        dp[i] = (dp[i - 1] + (i - 1) * dp[i - 2])\n    return dp[p]\n","test":"\np = 3\nprint(findWays(p))\n","output":"4\n","fn_call":"findWays"}
{"text":"count ways to reach a score using 1 and 2 with no consecutive 2 s | a simple recursive implementation for counting ways to reach a score using 1 and 2 with consecutive 2 allowed ; base case ; for cases n > 2 ; ","context":"","code":"def CountWays(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1 + 1\n    return CountWays(n - 1) + CountWays(n - 3)\n","test":"\nif __name__ == '__main__':\n    n = 5\n    print(CountWays(n))\n","output":"6\n","fn_call":"CountWays"}
{"text":"weird number | python 3 program to check if the number is weird or not ; code to find all the factors of the number excluding the number itself ; vector to store the factors ; note that this loop runs till sqrt ( n ) ; if the value of i is a factor ; condition to check the divisor is not the number itself ; return the vector ; function to check if the number is abundant or not ; find the divisors using function ; sum all the factors ; check for abundant or not ; function to check if the number is semi - perfect or not ; find the divisors ; sorting the vector ; subset to check if no is semiperfect ; initialising 1 st column to true ; initialing 1 st row except zero position to 0 ; loop to find whether the number is semiperfect ; calculation to check if the number can be made by summation of divisors ; if not possible to make the number by any combination of divisors ; function to check for weird or not ; ","context":"\nfrom math import sqrt\n\n","code":"def factors(n):\n    v = []\n    v .append(1)\n    for i in range(2, int(sqrt(n)) + 1, 1):\n        if (n % i == 0):\n            v .append(i)\n            if (int(n \/ i) != i):\n                v .append(int(n \/ i))\n    return v\n\n\ndef checkAbundant(n):\n    sum = 0\n    v = factors(n)\n    for i in range(len(v)):\n        sum += v[i]\n    if (sum > n):\n        return True\n    else:\n        return False\n\n\ndef checkSemiPerfect(n):\n    v = factors(n)\n    v .sort(reverse=False)\n    r = len(v)\n    subset = [[0 for i in range(n + 1)]for j in range(r + 1)]\n    for i in range(r + 1):\n        subset[i][0] = True\n    for i in range(1, n + 1):\n        subset[0][i] = False\n    for i in range(1, r + 1):\n        for j in range(1, n + 1):\n            if (j < v[i - 1]):\n                subset[i][j] = subset[i - 1][j]\n            else:\n                subset[i][j] = (subset[i - 1][j]\n                                or subset[i - 1][j - v[i - 1]])\n    if ((subset[r][n]) == 0):\n        return False\n    else:\n        return True\n\n\ndef checkweird(n):\n    if (checkAbundant(n) and checkSemiPerfect(n) == False):\n        return True\n    else:\n        return False\n","test":"\nif __name__ == '__main__':\n    n = 70\n    if (checkweird(n)):\n        print(\"Weird Number\")\n    else:\n        print(\"Not Weird Number\")\n","output":"Weird Number\n","fn_call":"checkweird"}
{"text":"maximum subarray sum in an array created after repeated concatenation | returns sum of maximum sum subarray created after concatenating a [ 0. . n - 1 ] k times . ; this is where it differs from kadane 's  algorithm. we use  modular arithmetic to  find next element. ; ","context":"","code":"def maxSubArraySumRepeated(a, n, k):\n    max_so_far = -2147483648\n    max_ending_here = 0\n    for i in range(n * k):\n        max_ending_here = max_ending_here + a[i % n]\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n        if (max_ending_here < 0):\n            max_ending_here = 0\n    return max_so_far\n","test":"\na = [10, 20, -30, -1]\nn = len(a)\nk = 3\nprint(\"Maximum contiguous sum is \", maxSubArraySumRepeated(a, n, k))\n","output":"Maximum contiguous sum is  30\n","fn_call":"maxSubArraySumRepeated"}
{"text":"longest increasing odd even subsequence | function to find the longest increasing odd even subsequence ; lioes [ i ] stores longest increasing odd even subsequence ending at arr [ i ] ; to store the length of longest increasing odd even subsequence ; initialize lioes values for all indexes ; compute optimized lioes values in bottom up manner ; pick maximum of all lioes values ; required maximum length ; ","context":"","code":"def longOddEvenIncSeq(arr, n):\n    lioes = list()\n    maxLen = 0\n    for i in range(n):\n        lioes .append(1)\n    i = 1\n    for i in range(n):\n        for j in range(i):\n            if (arr[i] > arr[j] and (arr[i] + arr[j]) %\n                    2 != 0 and lioes[i] < lioes[j] + 1):\n                lioes[i] = lioes[j] + 1\n    for i in range(n):\n        if maxLen < lioes[i]:\n            maxLen = lioes[i]\n    return maxLen\n","test":"\narr = [1, 12, 2, 22, 5, 30, 31, 14, 17, 11]\nn = len(arr)\nprint(\n    \"Longest Increasing Odd Even \" +\n    \"Subsequence: \",\n    longOddEvenIncSeq(\n        arr,\n        n))\n","output":"Longest Increasing Odd Even Subsequence:  5\n","fn_call":"longOddEvenIncSeq"}
{"text":"minimum and maximum values of an expression with * and + | utility method to check whether a character is operator or not ; method prints minimum and maximum value obtainable from an expression ; store operator and numbers in different vectors ; storing last number in vector ; initializing minval and maxval 2d array ; initializing main diagonal by num values ; looping similar to matrix chain multiplication and updating both 2d arrays ; if current operator is ' + ' , updating tmp variable by addition ; if current operator is ' * ' , updating tmp variable by multiplication ; updating array values by tmp variables ; last element of first row will store the result ; ","context":"","code":"def isOperator(op):\n    return (op == '+' or op == '*')\n\n\ndef printMinAndMaxValueOfExp(exp):\n    num = []\n    opr = []\n    tmp = \"\"\n    for i in range(len(exp)):\n        if (isOperator(exp[i])):\n            opr .append(exp[i])\n            num .append(int(tmp))\n            tmp = \"\"\n        else:\n            tmp += exp[i]\n    num .append(int(tmp))\n    llen = len(num)\n    minVal = [[0 for i in range(llen)]for i in range(llen)]\n    maxVal = [[0 for i in range(llen)]for i in range(llen)]\n    for i in range(llen):\n        for j in range(llen):\n            minVal[i][j] = 10 ** 9\n            maxVal[i][j] = 0\n            if (i == j):\n                minVal[i][j] = maxVal[i][j] = num[i]\n    for L in range(2, llen + 1):\n        for i in range(llen - L + 1):\n            j = i + L - 1\n            for k in range(i, j):\n                minTmp = 0\n                maxTmp = 0\n                if (opr[k] == '+'):\n                    minTmp = minVal[i][k] + minVal[k + 1][j]\n                    maxTmp = maxVal[i][k] + maxVal[k + 1][j]\n                elif (opr[k] == '*'):\n                    minTmp = minVal[i][k] * minVal[k + 1][j]\n                    maxTmp = maxVal[i][k] * maxVal[k + 1][j]\n                if (minTmp < minVal[i][j]):\n                    minVal[i][j] = minTmp\n                if (maxTmp > maxVal[i][j]):\n                    maxVal[i][j] = maxTmp\n    print(\"Minimum value : \",\n          minVal[0][llen - 1],\n          \", \\\\ Maximum value : \",\n          maxVal[0][llen - 1])\n","test":"\nexpression = \"1+2*3+4*5\"\nprintMinAndMaxValueOfExp(expression)\n","output":"Minimum value :  27 , \\ Maximum value :  105\n","fn_call":"printMinAndMaxValueOfExp"}
{"text":"matrix chain multiplication | dp | a naive recursive implementation that simply follows the above optimal substructure property ; matrix a [ i ] has dimension p [ i - 1 ] x p [ i ] for i = 1. . n ; place parenthesis at different places between first and last matrix , recursively calculate count of multiplications for each parenthesis placement and return the minimum count ; return minimum count ; ","context":"\nimport sys\n\n","code":"def MatrixChainOrder(p, i, j):\n    if i == j:\n        return 0\n    _min = sys .maxsize\n    for k in range(i, j):\n        count = (MatrixChainOrder(p, i, k) +\n                 MatrixChainOrder(p, k + 1, j) + p[i - 1] * p[k] * p[j])\n        if count < _min:\n            _min = count\n    return _min\n","test":"\narr = [1, 2, 3, 4, 3]\nn = len(arr)\nprint(\"Minimum number of multiplications is \", MatrixChainOrder(arr, 1, n - 1))\n","output":"Minimum number of multiplications is  30\n","fn_call":"MatrixChainOrder"}
{"text":"matrix chain multiplication | dp | python program using memoization ; function for matrix chain multiplication ; ","context":"\nimport sys\ndp = [[-1 for i in range(100)]for j in range(100)]\n\n","code":"def matrixChainMemoised(p, i, j):\n    if (i == j):\n        return 0\n    if (dp[i][j] != -1):\n        return dp[i][j]\n    dp[i][j] = sys .maxsize\n    for k in range(i, j):\n        dp[i][j] = min(dp[i][j], matrixChainMemoised(p, i, k) +\n                       matrixChainMemoised(p, k + 1, j) + p[i - 1] * p[k] * p[j])\n    return dp[i][j]\n\n\ndef MatrixChainOrder(p, n):\n    i = 1\n    j = n - 1\n    return matrixChainMemoised(p, i, j)\n","test":"\narr = [1, 2, 3, 4]\nn = len(arr)\nprint(\"Minimum number of multiplications is\", MatrixChainOrder(arr, n))\n","output":"Minimum number of multiplications is 18\n","fn_call":"MatrixChainOrder"}
{"text":"numbers formed by flipping common set bits in two given integers | function to flip bits of a and b which are set in both of them ; clear the bits of a which are set in both a and b ; clear the bits of b which are set in both a and b ; print updated a and b ; ","context":"","code":"def flipBitsOfAandB(A, B):\n    A = A ^ (A & B)\n    B = B ^ (A & B)\n    print(A, B)\n","test":"\nif __name__ == \"__main__\":\n    A = 10\n    B = 20\n    flipBitsOfAandB(A, B)\n","output":"10 20\n","fn_call":"flipBitsOfAandB"}
{"text":"sum of hamming difference of consecutive numbers from 0 to n | set 2 | function to calculate and return the hamming distance between all consecutive numbers from 0 to n ; ","context":"","code":"def TotalHammingDistance(n):\n    i = 1\n    sum = 0\n    while (n \/\/ i > 0):\n        sum = sum + n \/\/ i\n        i = i * 2\n    return sum\n","test":"\nif __name__ == '__main__':\n    N = 9\n    print(TotalHammingDistance(N))\n","output":"16\n","fn_call":"TotalHammingDistance"}
{"text":"sum of all divisors from 1 to n | set 3 | python3 program to implement the above approach ; function to find the sum of all divisors of all numbers from 1 to n ; stores the sum ; marks the last poof occurence with same count ; calculate the sum ; return the result ; ","context":"\nimport math\nm = 1000000007\n\n","code":"def solve(n):\n    s = 0\n    l = 1\n    while (l < n + 1):\n        r = (int)(n \/ math .floor(n \/ l))\n        x = ((((r % m) * ((r + 1) % m)) \/ 2) % m)\n        y = ((((l % m) * ((l - 1) % m)) \/ 2) % m)\n        p = (int)((n \/ l) % m)\n        s = ((s + (((x - y) % m) * p) % m + m) % m)\n        s %= m\n        l = r + 1\n    print(int((s + m) % m))\n","test":"\nif __name__ == '__main__':\n    n = 12\n    solve(n)\n","output":"127\n","fn_call":"solve"}
{"text":"minimize number of cuts required to break n length stick into n unit length sticks | python3 program to find minimum time required to split a stick of n length into unit pieces ; function to return the minimum time required to split stick of n into length into unit pieces ; return the minimum unit of time required ; ","context":"\nimport math\n\n","code":"def min_time_to_cut(N):\n    if (N == 0):\n        return 0\n    return int(math .log2(N)) + 1\n","test":"\nN = 100\nprint(min_time_to_cut(N))\n","output":"7\n","fn_call":"min_time_to_cut"}
{"text":"count of distinct pair sum between two 1 to n value arrays | function to find the distinct sums ; set to store distinct sums ; inserting every sum ; returning distinct sums ; ","context":"","code":"def findDistinctSums(n):\n    s = set()\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            s .add(i + j)\n    return len(s)\n","test":"\nN = 3\nprint(findDistinctSums(N))\n","output":"5\n","fn_call":"findDistinctSums"}
{"text":"find starting index for every occurrence of given array b in array a using z | python3 implementation for pattern searching in an array using z - algorithm ; function to calculate z - array ; loop to calculate z - array ; outside the z - box ; inside z - box ; helper function to merge two arrays and create a single array ; array to store merged array ; copying array b ; adding a separator ; copying array a ; calling z - function ; function to help compute the z array ; printing indexes where array b occur ; ","context":"\nimport sys\n\n","code":"def zArray(arr):\n    n = len(arr)\n    z = [0] * n\n    r = 0\n    l = 0\n    for k in range(1, n):\n        if (k > r):\n            r = l = k\n            while (r < n and arr[r] == arr[r - l]):\n                r += 1\n            z[k] = r - l\n            r -= 1\n        else:\n            k1 = k - l\n            if (z[k1] < r - k + 1):\n                z[k] = z[k1]\n            else:\n                l = k\n                while (r < n and arr[r] == arr[r - l]):\n                    r += 1\n                z[k] = r - l\n                r -= 1\n    return z\n\n\ndef mergeArray(A, B):\n    n = len(A)\n    m = len(B)\n    c = [0] * (n + m + 1)\n    for i in range(m):\n        c[i] = B[i]\n    c[m] = sys .maxsize\n    for i in range(n):\n        c[m + i + 1] = A[i]\n    z = zArray(c)\n    return z\n\n\ndef findZArray(A, B, n):\n    flag = 0\n    z = mergeArray(A, B)\n    for i in range(len(z)):\n        if (z[i] == n):\n            print(i - n - 1, end=\" \")\n            flag = 1\n    if (flag == 0):\n        print(\"Not Found\")\n","test":"\nif __name__ == \"__main__\":\n    A = [1, 2, 3, 2, 3, 2]\n    B = [2, 3]\n    n = len(B)\n    findZArray(A, B, n)\n","output":"1 3 ","fn_call":"findZArray"}
{"text":"check if a string can be repeated to make another string | function to return the count of repetitions of string a to generate string b ; if b cannot be generated by repeating a ; repeat a count number of times ; ","context":"","code":"def getCount(a, b):\n    if (len(b) % len(a) != 0):\n        return -1\n    count = int(len(b) \/ len(a))\n    a = a * count\n    if (a == b):\n        return count\n    return -1\n","test":"\nif __name__ == '__main__':\n    a = 'geeks'\n    b = 'geeksgeeks'\n    print(getCount(a, b))\n","output":"2\n","fn_call":"getCount"}
{"text":"check if a string can be formed from another string using given constraints | python3 program to check if a given string can be formed from another string using given constraints ; function to check if s2 can be formed of s1 ; length of strings ; hash - table to store count ; store count of each character ; traverse and check for every character ; if the character of s2 is present in s1 ; if the character of s2 is not present in s1 , then check if previous two ascii characters are present in s1 ; ","context":"\nfrom collections import defaultdict\n\n","code":"def check(S1, S2):\n    n1 = len(S1)\n    n2 = len(S2)\n    mp = defaultdict(lambda: 0)\n    for i in range(0, n1):\n        mp[S1[i]] += 1\n    for i in range(0, n2):\n        if mp[S2[i]]:\n            mp[S2[i]] -= 1\n        elif (mp[chr(ord(S2[i]) - 1)] and mp[chr(ord(S2[i]) - 2)]):\n            mp[chr(ord(S2[i]) - 1)] -= 1\n            mp[chr(ord(S2[i]) - 2)] -= 1\n        else:\n            return False\n    return True\n","test":"\nif __name__ == \"__main__\":\n    S1 = \"abbat\"\n    S2 = \"cat\"\n    if check(S1, S2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","output":"YES\n","fn_call":"check"}
{"text":"count of occurrences of a \"1(0 + ) 1\" pattern in a string | returns count of occurrences of \"1(0 + ) 1\" ; count = 0 initialize result ; check if encountered '1' forms a valid pattern as specified ; if 1 encountered for first time set oneseen to 1 ; check if there is any other character other than '0' or '1' . if so then set oneseen to 0 to search again for new pattern ; ","context":"\n","code":"def countPattern(s):\n    length = len(s)\n    oneSeen = False\n    count = 0\n    for i in range(length):\n        if (s[i] == '1' and oneSeen):\n            if (s[i - 1] == '0'):\n                count += 1\n        if (s[i] == '1' and oneSeen == 0):\n            oneSeen = True\n        if (s[i] != '0' and s[i] != '1'):\n            oneSeen = False\n    return count\n","test":"\ns = \"100001abc101\"\nprint(countPattern(s))\n","output":"2\n","fn_call":"countPattern"}
{"text":"convert given strings into t by replacing characters in between strings any number of times | function to check if it possible to make all the strings equal to the t ; stores the frequency of all the strings in the array arr [ ] ; stores the frequency of the t ; iterate over the characters of the t ; iterate in the range [ 0 , n - 1 ] ; iterate over the characters of the arr [ i ] ; if freqt [ i ] is 0 and freqs [ i ] is not 0 ; if freqs [ i ] is 0 and freqt [ i ] is not 0 ; if freqs [ i ] is not freqt [ i ] * n ; otherwise , return \" yes \" ; ","context":"","code":"def checkIfPossible(N, arr, T):\n    freqS = [0] * 256\n    freqT = [0] * 256\n    for ch in T:\n        freqT[ord(ch) - ord('a')] += 1\n    for i in range(N):\n        for ch in arr[i]:\n            freqS[ord(ch) - ord('a')] += 1\n    for i in range(256):\n        if (freqT[i] == 0 and freqS[i] != 0):\n            return \"No\"\n        elif (freqS[i] == 0 and freqT[i] != 0):\n            return \"No\"\n        elif (freqT[i] != 0 and freqS[i] != (freqT[i] * N)):\n            return \"No\"\n    return \"Yes\"\n","test":"\nif __name__ == '__main__':\n    arr = [\"abc\", \"abb\", \"acc\"]\n    T = \"abc\"\n    N = len(arr)\n    print(checkIfPossible(N, arr, T))\n","output":"Yes\n","fn_call":"checkIfPossible"}
{"text":"palindromic strings of length 3 possible by using characters of a given string | function to print all palindromic strings of length 3 that can be formed using characters of string s ; stores the count of character ; traverse the string s ; stores all palindromic strings ; iterate over the charchaters over the range [ ' a ' , ' z ' ] ; if hash [ ch ] is equal to 2 ; iterate over the characters over the range [ ' a ' , ' z ' ] ; stores all the palindromic string ; push the s into the set st ; if hash [ i ] is greater than or equal to 3 ; iterate over charchaters over the range [ ' a ' , ' z ' ] ; stores all the palindromic string ; if hash [ j ] is positive ; push s into the set st ; iterate over the set ; ","context":"","code":"def generatePalindrome(S):\n    Hash = {}\n    for ch in S:\n        Hash[ch] = Hash .get(ch, 0) + 1\n    st = {}\n    for i in range(ord('a'), ord('z') + 1):\n        if (chr(i) in Hash and Hash[chr(i)] == 2):\n            for j in range(ord('a'), ord('z') + 1):\n                s = \"\"\n                if (chr(j) in Hash and i != j):\n                    s += chr(i)\n                    s += chr(j)\n                    s += chr(i)\n                    st[s] = 1\n        if ((chr(i) in Hash) and Hash[chr(i)] >= 3):\n            for j in range(ord('a'), ord('z') + 1):\n                s = \"\"\n                if (chr(j) in Hash):\n                    s += chr(i)\n                    s += chr(j)\n                    s += chr(i)\n                    st[s] = 1\n    for ans in st:\n        print(ans)\n","test":"\nif __name__ == '__main__':\n    S = \"ddabdac\"\n    generatePalindrome(S)\n","output":"aba\naca\nada\ndad\ndbd\ndcd\nddd\n","fn_call":"generatePalindrome"}
{"text":"count occurrences of substring x before every occurrence of substring y in a given string | function to count occurrences of the string y in the string s for every occurrence of x in s ; stores the count of occurrences of x ; stores the lengths of the three strings ; traverse the string s ; if the current substring is y , then increment the value of count by 1 ; if the current substring is x , then print the count ; ","context":"","code":"def countOccurrences(S, X, Y):\n    count = 0\n    N = len(S)\n    A = len(X)\n    B = len(Y)\n    for i in range(0, N):\n        if (S[i:i + B] == Y):\n            count += 1\n        if (S[i:i + A] == X):\n            print(count, end=\" \")\n","test":"\nS = \"abcdefdefabc\"\nX = \"abc\"\nY = \"def\"\ncountOccurrences(S, X, Y)\n","output":"0 2 ","fn_call":"countOccurrences"}
{"text":"program to construct dfa for regular expression c ( a + b ) + | function to find whether the given is accepted by the dfa ; if n <= 1 , then prno ; to count the matched characters ; check if the first character is c ; traverse the rest of string ; if character is a or b , increment count by 1 ; if the first character is not c , pr - 1 ; if all characters matches ; ","context":"","code":"def DFA(str, N):\n    if (N <= 1):\n        print(\"No\")\n        return\n    count = 0\n    if (str[0] == 'C'):\n        count += 1\n        for i in range(1, N):\n            if (str[i] == 'A' or str[i] == 'B'):\n                count += 1\n            else:\n                break\n    else:\n        print(\"No\")\n        return\n    if (count == N):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\nif __name__ == '__main__':\n    str = \"CAABBAAB\"\n    N = len(str)\n    DFA(str, N)\n","output":"Yes\n","fn_call":"DFA"}
{"text":"minimum and maximum number of digits required to be removed to make a given number divisible by 3 | function to find the maximum and minimum number of digits to be removed to make str divisible by 3 ; convert the string into array of digits ; count of 0 s , 1 s , and 2 s ; traverse the array ; find the sum of digits % 3 ; cases to find minimum number of digits to be removed ; cases to find maximum number of digits to be removed ; ","context":"","code":"def minMaxDigits(str, N):\n    arr = [0] * N\n    for i in range(N):\n        arr[i] = (ord(str[i]) - ord('0')) % 3\n    zero = 0\n    one = 0\n    two = 0\n    for i in range(N):\n        if (arr[i] == 0):\n            zero += 1\n        if (arr[i] == 1):\n            one += 1\n        if (arr[i] == 2):\n            two += 1\n    sum = 0\n    for i in range(N):\n        sum = (sum + arr[i]) % 3\n    if (sum == 0):\n        print(\"0\", end=\" \")\n    if (sum == 1):\n        if (one and N > 1):\n            print(\"1\", end=\" \")\n        elif (two > 1 and N > 2):\n            print(\"2\", end=\" \")\n        else:\n            print(\"-1\", end=\" \")\n    if (sum == 2):\n        if (two and N > 1):\n            print(\"1\", end=\" \")\n        elif (one > 1 and N > 2):\n            print(\"2\", end=\" \")\n        else:\n            print(\"-1\", end=\" \")\n    if (zero > 0):\n        print(N - 1, end=\" \")\n    elif (one > 0 and two > 0):\n        print(N - 2, end=\" \")\n    elif (one > 2 or two > 2):\n        print(N - 3, end=\" \")\n    else:\n        print(\"-1\", end=\" \")\n","test":"\nstr = \"12345\"\nN = len(str)\nminMaxDigits(str, N)\n","output":"0 4 ","fn_call":"minMaxDigits"}
{"text":"minimum replacements required to obtain a k | python3 program for the above approach ; function to find the minimum number of changes to make the string k - periodic and palindrome ; initialize ans with 0 ; iterate from 0 to ( k + 1 ) \/ 2 ; store frequency of character ; iterate through all indices , i , i + k , i + 2 k ... . and store the frequency of character ; increase the frequency of current character ; iterate through all indices k - i , 2 k - i , 3 k - i ... . and store the frequency of character ; if k is odd & i is samw as k \/ 2 , break the loop ; increase the frequency of current character ; find the maximum frequency of a character among all visited characters ; if k is odd and i is same as k \/ 2 then , only n \/ k characters is visited ; otherwise n \/ k * 2 characters has visited ; return the result ; ","context":"\nimport sys\n\n","code":"def findMinimumChanges(N, K, S):\n    ans = 0\n    for i in range((K + 1) \/\/ 2):\n        mp = {}\n        for j in range(i, N, K):\n            mp[S[j]] = mp .get(S[j], 0) + 1\n        j = N - i - 1\n        while (j >= 0):\n            if ((K & 1) and (i == K \/\/ 2)):\n                break\n            mp[S[j]] = mp .get(S[j], 0) + 1\n            j -= K\n        curr_max = -sys .maxsize - 1\n        for key, value in mp .items():\n            curr_max = max(curr_max, value)\n        if ((K & 1) and (i == K \/\/ 2)):\n            ans += (N \/\/ K - curr_max)\n        else:\n            ans += (N \/\/ K * 2 - curr_max)\n    return ans\n","test":"\nif __name__ == '__main__':\n    S = \"aabbcbbcb\"\n    N = len(S)\n    K = 3\n    print(findMinimumChanges(N, K, S))\n","output":"2\n","fn_call":"findMinimumChanges"}
{"text":"check if a string contains any index with more than k active characters | function to check if any index contains more than k active characters ; store the last occurrence of each character ; stores the active characters ; insert the character ; if the size of set exceeds k ; remove the character from set if i is the last index of the current character ; ","context":"","code":"def checkString(s, K):\n    n = len(s)\n    dict = {}\n    for i in range(n):\n        dict[s[i]] = i\n    st = set()\n    for i in range(n):\n        st .add(s[i])\n        if len(st) > K:\n            print(\"Yes\")\n            return\n        if dict[s[i]] == i:\n            st .remove(s[i])\n    print(\"No\")\n","test":"\ns = \"aabbcdca\"\nK = 2\ncheckString(s, K)\n","output":"Yes\n","fn_call":"checkString"}
{"text":"count the number of strings in an array whose distinct characters are less than equal to m | function to count the strings whose distinct characters count is less than m ; loop to iterate over all the strings of the array ; distinct characters in the string with the help of set ; checking if its less than or equal to m ; ","context":"","code":"def distinct(S, M):\n    count = 0\n    for i in range(len(S)):\n        c = len(set([d for d in S[i]]))\n        if (c <= M):\n            count += 1\n    print(count)\n","test":"\nif __name__ == '__main__':\n    S = [\"HERBIVORES\", \"AEROPLANE\", \"GEEKSFORGEEKS\"]\n    M = 7\n    distinct(S, M)\n","output":"2\n","fn_call":"distinct"}
{"text":"remove odd frequency characters from the string | function to remove the characters which have odd frequencies in the string ; create a map to store the frequency of each character ; to store the new string ; remove the characters which have odd frequencies ; if the character has odd frequency then skip ; else concatenate the character to the new string ; return the modified string ; ","context":"","code":"def removeOddFrequencyCharacters(s):\n    m = dict()\n    for i in s:\n        m[i] = m .get(i, 0) + 1\n    new_s = \"\"\n    for i in s:\n        if (m[i] & 1):\n            continue\n        new_s += i\n    return new_s\n","test":"\nif __name__ == '__main__':\n    str = \"geeksforgeeks\"\n    str = removeOddFrequencyCharacters(str)\n    print(str)\n","output":"geeksgeeks\n","fn_call":"removeOddFrequencyCharacters"}
{"text":"product of nodes at k | recursive function to find product of elements at k - th level ; if subtree is null , just like if root == null ; consider only level k node to be part of the product ; recur for left subtree ; recur for right subtree ; taking care of ' ) ' after left and right subtree ; ","context":"","code":"def productAtKthLevel(tree, k, i, level):\n    if (tree[i[0]] == '('):\n        i[0] += 1\n        if (tree[i[0]] == ')'):\n            return 1\n        product = 1\n        if (level == k):\n            product = int(tree[i[0]])\n        i[0] += 1\n        leftproduct = productAtKthLevel(tree, k, i, level + 1)\n        i[0] += 1\n        rightproduct = productAtKthLevel(tree, k, i, level + 1)\n        i[0] += 1\n        return product * leftproduct * rightproduct\n","test":"\nif __name__ == \"__main__\":\n    tree = \"(0(5(6()())(4()(9()())))(7(1()())(3()())))\"\n    k = 2\n    i = [0]\n    print(productAtKthLevel(tree, k, i, 0))\n","output":"72\n","fn_call":"productAtKthLevel"}
{"text":"print the most occurring character in an array of strings | function to print the most occurring character ; creating a hash of size 26 ; for loop to iterate through every string of the array ; for loop to iterate through every character of the string ; incrementing the count of the character in the hash ; finding the character with the maximum count ; ","context":"","code":"def findMostOccurringChar(string):\n    hash = [0] * 26\n    for i in range(len(string)):\n        for j in range(len(string[i])):\n            hash[ord(string[i][j]) - ord('a')] += 1\n    max = 0\n    for i in range(26):\n        max = i if hash[i] > hash[max]else max\n    print((chr)(max + 97))\n","test":"\nif __name__ == \"__main__\":\n    string = []\n    string .append(\"animal\")\n    string .append(\"zebra\")\n    string .append(\"lion\")\n    string .append(\"giraffe\")\n    findMostOccurringChar(string)\n","output":"a\n","fn_call":"findMostOccurringChar"}
{"text":"check whether the given floating point number is a palindrome | function that returns true if num is palindrome ; convert the given floating point number into a string ; pointers pointing to the first and the last character of the string ; not a palindrome ; update the pointers ; ","context":"","code":"def isPalindrome(num):\n    s = str(num)\n    low = 0\n    high = len(s) - 1\n    while (low < high):\n        if (s[low] != s[high]):\n            return False\n        low += 1\n        high -= 1\n    return True\n","test":"\nn = 123.321\nif (isPalindrome(n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isPalindrome"}
{"text":"maximum number of times str1 appears as a non | python3 implementation of the approach ; function to return the maximum number of times str1 can appear as a non - overlapping substring bin str2 ; str1 cannot never be substring of str2 ; store the frequency of the characters of str1 ; store the frequency of the characters of str2 ; to store the required count of substrings ; current character doesn 't appear  in str1 ; frequency of the current character in str1 is greater than its frequency in str2 ; update the count of possible substrings ; ","context":"\nimport sys\nMAX = 26\n\n","code":"def maxSubStr(str1, len1, str2, len2):\n    if (len1 > len2):\n        return 0\n    freq1 = [0] * MAX\n    for i in range(len1):\n        freq1[ord(str1[i]) - ord('a')] += 1\n    freq2 = [0] * MAX\n    for i in range(len2):\n        freq2[ord(str2[i]) - ord('a')] += 1\n    minPoss = sys .maxsize\n    for i in range(MAX):\n        if (freq1[i] == 0):\n            continue\n        if (freq1[i] > freq2[i]):\n            return 0\n        minPoss = min(minPoss, freq2[i] \/ freq1[i])\n    return int(minPoss)\n","test":"\nstr1 = \"geeks\"\nstr2 = \"gskefrgoekees\"\nlen1 = len(str1)\nlen2 = len(str2)\nprint(maxSubStr(str1, len1, str2, len2))\n","output":"2\n","fn_call":"maxSubStr"}
{"text":"number of ways to insert two pairs of parentheses into a string of n characters | function to return the number of ways to insert the bracket pairs ; ","context":"","code":"def cntWays(string, n):\n    x = n + 1\n    ways = x * x * (x * x - 1) \/\/ 12\n    return ways\n","test":"\nif __name__ == \"__main__\":\n    string = \"ab\"\n    n = len(string)\n    print(cntWays(string, n))\n","output":"6\n","fn_call":"cntWays"}
{"text":"minimum number of substrings the given string can be splitted into that satisfy the given conditions | python3 implementation of the approach ; set to store all the strings from the given array ; to store the required count ; recursive function to find the count of substrings that can be splitted starting from the index start such that all the substrings are present in the map ; all the chosen substrings are present in the map ; update the minimum count of substrings ; starting from the substrings of length 1 that start with the given index ; get the substring ; if the substring is present in the set ; recursive call for the rest of the string ; function that inserts all the strings from the given array in a set and calls the recursive function to find the minimum count of substrings str can be splitted into that satisfy the given condition ; insert all the strings from the given array in a set ; find the required count ; ","context":"\nimport sys\nuSet = set()\nminCnt = sys .maxsize\n\n","code":"def findSubStr(string, cnt, start):\n    global minCnt\n    if (start == len(string)):\n        minCnt = min(cnt, minCnt)\n    for length in range(1, len(string) - start + 1):\n        subStr = string[start:start + length]\n        if subStr in uSet:\n            findSubStr(string, cnt + 1, start + length)\n\n\ndef findMinSubStr(arr, n, string):\n    for i in range(n):\n        uSet .add(arr[i])\n    findSubStr(string, 0, 0)\n","test":"\nif __name__ == \"__main__\":\n    string = \"123456\"\n    arr = [\"1\", \"12345\", \"2345\", \"56\", \"23\", \"456\"]\n    n = len(arr)\n    findMinSubStr(arr, n, string)\n    print(minCnt)\n","output":"3\n","fn_call":"findMinSubStr"}
{"text":"number of substrings that start with \" geeks \" and end with \" for \" | function to return the count of required substrings ; for every index of the string ; if the substring starting at the current index is \" geeks \" ; if the substring is \" for \" ; ","context":"","code":"def countSubStr(s, n):\n    c1 = 0\n    c2 = 0\n    for i in range(n):\n        if (s[i:i + 5] == \"geeks\"):\n            c1 += 1\n        if (s[i:i + 3] == \"for\"):\n            c2 = c2 + c1\n    return c2\n","test":"\nif __name__ == \"__main__\":\n    s = \"geeksforgeeksisforgeeks\"\n    n = len(s)\n    print(countSubStr(s, n))\n","output":"3\n","fn_call":"countSubStr"}
{"text":"encrypt the given string with the following operations | python3 implementation of the above approach : ; function to return the encrypted string ; reduce x because rotation of length 26 is unnecessary ; calculate the frequency of characters ; if the frequency of current character is even then increment it by x ; else decrement it by x ; return the count ; ","context":"\nMAX = 26\n\n","code":"def encryptstrr(strr, n, x):\n    x = x % MAX\n    arr = list(strr)\n    freq = [0] * MAX\n    for i in range(n):\n        freq[ord(arr[i]) - ord('a')] += 1\n    for i in range(n):\n        if (freq[ord(arr[i]) - ord('a')] % 2 == 0):\n            pos = (ord(arr[i]) - ord('a') + x) % MAX\n            arr[i] = chr(pos + ord('a'))\n        else:\n            pos = (ord(arr[i]) - ord('a') - x)\n            if (pos < 0):\n                pos += MAX\n            arr[i] = chr(pos + ord('a'))\n    return \"\".join(arr)\n","test":"\ns = \"abcda\"\nn = len(s)\nx = 3\nprint(encryptstrr(s, n, x))\n","output":"dyzad\n","fn_call":"encryptstrr"}
{"text":"rearrange characters in a string such that no two adjacent are same using hashing | function that returns true if it is possible to rearrange the characters of the string such that no two consecutive characters are same ; to store the frequency of each of the character ; to store the maximum frequency so far ; if possible ; ","context":"","code":"def isPossible(Str):\n    freq = dict()\n    max_freq = 0\n    for j in range(len(Str)):\n        freq[Str[j]] = freq .get(Str[j], 0) + 1\n        if (freq[Str[j]] > max_freq):\n            max_freq = freq[Str[j]]\n    if (max_freq <= (len(Str) - max_freq + 1)):\n        return True\n    return False\n","test":"\nStr = \"geeksforgeeks\"\nif (isPossible(Str)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isPossible"}
{"text":"find uncommon characters of the two strings | set 2 | function to print the uncommon characters in the given string in sorted order ; converting character to ascii code ; bit operation ; converting character to ascii code ; bit operation ; xor operation leaves only uncommon characters in the ans variable ; ","context":"","code":"def printUncommon(str1, str2):\n    a1 = 0\n    a2 = 0\n    for i in range(len(str1)):\n        ch = ord(str1[i]) - ord('a')\n        a1 = a1 | (1 << ch)\n    for i in range(len(str2)):\n        ch = ord(str2[i]) - ord('a')\n        a2 = a2 | (1 << ch)\n    ans = a1 ^ a2\n    i = 0\n    while (i < 26):\n        if (ans % 2 == 1):\n            print(chr(ord('a') + i), end=\"\")\n        ans = ans \/\/ 2\n        i += 1\n","test":"\nif __name__ == \"__main__\":\n    str1 = \"geeksforgeeks\"\n    str2 = \"geeksquiz\"\n    printUncommon(str1, str2)\n","output":"fioqruz","fn_call":"printUncommon"}
{"text":"minimum number of bracket reversals needed to make an expression balanced | set | returns count of minimum reversals for making expr balanced . returns - 1 if expr cannot be balanced . ; length of expression must be even to make it balanced by using reversals . ; to store number of reversals required . ; to store number of unbalanced opening brackets . ; to store number of unbalanced closing brackets . ; if current bracket is open then increment open count . ; if current bracket is close , check if it balances opening bracket . if yes then decrement count of unbalanced opening bracket else increment count of closing bracket . ; for the case : \" \" or when one closing and one opening bracket remains for pairing , then both need to be reversed . ; ","context":"","code":"def countMinReversals(expr):\n    length = len(expr)\n    if length % 2:\n        return -1\n    ans = 0\n    open = 0\n    close = 0\n    for i in range(0, length):\n        if expr[i] == \"\":\n            open += 1\n        else:\n            if not open:\n                close += 1\n            else:\n                open -= 1\n    ans = (close \/\/ 2) + (open \/\/ 2)\n    close %= 2\n    open %= 2\n    if close > 0:\n        ans += 2\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    expr = \"}}{{\"\n    print(countMinReversals(expr))\n","output":"2\n","fn_call":"countMinReversals"}
{"text":"character pairs from two strings with even sum | function to return the total number of valid pairs ; count total number of even and odd ascii values for string s1 ; count total number of even and odd ascii values for string s2 ; return total valid pairs ; ","context":"","code":"def totalPairs(s1, s2):\n    a1 = 0\n    b1 = 0\n    for i in range(len(s1)):\n        if (ord(s1[i]) % 2 != 0):\n            a1 += 1\n        else:\n            b1 += 1\n    a2 = 0\n    b2 = 0\n    for i in range(len(s2)):\n        if (ord(s2[i]) % 2 != 0):\n            a2 += 1\n        else:\n            b2 += 1\n    return ((a1 * a2) + (b1 * b2))\n","test":"\nif __name__ == \"__main__\":\n    s1 = \"geeks\"\n    s2 = \"for\"\n    print(totalPairs(s1, s2))\n","output":"5\n","fn_call":"totalPairs"}
{"text":"maximum occurrence of prefix in the array | function to return the count of the required prefix ; find the frequency of first character of str1ing ; ","context":"","code":"def prefixOccurrences(str1):\n    c = str1[0]\n    countc = 0\n    for i in range(len(str1)):\n        if (str1[i] == c):\n            countc += 1\n    return countc\n","test":"\nstr1 = \"abbcdabbcd\"\nprint(prefixOccurrences(str1))\n","output":"2\n","fn_call":"prefixOccurrences"}
{"text":"minimum number of given operations required to convert a string to another string | function to return the minimum operations of the given type required to convert string s to string t ; characters are already equal ; increment count of 0 s ; increment count of 1 s ; ","context":"","code":"def minOperations(s, t, n):\n    ct0 = 0\n    ct1 = 0\n    for i in range(n):\n        if (s[i] == t[i]):\n            continue\n        if (s[i] == '0'):\n            ct0 += 1\n        else:\n            ct1 += 1\n    return max(ct0, ct1)\n","test":"\nif __name__ == \"__main__\":\n    s = \"010\"\n    t = \"101\"\n    n = len(s)\n    print(minOperations(s, t, n))\n","output":"2\n","fn_call":"minOperations"}
{"text":"decrypt a string encrypted by repeating i | function to return the decrypted string ; initial jump will be 1 ; increment jump by 1 with every character ; ","context":"","code":"def decryptString(str, n):\n    i = 0\n    jump = 1\n    decryptedStr = \"\"\n    while (i < n):\n        decryptedStr += str[i]\n        i += jump\n        jump += 1\n    return decryptedStr\n","test":"\nif __name__ == '__main__':\n    str = \"geeeeekkkksssss\"\n    n = len(str)\n    print(decryptString(str, n))\n","output":"geeks\n","fn_call":"decryptString"}
{"text":"find bit whose minimum sequence flips makes all bits same | function to check which bit is to be flipped ; variable to store first and last character of string ; check if first and last characters are equal , if yes , then return the character which is not at last ; else return last ; ","context":"","code":"def bitToBeFlipped(s):\n    last = s[len(s) - 1]\n    first = s[0]\n    if (last == first):\n        if (last == '0'):\n            return '1'\n        else:\n            return '0'\n    elif (last != first):\n        return last\n","test":"\nif __name__ == \"__main__\":\n    s = \"1101011000\"\n    print(bitToBeFlipped(s))\n","output":"0\n","fn_call":"bitToBeFlipped"}
{"text":"sum and product of prime frequencies of characters in a string | function to create sieve to check primes ; false here indicates that it is not prime ; if prime [ p ] is not changed , then it is a prime ; update all multiples of p , set them to non - prime ; function to find the sum of prime frequencies of the characters of the given string ; map is used to store character frequencies ; traverse the map ; if the frequency is prime ; ","context":"","code":"def SieveofEratosthenes(prime, p_size):\n    prime[0] = False\n    prime[1] = False\n    for p in range(2, p_size + 1):\n        if prime[p]:\n            for i in range(p * 2, p_size + 1, p):\n                prime[i] = False\n\n\ndef sumProdOfPrimeFreq(s):\n    prime = [True] * (len(s) + 2)\n    SieveofEratosthenes(prime, len(s) + 1)\n    i = 0\n    j = 0\n    m = dict()\n    for i in range(len(s)):\n        m[s[i]] = (m[s[i]] + 1)if s[i] in m else 1\n    s = 0\n    product = 1\n    for it in m:\n        if prime[m[it]]:\n            s += m[it]\n            product *= m[it]\n    print(\"Sum =\", s)\n    print(\"Product =\", product)\n","test":"\nif __name__ == \"__main__\":\n    s = \"geeksforgeeks\"\n    sumProdOfPrimeFreq(s)\n","output":"Sum = 6\nProduct = 8\n","fn_call":"sumProdOfPrimeFreq"}
{"text":"check if frequency of character in one string is a factor or multiple of frequency of same character in other string | python3 implementation of above approach ; function that checks if the frequency of character are a factor or multiple of each other ; map store frequency of each character ; if any frequency is 0 , then continue as condition is satisfied ; if factor or multiple , then condition satisfied ; if condition not satisfied ; ","context":"\nfrom collections import defaultdict\n\n","code":"def multipleOrFactor(s1, s2):\n    m1 = defaultdict(lambda: 0)\n    m2 = defaultdict(lambda: 0)\n    for i in range(0, len(s1)):\n        m1[s1[i]] += 1\n    for i in range(0, len(s2)):\n        m2[s2[i]] += 1\n    for it in m1:\n        if it not in m2:\n            continue\n        if (m2[it] % m1[it] == 0 or m1[it] % m2[it] == 0):\n            continue\n        else:\n            return False\n    return True\n","test":"\nif __name__ == \"__main__\":\n    s1 = \"geeksforgeeks\"\n    s2 = \"geeks\"\n    if multipleOrFactor(s1, s2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","output":"YES\n","fn_call":"multipleOrFactor"}
{"text":"remove even frequency characters from the string | function that removes the characters which have even frequencies in the string ; create a map to store the frequency of each character ; to store the new string ; remove the characters which have even frequencies ; if the character has even frequency then skip ; else concatenate the character to the new string ; display the modified string ; ","context":"","code":"def solve(s):\n    m = dict()\n    for i in range(len(s)):\n        if s[i] in m:\n            m[s[i]] = m[s[i]] + 1\n        else:\n            m[s[i]] = 1\n    new_string = \"\"\n    for i in range(len(s)):\n        if m[s[i]] % 2 == 0:\n            continue\n        new_string = new_string + s[i]\n    print(new_string)\n","test":"\nif __name__ == '__main__':\n    s = \"aabbbddeeecc\"\n    solve(s)\n","output":"bbbeee\n","fn_call":"solve"}
{"text":"sum of all subsequences of a number | returns numeric value of a subsequence of s . the subsequence to be picked is decided using bit pattern of num ( we pick all thosedigits for which there is a set bit in num ) ; initialize the result ; till n != 0 ; if i - th bit is set then add this number ; right shift i ; function to find combined sum of all individual subsequence sum ; length of string ; stores the combined ; 2 ^ n - 1 subsequences ; loop for all subsequences ; returns the combined sum ; ","context":"","code":"def findSubSequence(s, num):\n    res = 0\n    i = 0\n    while (num):\n        if (num & 1):\n            res += ord(s[i]) - ord('0')\n        i += 1\n        num = num >> 1\n    return res\n\n\ndef combinedSum(s):\n    n = len(s)\n    c_sum = 0\n    ran = (1 << n) - 1\n    for i in range(ran + 1):\n        c_sum += findSubSequence(s, i)\n    return c_sum\n","test":"\nif __name__ == \"__main__\":\n    s = \"123\"\n    print(combinedSum(s))\n","output":"24\n","fn_call":"combinedSum"}
{"text":"longest subsequence where each character occurs at least k times | python program to find the subsequence with each character occurring at least k times in string s ; function to find the subsequence ; taking an extra array to keep record for character count in s ; counting occurrences of all characters in str [ ] ; printing characters with count >= k in same order as they appear in str . ; ","context":"\nMAX_CHAR = 26\n\n","code":"def findSubsequence(stri, k):\n    a = [0] * MAX_CHAR\n    for i in range(len(stri)):\n        a[ord(stri[i]) - ord('a')] += 1\n    for i in range(len(stri)):\n        if a[ord(stri[i]) - ord('a')] >= k:\n            print(stri[i], end='')\n","test":"\nk = 2\nfindSubsequence(\"geeksforgeeks\", k)\n","output":"geeksgeeks","fn_call":"findSubsequence"}
{"text":"google case of a given sentence | python3 program to convert a sentence to google case . ; empty strings ; convert input string to upper case ; checki if character is not a space and adding it to string w ; converting first character to lower case and subsequent initial letter of another word to lower case ; ","context":"","code":"def convert(str):\n    w = \"\"\n    z = \"\"\n    str = str .upper() + \" \"\n    for i in range(len(str)):\n        ch = str[i]\n        if (ch != ' '):\n            w = w + ch\n        else:\n            z = (z + (w[0]).lower() + w[1:len(w)] + \" \")\n            w = \"\"\n    return z\n","test":"\nif __name__ == '__main__':\n    str = \"I got intern at geeksforgeeks\"\n    print(convert(str))\n","output":"i gOT iNTERN aT gEEKSFORGEEKS \n","fn_call":"convert"}
{"text":"encrypt string with product of number of vowels and consonants in substring of size k | isvowel ( ) is a function that returns true for a vowel and false otherwise . ; function to encrypt the string ; cv to count vowel cc to count consonants ; counting prefix count of vowel and prefix count of consonants ; generating the encrypted string . ; ","context":"","code":"def isVowel(c):\n    return (c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u')\n\n\ndef encryptString(s, n, k):\n    cv = [0 for i in range(n)]\n    cc = [0 for i in range(n)]\n    if (isVowel(s[0])):\n        cv[0] = 1\n    else:\n        cc[0] = 1\n    for i in range(1, n):\n        cv[i] = cv[i - 1] + isVowel(s[i])\n        cc[i] = cc[i - 1] + (isVowel(s[i]) == False)\n    ans = \"\"\n    prod = 0\n    prod = cc[k - 1] * cv[k - 1]\n    ans += str(prod)\n    for i in range(k, len(s)):\n        prod = ((cc[i] - cc[i - k]) * (cv[i] - cv[i - k]))\n        ans += str(prod)\n    return ans\n","test":"\nif __name__ == '__main__':\n    s = \"hello\"\n    n = len(s)\n    k = 2\n    print(encryptString(s, n, k))\n","output":"1101\n","fn_call":"encryptString"}
{"text":"count occurrences of a word in string | python program to count the number of occurrence of a word in the given string ; split the string by spaces in a ; search for pattern in a ; if match found increase count ; ","context":"","code":"def countOccurrences(str, word):\n    a = str .split(\" \")\n    count = 0\n    for i in range(0, len(a)):\n        if (word == a[i]):\n            count = count + 1\n    return count\n","test":"\nstr = \"GeeksforGeeks A computer science portal for geeks \"\nword = \"portal\"\nprint(countOccurrences(str, word))\n","output":"1\n","fn_call":"countOccurrences"}
{"text":"program to find the initials of a name . | python3 program to print initials of a name ; split the string using ' space ' and print the first character of every word ; ","context":"","code":"def printInitials(name):\n    if (len(name) == 0):\n        return\n    words = name .split(\" \")\n    for word in words:\n        print(word[0].upper(), end=\" \")\n","test":"\nif __name__ == '__main__':\n    name = \"prabhat kumar singh\"\n    printInitials(name)\n","output":"P K S ","fn_call":"printInitials"}
{"text":"permute a string by changing case | function to generate permutations ; number of permutations is 2 ^ n ; converting string to lower case ; using all subsequences and permuting them ; if j - th bit is set , we convert it to upper case ; printing current combination ; ","context":"","code":"def permute(inp):\n    n = len(inp)\n    mx = 1 << n\n    inp = inp .lower()\n    for i in range(mx):\n        combination = [k for k in inp]\n        for j in range(n):\n            if (((i >> j) & 1) == 1):\n                combination[j] = inp[j].upper()\n        temp = \"\"\n        for i in combination:\n            temp += i\n        print(temp,)\n","test":"\npermute(\"ABC\")\n","output":"abc\nAbc\naBc\nABc\nabC\nAbC\naBC\nABC\n","fn_call":"permute"}
{"text":"print the string after the specified character has occurred given no . of times | function to print the string ; if given count is 0 print the given string and return ; start traversing the string ; increment occ if current char is equal to given character ; break the loop if given character has been occurred given no . of times ; print the string after the occurrence of given character given no . of times ; otherwise string is empty ; ","context":"","code":"def printString(str, ch, count):\n    occ, i = 0, 0\n    if (count == 0):\n        print(str)\n    for i in range(len(str)):\n        if (str[i] == ch):\n            occ += 1\n        if (occ == count):\n            break\n    if (i < len(str) - 1):\n        print(str[i + 1:len(str) - i + 2])\n    else:\n        print(\"Empty string\")\n","test":"\nif __name__ == '__main__':\n    str = \"geeks for geeks\"\n    printString(str, 'e', 2)\n","output":"ks for geeks\n","fn_call":"printString"}
{"text":"reverse vowels in a given string | utility function to check for vowel ; function to reverse order of vowels ; start two indexes from two corners and move toward each other ; swapping ; ","context":"","code":"def isVowel(c):\n    return (c == 'a' or c == 'A' or c == 'e' or c == 'E' or c ==\n            'i' or c == 'I' or c == 'o' or c == 'O' or c == 'u' or c == 'U')\n\n\ndef reverseVowel(str):\n    i = 0\n    j = len(str) - 1\n    while (i < j):\n        if not isVowel(str[i]):\n            i += 1\n            continue\n        if (not isVowel(str[j])):\n            j -= 1\n            continue\n        str[i], str[j] = str[j], str[i]\n        i += 1\n        j -= 1\n    return str\n","test":"\nif __name__ == \"__main__\":\n    str = \"hello world\"\n    print(*reverseVowel(list(str)), sep=\"\")\n","output":"hollo werld\n","fn_call":"reverseVowel"}
{"text":"minimum number of palindromic subsequences to be removed to empty a binary string | a function to check if a string str is palindrome ; start from leftmost and rightmost corners of str ; keep comparing characters while they are same ; returns count of minimum palindromic subseuqnces to be removed to make string empty ; if string is empty ; if string is palindrome ; if string is not palindrome ; ","context":"","code":"def isPalindrome(str):\n    l = 0\n    h = len(str) - 1\n    while (h > l):\n        if (str[l] != str[h]):\n            return 0\n        l = l + 1\n        h = h - 1\n    return 1\n\n\ndef minRemovals(str):\n    if (str[0] == ''):\n        return 0\n    if (isPalindrome(str)):\n        return 1\n    return 2\n","test":"\nprint(minRemovals(\"010010\"))\nprint(minRemovals(\"0100101\"))\n","output":"1\n2\n","fn_call":"minRemovals"}
{"text":"find the value of xxxx ... . . ( n times ) % m where n is large | iterative function to calculate ( x ^ y ) % p in o ( log y ) ; initialize result ; update x if it is >= p ; if y is odd , multiply x with result ; y must be even now y = y 2 ; function to return xxx ... . . ( n times ) % m ; return the mod by m of smaller numbers ; creating a string of n x 's ; converting the string to int and calculating the modulo ; checking the parity of n ; dividing the number into equal half ; utilizing the formula for even n ; dividing the number into equal half ; utilizing the formula for odd n ; ","context":"","code":"def power(x, y, p):\n    res = 1\n    x = x % p\n    while (y > 0):\n        if (y and 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\n\ndef findModuloByM(X, N, M):\n    if (N < 6):\n        temp = chr(48 + X) * N\n        res = int(temp) % M\n        return res\n    if (N % 2 == 0):\n        half = findModuloByM(X, N \/\/ 2, M) % M\n        res = (half * power(10, N \/\/ 2, M) + half) % M\n        return res\n    else:\n        half = findModuloByM(X, N \/\/ 2, M) % M\n        res = (half * power(10, N \/\/ 2 + 1, M) + half * 10 + X) % M\n        return res\n","test":"\nif __name__ == \"__main__\":\n    X = 6\n    N = 14\n    M = 9\n    print(findModuloByM(X, N, M))\n","output":"3\n","fn_call":"findModuloByM"}
{"text":"check if two circles intersect such that the third circle passes through their points of intersections and centers | python3 program for the above approach ; structure of the circle ; utility function to check if given circles satisfy required criteria ; stores the distance between the centres of c1 and c2 ; stores the status if the given given criteria is satisfied or not ; if c1c2 is less than the sum of the radii of the first 2 circles ; if c3 is the midpoint of the centres at c1 and c2 ; mark flag true ; return flag ; function to check if the given circles satisfy required criteria ; check for the current combination of circles ; check for the next combination ; ","context":"\nfrom math import sqrt\n\n\nclass circle:\n    def __init__(self, a, b, c):\n        self .x = a\n        self .y = b\n        self .r = c\n\n","code":"def check(C):\n    C1C2 = sqrt((C[1].x - C[0].x) * (C[1].x - C[0].x) +\n                (C[1].y - C[0].y) * (C[1].y - C[0].y))\n    flag = 0\n    if (C1C2 < (C[0].r + C[1].r)):\n        if ((C[0].x + C[1].x) == 2 * C[2].x and (C[0].y + C[1].y) == 2 * C[2].y):\n            flag = 1\n    return flag\n\n\ndef IsFairTriplet(c):\n    f = False\n    f |= check(c)\n    for i in range(2):\n        c[0], c[2] = c[2], c[0]\n        f |= check(c)\n    return f\n","test":"\nif __name__ == '__main__':\n    C = [circle(0, 0, 0)for i in range(3)]\n    C[0] = circle(0, 0, 8)\n    C[1] = circle(0, 10, 6)\n    C[2] = circle(0, 5, 5)\n    if (IsFairTriplet(C)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"IsFairTriplet"}
{"text":"program to find the eccentricity of a hyperbola | python3 program for the above approach ; function to find the eccentricity of a hyperbola ; stores the squared ratio of major axis to minor axis ; increment r by 1 ; return the square root of r ; ","context":"\nimport math\n\n","code":"def eccHyperbola(A, B):\n    r = B * B \/ A * A\n    r += 1\n    return math .sqrt(r)\n","test":"\nif __name__ == \"__main__\":\n    A = 3.0\n    B = 2.0\n    print(eccHyperbola(A, B))\n","output":"2.23606797749979\n","fn_call":"eccHyperbola"}
{"text":"calculate area of a cyclic quadrilateral with given side lengths | python3 program for the above approach ; function to find the area of cyclic quadrilateral ; stores the value of half of the perimeter ; stores area of cyclic quadrilateral ; return the resultant area ; ","context":"\nfrom math import sqrt\n\n","code":"def calculateArea(A, B, C, D):\n    S = (A + B + C + D) \/\/ 2\n    area = sqrt((S - A) * (S - B) * (S - C) * (S - D))\n    return area\n","test":"\nif __name__ == '__main__':\n    A = 10\n    B = 15\n    C = 20\n    D = 25\n    print(round(calculateArea(A, B, C, D), 3))\n","output":"273.861\n","fn_call":"calculateArea"}
{"text":"calculate ratio of area of a triangle inscribed in an ellipse and the triangle formed by corresponding points on auxiliary circle | function to calculate ratio of a triangle inscribed in an ellipse to the triangle on the auxiliary circle ; stores the ratio of the semi - major to semi - minor axes ; print the ratio ; ","context":"","code":"def triangleArea(a, b):\n    ratio = b \/ a\n    print(ratio)\n","test":"\nif __name__ == \"__main__\":\n    a = 1\n    b = 2\n    triangleArea(a, b)\n","output":"2.0\n","fn_call":"triangleArea"}
{"text":"program to find the excenters of a triangle | python3 program for the above approach ; function to calculate the distance between a pair of points ; function to calculate the coordinates of the excenters of a triangle ; length of the sides of the triangle ; stores the coordinates of the excenters of the triangle ; for i1 ; for i2 ; for i3 ; print the excenters of the triangle ; ","context":"\nfrom math import sqrt\n\n","code":"def distance(m, n, p, q):\n    return (sqrt(pow(n - m, 2) + pow(q - p, 2) * 1.0))\n\n\ndef Excenters(x1, y1, x2, y2, x3, y3):\n    a = distance(x2, x3, y2, y3)\n    b = distance(x3, x1, y3, y1)\n    c = distance(x1, x2, y1, y2)\n    excenter = [[0, 0]for i in range(4)]\n    excenter[1][0] = ((-(a * x1) + (b * x2) + (c * x3)) \/\/ (-a + b + c))\n    excenter[1][1] = ((-(a * y1) + (b * y2) + (c * y3)) \/\/ (-a + b + c))\n    excenter[2][0] = (((a * x1) - (b * x2) + (c * x3)) \/\/ (a - b + c))\n    excenter[2][1] = (((a * y1) - (b * y2) + (c * y3)) \/\/ (a - b + c))\n    excenter[3][0] = (((a * x1) + (b * x2) - (c * x3)) \/\/ (a + b - c))\n    excenter[3][1] = (((a * y1) + (b * y2) - (c * y3)) \/\/ (a + b - c))\n    for i in range(1, 4):\n        print(int(excenter[i][0]), int(excenter[i][1]))\n","test":"\nif __name__ == '__main__':\n    x1 = 0\n    x2 = 3\n    x3 = 0\n    y1 = 0\n    y2 = 0\n    y3 = 4\n    Excenters(x1, y1, x2, y2, x3, y3)\n","output":"6 6\n-3 3\n2 -2\n","fn_call":"Excenters"}
{"text":"program to find height of a trapezoid | python3 program to implement the above approach ; function to calculate height of the trapezoid ; apply heron 's formula ; calculate the area ; calculate height of trapezoid ; prthe height ; ","context":"\nimport math\n\n","code":"def findHeight(p1, p2, b, c):\n    a = max(p1, p2) - min(p1, p2)\n    s = (a + b + c) \/\/ 2\n    area = math .sqrt(s * (s - a) * (s - b) * (s - c))\n    height = (area * 2) \/ a\n    print(\"Height is: \", height)\n","test":"\np1 = 25\np2 = 10\na = 14\nb = 13\nfindHeight(p1, p2, a, b)\n","output":"Height is:  11.2\n","fn_call":"findHeight"}
{"text":"icositetragonal number | function to find icositetragonal number ; formula to calculate nth icositetragonal number ; ","context":"","code":"def Icositetragonal_num(n):\n    return (22 * n * n - 20 * n) \/ 2\n","test":"\nn = 3\nprint(int(Icositetragonal_num(n)))\nn = 10\nprint(int(Icositetragonal_num(n)))\n","output":"69\n1000\n","fn_call":"Icositetragonal_num"}
{"text":"area of circle inscribed in a isosceles trapezoid | function to find area of circle inscribed in a trapezoid having non - parallel sides m , n ; radius of circle by the formula i . e . root ( m * n ) \/ 2 area of circle = ( 3.141 ) * ( r * * 2 ) ; ","context":"","code":"def area_of_circle(m, n):\n    square_of_radius = (m * n) \/ 4\n    area = (3.141 * square_of_radius)\n    return area\n","test":"\nif __name__ == '__main__':\n    n = 10\n    m = 30\n    print(area_of_circle(m, n))\n","output":"235.575\n","fn_call":"area_of_circle"}
{"text":"area of equilateral triangle inscribed in a circle of radius r | function to find the area of equilateral triangle inscribed in a circle of radius r ; base and height of equilateral triangle ; area using base and height ; ","context":"","code":"def area(R):\n    base = 1.732 * R\n    height = (3 \/ 2) * R\n    area = ((1 \/ 2) * base * height)\n    return area\n","test":"\nif __name__ == '__main__':\n    R = 7\n    print(area(R))\n","output":"63.651\n","fn_call":"area"}
{"text":"area of largest circle that can be inscribed in a semicircle | function to find the area of the circle ; radius cannot be negative ; area of the largest circle ; ","context":"","code":"def circlearea(R):\n    if (R < 0):\n        return -1\n    a = (3.14 * R * R) \/ 4\n    return a\n","test":"\nif __name__ == \"__main__\":\n    R = 2\n    print(circlearea(R))\n","output":"3.14\n","fn_call":"circlearea"}
{"text":"number of pairs of lines having integer intersection points | count number of pairs of lines having eger ersection po ; initialize arrays to store counts ; count number of odd and even pi ; count number of odd and even qi ; return the count of pairs ; ","context":"","code":"def countPairs(P, Q, N, M):\n    A = [0] * 2\n    B = [0] * 2\n    for i in range(N):\n        A[P[i] % 2] += 1\n    for i in range(M):\n        B[Q[i] % 2] += 1\n    return (A[0] * B[0] + A[1] * B[1])\n","test":"\nP = [1, 3, 2]\nQ = [3, 0]\nN = len(P)\nM = len(Q)\nprint(countPairs(P, Q, N, M))\n","output":"3\n","fn_call":"countPairs"}
{"text":"maximum number of line intersections formed through intersection of n planes | function to count maximum number of intersections possible ; ","context":"","code":"def countIntersections(n):\n    return n * (n - 1) \/\/ 2\n","test":"\nn = 3\nprint(countIntersections(n))\n","output":"3\n","fn_call":"countIntersections"}
{"text":"area of a regular pentagram | python3 implementation of the approach ; function to return the area of triangle bcd ; using golden ratio ; calculate area of triangle bcd ; return area of all 5 triangles are the same ; function to return the area of regular pentagon ; calculate the area of regular pentagon using above formula ; return area of regular pentagon ; function to return the area of pentagram ; area of a pentagram is equal to the area of regular pentagon and five times the area of triangle ; ","context":"\nimport math\nPI = 3.14159\n\n","code":"def areaOfTriangle(d):\n    c = 1.618 * d\n    s = (d + c + c) \/ 2\n    area = math .sqrt(s * (s - c) * (s - c) * (s - d))\n    return 5 * area\n\n\ndef areaOfRegPentagon(d):\n    global PI\n    cal = 4 * math .tan(PI \/ 5)\n    area = (5 * d * d) \/ cal\n    return area\n\n\ndef areaOfPentagram(d):\n    return areaOfRegPentagon(d) + areaOfTriangle(d)\n","test":"\nd = 5\nprint(areaOfPentagram(d))\n","output":"139.18735993498925\n","fn_call":"areaOfPentagram"}
{"text":"angle subtended by the chord to center of the circle when the angle subtended by the another equal chord of a congruent circle is given | python 3 program to find the angle subtended by the chord to the centre of the circle when the angle subtended by another equal chord of a congruent circle is given ; ","context":"","code":"def anglequichord(z):\n    print(\"The angle is \", z, \" degrees\")\n","test":"\nif __name__ == \"__main__\":\n    z = 48\n    anglequichord(z)\n","output":"The angle is  48  degrees\n","fn_call":"anglequichord"}
{"text":"program to print ascii value of all digits of a given number | function to convert digits of n to respective ascii values ; ","context":"","code":"def convertToASCII(N):\n    num = str(N)\n    i = 0\n    for ch in num:\n        print(ch, \"(\", ord(ch), \")\")\n","test":"\nN = 36\nconvertToASCII(N)\n","output":"3 ( 51 )\n6 ( 54 )\n","fn_call":"convertToASCII"}
{"text":"a product array puzzle | set 3 | python 3 program for the above approach ; function to form product array with o ( n ) time and o ( 1 ) space ; stores the product of array ; stores the count of zeros ; traverse the array ; if arr [ i ] is not zero ; if arr [ i ] is zero then increment count of z by 1 ; stores the absolute value of the product ; if z is equal to 1 ; if arr [ i ] is not zero ; else ; if count of 0 s at least 2 ; assign arr [ i ] = 0 ; store absolute value of arr [ i ] ; find the value of a \/ b ; if arr [ i ] and product both are less than zero ; if arr [ i ] and product both are greater than zero ; else ; traverse the array arr [ ] ; ","context":"\nimport math\n\n","code":"def productExceptSelf(arr, N):\n    product = 1\n    z = 0\n    for i in range(N):\n        if (arr[i] != 0):\n            product *= arr[i]\n        if (arr[i] == 0):\n            z += 1\n    a = abs(product)\n    for i in range(N):\n        if (z == 1):\n            if (arr[i] != 0):\n                arr[i] = 0\n            else:\n                arr[i] = product\n            continue\n        elif (z > 1):\n            arr[i] = 0\n            continue\n        b = abs(arr[i])\n        curr = round(math .exp(math .log(a) - math .log(b)))\n        if (arr[i] < 0 and product < 0):\n            arr[i] = curr\n        elif (arr[i] > 0 and product > 0):\n            arr[i] = curr\n        else:\n            arr[i] = -1 * curr\n    for i in range(N):\n        print(arr[i], end=\" \")\n","test":"\narr = [10, 3, 5, 6, 2]\nN = len(arr)\nproductExceptSelf(arr, N)\n","output":"180 600 360 300 900 ","fn_call":"productExceptSelf"}
{"text":"count subarrays made up of single | function to count of subarrays made up of single digit integers only ; stores count of subarrays ; stores the count of consecutive single digit numbers in the array ; traverse the array ; increment size of block by 1 ; increment res by count ; assign count = 0 ; ","context":"","code":"def singleDigitSubarrayCount(arr, N):\n    res = 0\n    count = 0\n    for i in range(N):\n        if (arr[i] <= 9):\n            count += 1\n            res += count\n        else:\n            count = 0\n    print(res)\n","test":"\nif __name__ == '__main__':\n    arr = [0, 1, 14, 2, 5]\n    N = len(arr)\n    singleDigitSubarrayCount(arr, N)\n","output":"6\n","fn_call":"singleDigitSubarrayCount"}
{"text":"count integers up to n which can be represented as sum of two or more consecutive numbers | function to check if the number n can be expressed as sum of 2 or more consecutive numbers or not ; function to count integers in the range [ 1 , n ] that can be expressed as sum of 2 or more consecutive numbers ; stores the required count ; ","context":"","code":"def isPossible(N):\n    return ((N & (N - 1)) and N)\n\n\ndef countElements(N):\n    count = 0\n    for i in range(1, N + 1):\n        if (isPossible(i)):\n            count += 1\n    print(count)\n","test":"\nif __name__ == '__main__':\n    N = 15\n    countElements(N)\n","output":"11\n","fn_call":"countElements"}
{"text":"count integers up to n which can be represented as sum of two or more consecutive numbers | function to count integers in the range [ 1 , n ] that can be expressed as sum of 2 or more consecutive numbers ; count powers of 2 up to n ; increment count ; update current power of 2 ; ","context":"","code":"def countElements(N):\n    Cur_Ele = 1\n    Count = 0\n    while (Cur_Ele <= N):\n        Count += 1\n        Cur_Ele = Cur_Ele * 2\n    print(N - Count)\n","test":"\nif __name__ == '__main__':\n    N = 15\n    countElements(N)\n","output":"11\n","fn_call":"countElements"}
{"text":"maximum difference between a pair of adjacent elements by excluding every element once | python 3 program for the above approach ; function to calculate maximum difference between adjacent elements excluding every array element once ; compute maximum adjacent difference for whole array ; store the maximum between arr_max and curr_max ; append the result into a vector ; print the result ; ","context":"\nimport sys\n\n","code":"def maxAdjacent(arr, N):\n    res = []\n    arr_max = -sys .maxsize - 1\n    for i in range(1, N):\n        arr_max = max(arr_max, abs(arr[i - 1] - arr[i]))\n    for i in range(1, N - 1):\n        curr_max = abs(arr[i - 1] - arr[i + 1])\n        ans = max(curr_max, arr_max)\n        res .append(ans)\n    for x in res:\n        print(x, end=\" \")\n    print()\n","test":"\nif __name__ == \"__main__\":\n    arr = [1, 3, 4, 7, 8]\n    N = len(arr)\n    maxAdjacent(arr, N)\n","output":"3 4 4 \n","fn_call":"maxAdjacent"}
{"text":"minimize increments required to make count of even and odd array elements equal | function to find min operations to make even and odd count equal ; odd size will never make odd and even counts equal ; stores the count of even numbers in the array arr [ ] ; stores count of odd numbers in the array arr [ ] ; traverse the array arr [ ] ; if arr [ i ] is an even number ; update cnteven ; odd numbers in arr [ ] ; return absolute difference divided by 2 ; ","context":"","code":"def minimumIncrement(arr, N):\n    if (N % 2 != 0):\n        print(\"-1\")\n        return\n    cntEven = 0\n    cntOdd = 0\n    for i in range(N):\n        if (arr[i] % 2 == 0):\n            cntEven += 1\n    cntOdd = N - cntEven\n    return abs(cntEven - cntOdd) \/\/ 2\n","test":"\nif __name__ == '__main__':\n    arr = [1, 3, 4, 9]\n    N = len(arr)\n    print(minimumIncrement(arr, N))\n","output":"1\n","fn_call":"minimumIncrement"}
{"text":"count ways to construct array with even product from given array such that absolute difference of same indexed elements is at most 1 | function to find count the ways to construct an array , b [ ] such that abs ( a [ i ] - b [ i ] ) <= 1 and product of elements of b [ ] is even ; stores count of arrays b [ ] such that abs ( a [ i ] - b [ i ] ) <= 1 ; stores count of arrays b [ ] whose product of elements is not even ; traverse the array ; update total ; if a [ i ] is an even number ; update oddarray ; print 3 ^ n - 2 ^ x ; ","context":"","code":"def cntWaysConsArray(A, N):\n    total = 1\n    oddArray = 1\n    for i in range(N):\n        total = total * 3\n        if (A[i] % 2 == 0):\n            oddArray *= 2\n    print(total - oddArray)\n","test":"\nif __name__ == \"__main__\":\n    A = [2, 4]\n    N = len(A)\n    cntWaysConsArray(A, N)\n","output":"5\n","fn_call":"cntWaysConsArray"}
{"text":"count numbers up to n whose rightmost set bit is k | function to count the numbers in the range [ 1 , n ] whose rightmost set bit is k ; stores the number whose rightmost set bit is k ; numbers whose rightmost set bit is i ; subtracting the number whose rightmost set bit is i , from n ; since i = k , then the number whose rightmost set bit is k is stored ; ","context":"","code":"def countNumberHavingKthBitSet(N, K):\n    numbers_rightmost_setbit_K = 0\n    for i in range(1, K + 1):\n        numbers_rightmost_bit_i = (N + 1) \/\/ 2\n        N -= numbers_rightmost_bit_i\n        if (i == K):\n            numbers_rightmost_setbit_K = numbers_rightmost_bit_i\n    print(numbers_rightmost_setbit_K)\n","test":"\nif __name__ == '__main__':\n    N = 15\n    K = 2\n    countNumberHavingKthBitSet(N, K)\n","output":"4\n","fn_call":"countNumberHavingKthBitSet"}
{"text":"count odd and even binomial coefficients of n | function to count set bits in binary representation of number n ; count set bits in n ; return the final count ; ","context":"","code":"def countSetBits(N: int) -> int:\n    count = 0\n    while (N):\n        N = N & (N - 1)\n        count += 1\n    return count\n","test":"\nif __name__ == \"__main__\":\n    N = 4\n    bits = countSetBits(N)\n    print(\"Odd : {}\".format(pow(2, bits)))\n    print(\"Even : {}\".format(N + 1 - pow(2, bits)))\n","output":"Odd : 2\nEven : 3\n","fn_call":"countSetBits"}
{"text":"make all array elements even by replacing any pair of array elements with their sum | function to find the minimum number of replacements required to make all array elements even ; stores the count of odd elements ; traverse the array ; increase count of odd elements ; store number of replacements required ; two extra moves will be required to make the last odd element even ; prthe minimum replacements ; ","context":"","code":"def minMoves(arr, N):\n    odd_element_cnt = 0\n    for i in range(N):\n        if (arr[i] % 2 != 0):\n            odd_element_cnt += 1\n    moves = (odd_element_cnt) \/\/ 2\n    if (odd_element_cnt % 2 != 0):\n        moves += 2\n    print(moves)\n","test":"\nif __name__ == '__main__':\n    arr = [5, 6, 3, 7, 20]\n    N = len(arr)\n    minMoves(arr, N)\n","output":"3\n","fn_call":"minMoves"}
{"text":"split squares of first n natural numbers into two sets with minimum absolute difference of their sums | function to partition squares of n natural number in two subset ; store the count of blocks of size 8 ; partition of block of 8 element ; store the minimum subset difference ; partition of n elements to minimize their subset sum difference ; store elements of subset a and b ; if element is of type a ; if the element is of type b ; print the minimum subset difference ; print the first subset ; print the second subset ; ","context":"","code":"def minimumSubsetDifference(N):\n    blockOfSize8 = N \/\/ 8\n    str = \"ABBABAAB\"\n    subsetDifference = 0\n    partition = \"\"\n    while blockOfSize8 != 0:\n        partition = partition + str\n        blockOfSize8 = blockOfSize8 - 1\n    A = []\n    B = []\n    for i in range(N):\n        if partition[i] == 'A':\n            A .append((i + 1) * (i + 1))\n        else:\n            B .append((i + 1) * (i + 1))\n    print(subsetDifference)\n    for i in A:\n        print(i, end=\" \")\n    print()\n    for i in B:\n        print(i, end=\" \")\n","test":"\nN = 8\nminimumSubsetDifference(N)\n","output":"0\n1 16 36 49 \n4 9 25 64 ","fn_call":"minimumSubsetDifference"}
{"text":"largest divisor of a number not divisible by another given number | python3 program to implement the above approach ; function to find the largest number x such that it divides p but is not divisible by q ; stores the frequency count of of all prime factors ; increment the frequency of the current prime factor ; if q is a prime factor ; stores the desired result ; iterate through all divisors of q ; stores the frequency count of current prime divisor on dividing p ; count the frequency of the current prime factor ; if cur is less than frequency then p is the final result ; iterate to get temporary answer ; update current answer ; print the desired result ; ","context":"\nfrom collections import defaultdict\n\n","code":"def findTheGreatestX(P, Q):\n    divisiors = defaultdict(int)\n    i = 2\n    while i * i <= Q:\n        while (Q % i == 0 and Q > 1):\n            Q \/\/= i\n            divisiors[i] += 1\n        i += 1\n    if (Q > 1):\n        divisiors[Q] += 1\n    ans = 0\n    for i in divisiors:\n        frequency = divisiors[i]\n        temp = P\n        cur = 0\n        while (temp % i == 0):\n            temp \/\/= i\n            cur += 1\n        if (cur < frequency):\n            ans = P\n            break\n        temp = P\n        for j in range(cur, frequency - 1, -1):\n            temp \/\/= i\n        ans = max(temp, ans)\n    print(ans)\n","test":"\nif __name__ == \"__main__\":\n    P = 10\n    Q = 4\n    findTheGreatestX(P, Q)\n","output":"10\n","fn_call":"findTheGreatestX"}
{"text":"check if rows of a matrix can be rearranged to make bitwise xor of first column non | function to check if there is any row where number of unique elements are greater than 1 ; iterate over the matrix ; function to check if it is possible to rearrange mat [ ] [ ] such that xor of its first column is non - zero ; find bitwise xor of the first column of mat [ ] [ ] ; if bitwise xor of the first column of mat [ ] [ ] is non - zero ; otherwise check rearrangements ; ","context":"","code":"def checkRearrangements(mat, N, M):\n    for i in range(N):\n        for j in range(1, M):\n            if (mat[i][0] != mat[i][j]):\n                return \"Yes\"\n    return \"No\"\n\n\ndef nonZeroXor(mat, N, M):\n    res = 0\n    for i in range(N):\n        res = res ^ mat[i][0]\n    if (res != 0):\n        return \"Yes\"\n    else:\n        return checkRearrangements(mat, N, M)\n","test":"\nif __name__ == \"__main__\":\n    mat = [[1, 1, 2], [2, 2, 2], [3, 3, 3]]\n    N = len(mat)\n    M = len(mat[0])\n    print(nonZeroXor(mat, N, M))\n","output":"Yes\n","fn_call":"nonZeroXor"}
{"text":"maximize bitwise and of first element with complement of remaining elements for any permutation of given array | function to maximize the value for the given function and the array elements ; vector array to maintain which bit is set for which integer in the given array by saving index of that integer ; check if j - th bit is set for i - th integer ; push the index of that integer in setbit [ j ] ; find the element having highest significant set bit unset in other elements ; place that integer at 0 - th index ; store the maximum and value ; return the answer ; ","context":"","code":"def functionMax(arr, n):\n    setBit = [[]for i in range(32)]\n    for i in range(n):\n        for j in range(32):\n            if (arr[i] & (1 << j)):\n                setBit[j].append(i)\n    i = 31\n    while (i >= 0):\n        if (len(setBit[i]) == 1):\n            temp = arr[0]\n            arr[0] = arr[setBit[i][0]]\n            arr[setBit[i][0]] = temp\n            break\n        i -= 1\n    maxAnd = arr[0]\n    for i in range(1, n, 1):\n        maxAnd = (maxAnd & (~arr[i]))\n    return maxAnd\n","test":"\nif __name__ == '__main__':\n    arr = [1, 2, 4, 8, 16]\n    n = len(arr)\n    print(functionMax(arr, n))\n","output":"16\n","fn_call":"functionMax"}
{"text":"sum of all products of the binomial coefficients of two numbers up to k | function returns ncr i . e . binomial coefficient ; initialize res with 1 ; since c ( n , r ) = c ( n , n - r ) ; evaluating expression ; function to calculate and return the sum of the products ; initialize sum to 0 ; traverse from 0 to k ; ","context":"","code":"def nCr(n, r):\n    res = 1\n    if r > n - r:\n        r = n - r\n    for i in range(r):\n        res *= (n - i)\n        res \/= (i + 1)\n    return res\n\n\ndef solve(n, m, k):\n    sum = 0\n    for i in range(k + 1):\n        sum += nCr(n, i) * nCr(m, k - i)\n    return int(sum)\n","test":"\nif __name__ == '__main__':\n    n = 3\n    m = 2\n    k = 2\n    print(solve(n, m, k))\n","output":"10\n","fn_call":"solve"}
{"text":"fast exponention using bit manipulation | function to return a ^ n ; stores final answer ; check if current lsb is set ; right shift ; ","context":"","code":"def powerOptimised(a, n):\n    ans = 1\n    while (n > 0):\n        last_bit = (n & 1)\n        if (last_bit):\n            ans = ans * a\n        a = a * a\n        n = n >> 1\n    return ans\n","test":"\nif __name__ == '__main__':\n    a = 3\n    n = 5\n    print(powerOptimised(a, n))\n","output":"243\n","fn_call":"powerOptimised"}
{"text":"find m such that gcd of m and given number n is maximum | function to find the integer m such that gcd ( n , m ) is maximum ; initialize variables ; find all the divisors of n and return the maximum divisor ; check if i is divisible by n ; update max_gcd ; return the maximum value ; ","context":"","code":"def findMaximumGcd(n):\n    max_gcd = 1\n    i = 1\n    while (i * i <= n):\n        if n % i == 0:\n            if (i > max_gcd):\n                max_gcd = i\n            if ((n \/ i != i) and (n \/ i != n) and ((n \/ i) > max_gcd)):\n                max_gcd = n \/ i\n        i += 1\n    return (int(max_gcd))\n","test":"\nif __name__ == '__main__':\n    n = 10\n    print(findMaximumGcd(n))\n","output":"5\n","fn_call":"findMaximumGcd"}
{"text":"product of complex numbers using three multiplication operation | function to multiply complex numbers with just three multiplications ; find value of prod1 , prod2 and prod3 ; real part ; imaginary part ; print the result ; ","context":"","code":"def print_product(a, b, c, d):\n    prod1 = a * c\n    prod2 = b * d\n    prod3 = (a + b) * (c + d)\n    real = prod1 - prod2\n    imag = prod3 - (prod1 + prod2)\n    print(real, \" + \", imag, \"i\")\n","test":"\na = 2\nb = 3\nc = 4\nd = 5\nprint_product(a, b, c, d)\n","output":"-7  +  22 i\n","fn_call":"print_product"}
{"text":"insolite numbers | function to check if a number is an insolite numbers ; to store sum of squares of digits ; to store product of squares of digits ; extracting digit ; ","context":"","code":"def isInsolite(n):\n    N = n\n    sum = 0\n    product = 1\n    while (n != 0):\n        r = n % 10\n        sum = sum + r * r\n        product = product * r * r\n        n = n \/\/ 10\n    return ((N % sum == 0) and (N % product == 0))\n","test":"\nif __name__ == '__main__':\n    N = 111\n    if (isInsolite(N)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"isInsolite"}
{"text":"d numbers | python3 implementation for the above approach ; function to find the n - th icosikaipentagon number ; number should be greater than 3 ; check every k in range 2 to n - 1 ; condition for d - number ; ","context":"\nimport math\n\n","code":"def isDNum(n):\n    if n < 4:\n        return False\n    for k in range(2, n):\n        numerator = pow(k, n - 2) - k\n        hcf = math .gcd(n, k)\n        if (hcf == 1 and (numerator % n) != 0):\n            return False\n    return True\n","test":"\nn = 15\nif isDNum(n):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isDNum"}
{"text":"ruth | function to find prime divisors of all numbers from 1 to n ; if the number is prime ; add this prime to all it 's multiples ; function to check ruth - aaron number ; ","context":"","code":"def Sum(N):\n    SumOfPrimeDivisors = [0] * (N + 1)\n    for i in range(2, N + 1):\n        if (SumOfPrimeDivisors[i] == 0):\n            for j in range(i, N + 1, i):\n                SumOfPrimeDivisors[j] += i\n    return SumOfPrimeDivisors[N]\n\n\ndef RuthAaronNumber(n):\n    if (Sum(n) == Sum(n + 1)):\n        return True\n    else:\n        return False\n","test":"\nN = 714\nif (RuthAaronNumber(N)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"RuthAaronNumber"}
{"text":"maximize sum of absolute difference between adjacent elements in array with sum k | function for maximising the sum ; difference is 0 when only one element is present in array ; difference is k when two elements are present in array ; otherwise ; ","context":"","code":"def maxAdjacentDifference(N, K):\n    if (N == 1):\n        return 0\n    if (N == 2):\n        return K\n    return 2 * K\n","test":"\nN = 6\nK = 11\nprint(maxAdjacentDifference(N, K))\n","output":"22\n","fn_call":"maxAdjacentDifference"}
{"text":"sum of all divisors from 1 to n | set 2 | python3 program for the above approach ; functions returns sum of numbers from 1 to n ; functions returns sum of numbers from a + 1 to b ; function returns total sum of divisors ; stores total sum ; finding numbers and its occurence ; sum of product of each number and its occurence ; ","context":"\nmod = 1000000007\n\n","code":"def linearSum(n):\n    return n * (n + 1) \/\/ 2 % mod\n\n\ndef rangeSum(b, a):\n    return (linearSum(b) - (linearSum(a))) % mod\n\n\ndef totalSum(n):\n    result = 0\n    i = 1\n    while True:\n        result += rangeSum(n \/\/ i, n \/\/ (i + 1)) * (i % mod) % mod\n        result %= mod\n        if i == n:\n            break\n        i = n \/\/ (n \/\/ (i + 1))\n    return result\n","test":"\nN = 4\nprint(totalSum(N))\nN = 12\nprint(totalSum(N))\n","output":"15\n127\n","fn_call":"totalSum"}
{"text":"nontrivial undulant numbers | function to check if a string is double string or not ; a and b should not be equal ; condition to check if length is odd make length even ; first half of s ; second half of s ; double string if first and last half are equal ; function to check if n is an nontrivial undulant number ; ","context":"","code":"def isDouble(num):\n    s = str(num)\n    l = len(s)\n    if (s[0] == s[1]):\n        return False\n    if (l % 2 == 1):\n        s = s + s[1]\n        l += 1\n    s1 = s[:l \/\/ 2]\n    s2 = s[l \/\/ 2:]\n    return s1 == s2\n\n\ndef isNontrivialUndulant(N):\n    return N > 100 and isDouble(N)\n","test":"\nn = 121\nif (isNontrivialUndulant(n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isNontrivialUndulant"}
{"text":"megagon number | function to find the nth megagon number ; ","context":"","code":"def MegagonNum(n):\n    return (999998 * n * n - 999996 * n) \/\/ 2\n","test":"\nn = 3\nprint(MegagonNum(n))\n","output":"2999997\n","fn_call":"MegagonNum"}
{"text":"product of all the pairs from the given array | python3 implementation to find the product of all the pairs from the given array ; function to return the product of the elements of all possible pairs from the array ; to store the required product ; nested loop to calculate all possible pairs ; multiply the product of the elements of the current pair ; return the final result ; ","context":"\nmod = 1000000007\n\n","code":"def productPairs(arr, n):\n    product = 1\n    for i in range(n):\n        for j in range(n):\n            product *= (arr[i] % mod * arr[j] % mod) % mod\n            product = product % mod\n    return product % mod\n","test":"\nif __name__ == '__main__':\n    arr = [1, 2, 3]\n    n = len(arr)\n    print(productPairs(arr, n))\n","output":"46656\n","fn_call":"productPairs"}
{"text":"product of all the pairs from the given array | python3 implementation to find the product of all the pairs from the given array ; function to calculate ( x ^ y ) % 1000000007 ; initialize result ; update x if it is more than or equal to p ; if y is odd , multiply x with result ; return the final result ; function to return the product of the elements of all possible pairs from the array ; to store the required product ; iterate for every element of the array ; each element appears ( 2 * n ) times ; ","context":"\nmod = 1000000007\n\n","code":"def power(x, y):\n    p = 1000000007\n    res = 1\n    x = x % p\n    while (y > 0):\n        if ((y & 1) != 0):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\n\ndef productPairs(arr, n):\n    product = 1\n    for i in range(n):\n        product = (product % mod * (int)(power(arr[i], (2 * n))) % mod) % mod\n    return (product % mod)\n","test":"\narr = [1, 2, 3]\nn = len(arr)\nprint(productPairs(arr, n))\n","output":"46656\n","fn_call":"productPairs"}
{"text":"construct an array such that cube sum of all element is a perfect square | function to create and print the array ; initialise the array of size n ; print the array ; ","context":"","code":"def constructArray(N):\n    arr = [0] * N\n    for i in range(1, N + 1):\n        arr[i - 1] = i\n    for i in range(N):\n        print(arr[i], end=\", \")\n","test":"\nN = 6\nconstructArray(N)\n","output":"1, 2, 3, 4, 5, 6, ","fn_call":"constructArray"}
{"text":"count of all subsequence whose product is a composite number | function to check whether a number is prime or not ; function to find number of subsequences whose product is a composite number ; find total non empty subsequence ; find count of prime number and ones ; calculate the non empty one subsequence ; find count of composite subsequence ; ","context":"","code":"def isPrime(n):\n    if (n <= 1):\n        return False\n    for i in range(2, n):\n        if (n % i == 0):\n            return False\n    return True\n\n\ndef countSubsequences(arr, n):\n    totalSubsequence = (int)(pow(2, n) - 1)\n    countPrime = 0\n    countOnes = 0\n    for i in range(n):\n        if (arr[i] == 1):\n            countOnes += 1\n        elif (isPrime(arr[i])):\n            countPrime += 1\n    compositeSubsequence = 0\n    onesSequence = (int)(pow(2, countOnes) - 1)\n    compositeSubsequence = (\n        totalSubsequence -\n        countPrime -\n        onesSequence -\n        onesSequence *\n        countPrime)\n    return compositeSubsequence\n","test":"\nif __name__ == '__main__':\n    arr = [2, 1, 2]\n    n = len(arr)\n    print(countSubsequences(arr, n))\n","output":"2\n","fn_call":"countSubsequences"}
{"text":"find k consecutive integers such that their sum is n | function to check if a number can be expressed as the sum of k consecutive ; finding the first term of ap ; checking if first term is an integer ; loop to print the k consecutive integers ; ","context":"","code":"def checksum(n, k):\n    first_term = ((2 * n) \/ k + (1 - k)) \/ 2.0\n    if (first_term - int(first_term) == 0):\n        for i in range(int(first_term), int(first_term) + k):\n            print(i, end=' ')\n    else:\n        print('-1')\n","test":"\nif __name__ == '__main__':\n    (n, k) = (33, 6)\n    checksum(n, k)\n","output":"3 4 5 6 7 8 ","fn_call":"checksum"}
{"text":"represent n as sum of k even numbers | function to print the representation ; n must be greater than equal to 2 * k and must be even ; ","context":"","code":"def sumEvenNumbers(N, K):\n    check = N - 2 * (K - 1)\n    if (check > 0 and check % 2 == 0):\n        for i in range(K - 1):\n            print(\"2 \", end=\"\")\n        print(check)\n    else:\n        print(\"-1\")\n","test":"\nN = 8\nK = 2\nsumEvenNumbers(N, K)\n","output":"2 6\n","fn_call":"sumEvenNumbers"}
{"text":"smallest number greater than or equal to x whose sum of digits is divisible by y | python3 program to find the smallest number greater than or equal to x and divisible by y ; function that returns the sum of digits of a number ; initialize variable to store the sum ; add the last digit of the number ; remove the last digit from the number ; function that returns the smallest number greater than or equal to x and divisible by y ; initialize result variable ; loop through numbers greater than equal to x ; calculate sum of digits ; check if sum of digits is divisible by y ; ","context":"\nMAXN = 10000000\n\n","code":"def sumOfDigits(n):\n    sum = 0\n    while (n > 0):\n        sum += n % 10\n        n \/\/= 10\n    return sum\n\n\ndef smallestNum(X, Y):\n    res = -1\n    for i in range(X, MAXN):\n        sum_of_digit = sumOfDigits(i)\n        if sum_of_digit % Y == 0:\n            res = i\n            break\n    return res\n","test":"\nif __name__ == '__main__':\n    (X, Y) = (5923, 13)\n    print(smallestNum(X, Y))\n","output":"5939\n","fn_call":"smallestNum"}
{"text":"count the numbers which can convert n to 1 using given operation | function to count the numbers which can convert n to 1 using the given operation ; store all the divisors of n ; if i is a divisor ; if i is not equal to n \/ i ; iterate through all the divisors of n - 1 and count them in answer ; check if n - 1 is a divisor or not ; iterate through all divisors and check for n mod d = 1 or ( n - 1 ) mod d = 0 ; ","context":"","code":"def countValues(N):\n    div = []\n    i = 2\n    while ((i * i) <= N):\n        if (N % i == 0):\n            div .append(i)\n            if (N != i * i):\n                div .append(N \/\/ i)\n        i += 1\n    answer = 0\n    i = 1\n    while ((i * i) <= N - 1):\n        if ((N - 1) % i == 0):\n            if (i * i == N - 1):\n                answer += 1\n            else:\n                answer += 2\n        i += 1\n    for d in div:\n        K = N\n        while (K % d == 0):\n            K \/\/= d\n        if ((K - 1) % d == 0):\n            answer += 1\n    return answer\n","test":"\nif __name__ == \"__main__\":\n    N = 6\n    print(countValues(N))\n","output":"3\n","fn_call":"countValues"}
{"text":"maximum possible prime divisors that can exist in numbers having exactly n divisors | function to find the maximum possible prime divisors of a number can have with n divisors ; number of time number divided by 2 ; divide by other prime numbers ; if the last number of also prime then also include it ; ","context":"","code":"def findMaxPrimeDivisor(n):\n    max_possible_prime = 0\n    while (n % 2 == 0):\n        max_possible_prime += 1\n        n = n \/\/ 2\n    i = 3\n    while (i * i <= n):\n        while (n % i == 0):\n            max_possible_prime += 1\n            n = n \/\/ i\n        i = i + 2\n    if (n > 2):\n        max_possible_prime += 1\n    print(max_possible_prime)\n","test":"\nn = 4\nfindMaxPrimeDivisor(n)\n","output":"2\n","fn_call":"findMaxPrimeDivisor"}
{"text":"count ways to express a number as sum of exactly two numbers | function returns the count of ways express a number as sum of two numbers . ; ","context":"","code":"def CountWays(n):\n    ans = (n - 1) \/\/ 2\n    return ans\n","test":"\nN = 8\nprint(CountWays(N))\n","output":"3\n","fn_call":"CountWays"}
{"text":"divide array in two maximum equal length arrays of similar and dissimilar elements | function to find the max - size to which an array can be divided into 2 equal parts ; vector to find the frequency of each element of list ; find the maximum frequency element present in list arr ; find total unique elements present in list arr ; find the max - size to which an array arr [ ] can be splitted ; find the first array containing same elements ; find the second array containing unique elements ; ","context":"","code":"def Solve(arr, size, n):\n    v = [0] * (n + 1)\n    for i in range(size):\n        v[arr[i]] += 1\n    max1 = max(set(arr), key=v .count)\n    diff1 = n + 1 - v .count(0)\n    max_size = max(min(v[max1] - 1, diff1), min(v[max1], diff1 - 1))\n    print(\"Maximum size is :\", max_size)\n    print(\"The First Array Is : \")\n    for i in range(max_size):\n        print(max1, end=\" \")\n        v[max1] -= 1\n    print()\n    print(\"The Second Array Is : \")\n    for i in range(n + 1):\n        if (v[i] > 0):\n            print(i, end=\" \")\n            max_size -= 1\n        if (max_size < 1):\n            break\n    print()\n","test":"\nif __name__ == \"__main__\":\n    n = 7\n    arr = [1, 2, 1, 5, 1, 6, 7, 2]\n    size = len(arr)\n    Solve(arr, size, n)\n","output":"Maximum size is : 3\nThe First Array Is : \n1 1 1 \nThe Second Array Is : \n2 5 6 \n","fn_call":"Solve"}
{"text":"find sum of xor of all unordered triplets of the array | iterative function to calculate ( x ^ y ) % p in o ( log y ) ; initialize result ; update x if it is more than or equal to p ; if y is odd , multiply x with result ; y must be even now y = y >> 1 y = y \/ 2 ; returns n ^ ( - 1 ) mod p ; returns ncr % p using fermat 's little theorem. ; base case ; fill factorial array so that we can find all factorial of r , n and n - r ; function returns sum of xor of all unordered triplets of the array ; iterating over the bits ; number of elements whith k 'th bit  1 and 0 respectively ; checking if k 'th bit is 1 ; adding this bit 's part to the answer ; ","context":"","code":"def power(x, y, p):\n    res = 1\n    x = x % p\n\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\n\ndef modInverse(n, p):\n    return power(n, p - 2, p)\n\n\ndef nCrModPFermat(n, r, p):\n    if (r == 0):\n        return 1\n    if (n < r):\n        return 0\n    fac = [0]*(n + 1)\n    fac[0] = 1\n    for i in range(1, n + 1):\n        fac[i] = fac[i - 1] * i % p\n\n    return (fac[n] * modInverse(fac[r], p) % p *\n            modInverse(fac[n - r], p) % p) % p\n\n\ndef SumOfXor(a, n):\n\n    mod = 10037\n\n    answer = 0\n    for k in range(32):\n\n        x = 0\n        y = 0\n\n        for i in range(n):\n            if (a[i] & (1 << k)):\n                x += 1\n            else:\n                y += 1\n        answer += ((1 << k) % mod * (nCrModPFermat(x, 3, mod)\n                                     + x * nCrModPFermat(y, 2, mod))\n                   % mod) % mod\n\n    return answer\n","test":"\nif __name__ == '__main__':\n    n = 5\n    A = [3, 5, 2, 18, 7]\n\n    print(SumOfXor(A, n))\n","output":"132\n","fn_call":"SumOfXor"}
{"text":"probability of not getting two consecutive heads together in n tosses of coin | python3 implementation to find the probability of not getting two consecutive heads together when n coins are tossed ; function to compute the n - th fibonacci number in the sequence where a = 2 and b = 3 ; the first two numbers in the sequence are initialized ; base cases ; loop to compute the fibonacci sequence based on the first two initialized numbers ; function to find the probability of not getting two consecutive heads when n coins are tossed ; computing the number of favourable cases ; computing the number of all possible outcomes for n tosses ; ","context":"\nimport math\n\n","code":"def probability(N):\n    a = 2\n    b = 3\n    if N == 1:\n        return a\n    elif N == 2:\n        return b\n    else:\n        for i in range(3, N + 1):\n            c = a + b\n            a = b\n            b = c\n        return b\n\n\ndef operations(N):\n    x = probability(N)\n    y = math .pow(2, N)\n    return round(x \/ y, 2)\n","test":"\nif __name__ == '__main__':\n    N = 10\n    print(operations(N))\n","output":"0.14\n","fn_call":"operations"}
{"text":"check if number formed by joining two numbers is perfect cube | function to check if a number is a perfect cube or not ; function to check if concatenation of two numbers is a perfect cube or not ; convert numbers to string using to_string ( ) ; concatenate the numbers and convert it into integer ; check if concatenated value is perfect cube or not ; ","context":"","code":"def isPerfectCube(x):\n    x = abs(x)\n    return int(round(x ** (1. \/ 3)))**3 == x\n\n\ndef checkCube(a, b):\n    s1 = str(a)\n    s2 = str(b)\n    c = int(s1 + s2)\n    if (isPerfectCube(c)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\nif __name__ == '__main__':\n    a = 6\n    b = 4\n    checkCube(a, b)\n","output":"Yes\n","fn_call":"checkCube"}
{"text":"largest number in given array formed by repeatedly combining two same elements | function to return the largest sum ; variable to store the largest sum ; map to store the frequencies of each element ; store the frequencies ; loop to combine duplicate elements and update the sum in the map ; if j is a duplicate element ; update the frequency of 2 * j ; if the new sum is greater than maximum value , update the maximum ; returns the largest sum ; ","context":"","code":"def largest_sum(arr, n):\n    maximum = -1\n    m = dict()\n    for i in arr:\n        m[i] = m .get(i, 0) + 1\n    for j in list(m):\n        if ((j in m) and m[j] > 1):\n            x, y = 0, 0\n            if 2 * j in m:\n                m[2 * j] = m[2 * j] + m[j] \/\/ 2\n            else:\n                m[2 * j] = m[j] \/\/ 2\n            if (2 * j > maximum):\n                maximum = 2 * j\n    return maximum\n","test":"\nif __name__ == '__main__':\n    arr = [1, 1, 2, 4, 7, 8]\n    n = len(arr)\n    print(largest_sum(arr, n))\n","output":"16\n","fn_call":"largest_sum"}
{"text":"check if it is possible to make x and y zero at same time with given operation | function to check if it is possible to make x and y can become 0 at same time ; check the given conditions ; ","context":"","code":"def canBeReduced(x, y):\n    maxi = max(x, y)\n    mini = min(x, y)\n    if (((x + y) % 3) == 0 and maxi <= 2 * mini):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","test":"\nif __name__ == '__main__':\n    x = 6\n    y = 9\n    canBeReduced(x, y)\n","output":"YES\n","fn_call":"canBeReduced"}
{"text":"wheel factorization algorithm | python3 program to check if the given number is prime using wheel factorization method ; function to check if a given number x is prime or not ; the wheel for checking prime number ; base case ; check for the number taken as basis ; check for wheel here i , acts as the layer of the wheel ; check for the list of sieve in arr [ ] ; if number is greater than sqrt ( n ) break ; check if n is a multiple of prime number in the wheel ; if at any iteration isprime is false , break from the loop ; ","context":"\nimport math\n\n","code":"def isPrime(N):\n    isPrime = True\n    arr = [7, 11, 13, 17, 19, 23, 29, 31]\n    if (N < 2):\n        isPrime = False\n    if (N % 2 == 0 or N % 3 == 0 or N % 5 == 0):\n        isPrime = False\n    for i in range(0, int(math .sqrt(N)), 30):\n        for c in arr:\n            if (c > int(math .sqrt(N))):\n                break\n            else:\n                if (N % (c + i) == 0):\n                    isPrime = False\n                    break\n            if (not isPrime):\n                break\n    if (isPrime):\n        print(\"Prime Number\")\n    else:\n        print(\"Not a Prime Number\")\n","test":"\nif __name__ == \"__main__\":\n    N = 121\n    isPrime(N)\n","output":"Not a Prime Number\n","fn_call":"isPrime"}
{"text":"find all pairs possible from the given array | function to prall possible pairs from the array ; nested loop for all possible pairs ; ","context":"","code":"def printPairs(arr, n):\n    for i in range(n):\n        for j in range(n):\n            print(\"(\", arr[i], \",\", arr[j], \")\", end=\", \")\n","test":"\narr = [1, 2]\nn = len(arr)\nprintPairs(arr, n)\n","output":"( 1 , 1 ), ( 1 , 2 ), ( 2 , 1 ), ( 2 , 2 ), ","fn_call":"printPairs"}
{"text":"sum of cubes of all subsets of given array | python3 implementation of the approach ; function to return ( 2 ^ p % mod ) ; function to return the sum of cubes of subsets ; cubing the elements and adding it to ans ; ","context":"\nmod = int(1e9) + 7\n\n","code":"def power(p):\n    res = 1\n    for i in range(1, p + 1):\n        res *= 2\n        res %= mod\n    return res % mod\n\n\ndef subset_cube_sum(A):\n    n = len(A)\n    ans = 0\n    for i in A:\n        ans += (i * i * i) % mod\n        ans %= mod\n    return (ans * power(n - 1)) % mod\n","test":"\nif __name__ == \"__main__\":\n    A = [1, 2]\n    print(subset_cube_sum(A))\n","output":"18\n","fn_call":"subset_cube_sum"}
{"text":"check if a circle lies inside another circle or not | python3 program to check if one circle lies inside another circle or not . ; ","context":"","code":"def circle(x1, y1, x2, y2, r1, r2):\n    distSq = (((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)))**(.5)\n    if (distSq + r2 == r1):\n        print(\n            \"The smaller circle lies completely\"\n            \" inside the bigger circle with \"\n            \"touching each other \"\n            \"at a point of circumference. \")\n    elif (distSq + r2 < r1):\n        print(\n            \"The smaller circle lies completely\"\n            \" inside the bigger circle without\"\n            \" touching each other \"\n            \"at a point of circumference. \")\n    else:\n        print(\n            \"The smaller does not lies inside\"\n            \" the bigger circle completely.\")\n","test":"\nx1, y1 = 10, 8\nx2, y2 = 1, 2\nr1, r2 = 30, 10\ncircle(x1, y1, x2, y2, r1, r2)\n","output":"The smaller circle lies completely inside the bigger circle without touching each other at a point of circumference. \n","fn_call":"circle"}
{"text":"length of direct common tangent between two intersecting circles | function to find the length of the direct common tangent ; ","context":"","code":"def lengtang(r1, r2, d):\n    print(\"The length of the direct common tangent is \",\n          ((d ** 2) - ((r1 - r2)**2))**(1 \/ 2))\n","test":"\nr1 = 4\nr2 = 6\nd = 3\nlengtang(r1, r2, d)\n","output":"The length of the direct common tangent is  2.23606797749979\n","fn_call":"lengtang"}
{"text":"radius of the circle when the width and height of an arc is given | function to find the radius ; ","context":"","code":"def rad(d, h):\n    print(\"The radius of the circle is\", ((d * d) \/ (8 * h) + h \/ 2))\n","test":"\nd = 4\nh = 1\nrad(d, h)\n","output":"The radius of the circle is 2.5\n","fn_call":"rad"}
{"text":"shortest distance from the centre of a circle to a chord | function to find the shortest distance ; ","context":"","code":"def shortdis(r, d):\n    print(\"The shortest distance \", end=\"\")\n    print(\"from the chord to centre \", end=\"\")\n    print(((r * r) - ((d * d) \/ 4))**(1 \/ 2))\n","test":"\nr = 4\nd = 3\nshortdis(r, d)\n","output":"The shortest distance from the chord to centre 3.7080992435478315\n","fn_call":"shortdis"}
{"text":"length of direct common tangent between the two non | python3 program to find the length of the direct common tangent between two circles which do not touch each other ; function to find the length of the direct common tangent ; ","context":"\nimport math\n\n","code":"def lengtang(r1, r2, d):\n    print(\"The length of the direct common tangent is\",\n          (((d ** 2) - ((r1 - r2)**2))**(1 \/ 2)))\n","test":"\nr1 = 4\nr2 = 6\nd = 12\nlengtang(r1, r2, d)\n","output":"The length of the direct common tangent is 11.832159566199232\n","fn_call":"lengtang"}
{"text":"biggest square that can be inscribed within an equilateral triangle | function to find the side of the square ; the side cannot be negative ; side of the square ; ","context":"","code":"def square(a):\n    if (a < 0):\n        return -1\n    x = 0.464 * a\n    return x\n","test":"\na = 5\nprint(square(a))\n","output":"2.3200000000000003\n","fn_call":"square"}
{"text":"apothem of a n | python 3 program to find the apothem of a regular polygon with given side length ; function to find the apothem of a regular polygon ; side and side length cannot be negative ; degree converted to radians ; ","context":"\nfrom math import tan\n\n","code":"def polyapothem(n, a):\n    if (a < 0 and n < 0):\n        return -1\n    return a \/ (2 * tan((180 \/ n) * 3.14159 \/ 180))\n","test":"\nif __name__ == '__main__':\n    a = 9\n    n = 6\n    print('{0:.6}'.format(polyapothem(n, a)))\n","output":"7.79424\n","fn_call":"polyapothem"}
{"text":"area of a n | python 3 program to find the area of a regular polygon with given side length ; function to find the area of a regular polygon ; side and side length cannot be negative ; area degree converted to radians ; ","context":"\nfrom math import tan\n\n","code":"def polyarea(n, a):\n    if (a < 0 and n < 0):\n        return -1\n    A = (a * a * n) \/ (4 * tan((180 \/ n) * 3.14159 \/ 180))\n    return A\n","test":"\nif __name__ == '__main__':\n    a = 9\n    n = 6\n    print('{0:.6}'.format(polyarea(n, a)))\n","output":"210.444\n","fn_call":"polyarea"}
{"text":"side of a regular n | python 3 implementation of the approach ; function to calculate the side of the polygon circumscribed in a circle ; ","context":"\nfrom math import sin\n\n","code":"def calculateSide(n, r):\n    theta = 360 \/ n\n    theta_in_radians = theta * 3.14 \/ 180\n    return 2 * r * sin(theta_in_radians \/ 2)\n","test":"\nif __name__ == '__main__':\n    n = 3\n    r = 5\n    print('{0:.5}'.format(calculateSide(n, r)))\n","output":"8.6576\n","fn_call":"calculateSide"}
{"text":"largest right circular cylinder within a frustum | function to find the biggest right circular cylinder ; radii and height cannot be negative ; radius of right circular cylinder ; height of right circular cylinder ; volume of right circular cylinder ; ","context":"","code":"def cyl(r, R, h):\n    if (h < 0 and r < 0 and R < 0):\n        return -1\n    r1 = r\n    h1 = h\n    V = 3.14 * pow(r1, 2) * h1\n    return round(V, 2)\n","test":"\nif __name__ == \"__main__\":\n    r, R, h = 7, 11, 6\n    print(cyl(r, R, h))\n","output":"923.16\n","fn_call":"cyl"}
{"text":"program to find the perimeter of a regular polygon | function to calculate the perimeter ; calculate perimeter ; ","context":"","code":"def Perimeter(s, n):\n    perimeter = 1\n    perimeter = n * s\n    return perimeter\n","test":"\nif __name__ == '__main__':\n    n = 5\n    s = 2.5\n    peri = Perimeter(s, n)\n    print(\"Perimeter of Regular Polygon with\",\n          n, \"sides of length\", s, \"=\", peri)\n","output":"Perimeter of Regular Polygon with 5 sides of length 2.5 = 12.5\n","fn_call":"Perimeter"}
{"text":"area of the biggest possible rhombus that can be inscribed in a rectangle | function to find the area of the biggest rhombus ; the length and breadth cannot be negative ; area of the rhombus ; ","context":"","code":"def rhombusarea(l, b):\n    if (l < 0 or b < 0):\n        return -1\n    return (l * b) \/ 2\n","test":"\nif __name__ == '__main__':\n    l = 16\n    b = 6\n    print(rhombusarea(l, b))\n","output":"48.0\n","fn_call":"rhombusarea"}
{"text":"check if a point lies inside a rectangle | set | function to find if given point lies inside a given rectangle or not . ; ","context":"","code":"def FindPoint(x1, y1, x2, y2, x, y):\n    if (x > x1 and x < x2 and y > y1 and y < y2):\n        return True\n    else:\n        return False\n","test":"\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = 0, 0, 10, 8\n    x, y = 1, 5\n    if FindPoint(x1, y1, x2, y2, x, y):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"FindPoint"}
{"text":"distance between a point and a plane in 3 d | python program to find the perpendicular ( shortest ) distance between a point and a plane in 3 d . ; function to find distance ; ","context":"\nimport math\n\n","code":"def shortest_distance(x1, y1, z1, a, b, c, d):\n    d = abs((a * x1 + b * y1 + c * z1 + d))\n    e = (math .sqrt(a * a + b * b + c * c))\n    print(\"Perpendicular distance is\", d \/ e)\n","test":"\nx1 = 4\ny1 = -4\nz1 = 3\na = 2\nb = -2\nc = 5\nd = 8\nshortest_distance(x1, y1, z1, a, b, c, d)\n","output":"Perpendicular distance is 6.789028582272215\n","fn_call":"shortest_distance"}
{"text":"program to find the volume of a triangular prism | function to find the volume of triangular prism ; formula to find volume ; ","context":"","code":"def findVolume(l, b, h):\n    return ((l * b * h) \/ 2)\n","test":"\nl = 18\nb = 12\nh = 9\nprint(\"Volume of triangular prism: \", findVolume(l, b, h))\n","output":"Volume of triangular prism:  972.0\n","fn_call":"findVolume"}
{"text":"check if given four integers ( or sides ) make rectangle | function to check if the given integers value make a rectangle ; check all sides of rectangle combinations ; ","context":"","code":"def isRectangle(a, b, c, d):\n    if (a == b and d == c) or (a == c and b == d) or (a == d and b == c):\n        return True\n    else:\n        return False\n","test":"\na, b, c, d = 1, 2, 3, 4\nprint(\"Yes\"if isRectangle(a, b, c, d)else \"No\")\n","output":"No\n","fn_call":"isRectangle"}
{"text":"program to find the mid | function to find the midpoint of a line ; ","context":"","code":"def midpoint(x1, x2, y1, y2):\n    print((x1 + x2) \/\/ 2, \" , \", (y1 + y2) \/\/ 2)\n","test":"\nx1, y1, x2, y2 = -1, 2, 3, -6\nmidpoint(x1, x2, y1, y2)\n","output":"1  ,  -2\n","fn_call":"midpoint"}
{"text":"arc length from given angle | python3 code to calculate length of an arc ; function to calculate arc length ; ","context":"\nimport math\n\n","code":"def arcLength(diameter, angle):\n    if angle >= 360:\n        print(\"Angle cannot be formed\")\n        return 0\n    else:\n        arc = (3.142857142857143 * diameter) * (angle \/ 360.0)\n        return arc\n","test":"\ndiameter = 25.0\nangle = 45.0\narc_len = arcLength(diameter, angle)\nprint(arc_len)\n","output":"9.821428571428571\n","fn_call":"arcLength"}
{"text":"check if a line touches or intersects a circle | python program to check if a line touches or intersects or outside a circle . ; finding the distance of line from center . ; checking if the distance is less than , greater than or equal to radius . ; ","context":"\nimport math\n\n","code":"def checkCollision(a, b, c, x, y, radius):\n    dist = ((abs(a * x + b * y + c)) \/ math .sqrt(a * a + b * b))\n    if (radius == dist):\n        print(\"Touch\")\n    elif (radius > dist):\n        print(\"Intersect\")\n    else:\n        print(\"Outside\")\n","test":"\nradius = 5\nx = 0\ny = 0\na = 3\nb = 4\nc = 25\ncheckCollision(a, b, c, x, y, radius)\n","output":"Touch\n","fn_call":"checkCollision"}
{"text":"program to find circumcenter of a triangle | function to find the line given two points ; function which converts the input line to its perpendicular bisector . it also inputs the points whose mid - point lies on the bisector ; c = - bx + ay ; returns the intersection point of two lines ; the lines are parallel . this is simplified by returning a pair of ( 10.0 ) * * 19 ; line pq is represented as ax + by = c ; line qr is represented as ex + fy = g ; converting lines pq and qr to perpendicular vbisectors . after this , l = ax + by = c m = ex + fy = g ; the point of intersection of l and m gives the circumcenter ; ","context":"","code":"def lineFromPoints(P, Q, a, b, c):\n    a = Q[1] - P[1]\n    b = P[0] - Q[0]\n    c = a * (P[0]) + b * (P[1])\n    return a, b, c\n\n\ndef perpendicularBisectorFromLine(P, Q, a, b, c):\n    mid_point = [(P[0] + Q[0]) \/\/ 2, (P[1] + Q[1]) \/\/ 2]\n    c = -b * (mid_point[0]) + a * (mid_point[1])\n    temp = a\n    a = -b\n    b = temp\n    return a, b, c\n\n\ndef lineLineIntersection(a1, b1, c1, a2, b2, c2):\n    determinant = a1 * b2 - a2 * b1\n    if (determinant == 0):\n        return [(10.0)**19, (10.0)**19]\n    else:\n        x = (b2 * c1 - b1 * c2) \/\/ determinant\n        y = (a1 * c2 - a2 * c1) \/\/ determinant\n        return [x, y]\n\n\ndef findCircumCenter(P, Q, R):\n    a, b, c = 0.0, 0.0, 0.0\n    a, b, c = lineFromPoints(P, Q, a, b, c)\n    e, f, g = 0.0, 0.0, 0.0\n    e, f, g = lineFromPoints(Q, R, e, f, g)\n    a, b, c = perpendicularBisectorFromLine(P, Q, a, b, c)\n    e, f, g = perpendicularBisectorFromLine(Q, R, e, f, g)\n    circumcenter = lineLineIntersection(a, b, c, e, f, g)\n    if (circumcenter[0] == (10.0)**19 and circumcenter[1] == (10.0)**19):\n        print(\"The two perpendicular bisectors found come parallel\")\n        print(\"Thus, the given points do not form a triangle and are collinear\")\n    else:\n        print(\"The circumcenter of the triangle PQR is: \", end=\"\")\n        print(\"(\", circumcenter[0], \",\", circumcenter[1], \")\")\n","test":"\nif __name__ == '__main__':\n    P = [6, 0]\n    Q = [0, 0]\n    R = [0, 8]\n    findCircumCenter(P, Q, R)\n","output":"The circumcenter of the triangle PQR is: ( 3 , 4 )\n","fn_call":"findCircumCenter"}
{"text":"program to find area of a triangle | ( x [ i ] , y [ i ] ) are coordinates of i 'th point. ; initialize area ; calculate value of shoelace formula ; return absolute value ; ","context":"","code":"def polygonArea(X, Y, n):\n    area = 0.0\n    j = n - 1\n    for i in range(0, n):\n        area = area + (X[j] + X[i]) * (Y[j] - Y[i])\n    return abs(area \/\/ 2.0)\n","test":"\nX = [0, 2, 4]\nY = [1, 3, 7]\nn = len(X)\nprint(polygonArea(X, Y, n))\n","output":"24.0\n","fn_call":"polygonArea"}
{"text":"maximize sum of lsbs of bitwise or of all possible n \/ 2 pairs from given array | function top get lsb value of v ; binary conversion ; function to find the sum of lsbs of all possible pairs of the given array ; stores the lsb of array elements ; storing the lsb values ; sort the array lab_arr [ ] ; taking pairwise sum to get the maximum sum of lsb ; print the result ; ","context":"","code":"def chk(v):\n    v = list(bin(v)[2:])\n    v .reverse()\n    if ('1' in v):\n        v = v .index('1')\n        return (2 ** v)\n    else:\n        return 0\n\n\ndef sumOfLSB(arr, N):\n    lsb_arr = []\n    for i in range(N):\n        lsb_arr .append(chk(arr[i]))\n    lsb_arr .sort(reverse=True)\n    ans = 0\n    for i in range(0, N - 1, 2):\n        ans += (lsb_arr[i + 1])\n    print(ans)\n","test":"\nN = 5\narr = [1, 2, 3, 4, 5]\nsumOfLSB(arr, N)\n","output":"3\n","fn_call":"sumOfLSB"}
{"text":"count of subsequences having odd bitwise and values in the given array | function to find count of subsequences having odd bitwise and value ; stores count of odd elements ; traverse the array arr [ ] ; if x is odd increment count ; return answer ; ","context":"","code":"def countSubsequences(arr):\n    odd = 0\n    for x in arr:\n        if (x & 1):\n            odd = odd + 1\n    return (1 << odd) - 1\n","test":"\nif __name__ == \"__main__\":\n    arr = [1, 3, 3]\n    print(countSubsequences(arr))\n","output":"7\n","fn_call":"countSubsequences"}
{"text":"count pairs from an array with absolute difference not less than the minimum element in the pair | function to find the number of pairs ( i , j ) such that abs ( a [ i ] - a [ j ] ) is at least the minimum of ( a [ i ] , a [ j ] ) ; stores the resultant count of pairs ; iterate over the range [ 0 , n ] ; iterate from arr [ i ] - ( i % arr [ i ] ) till n with an increment of arr [ i ] ; count the possible pairs ; return the total count ; ","context":"","code":"def getPairsCount(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(arr[i] - (i % arr[i]), n, arr[i]):\n            if (i < j and abs(arr[i] - arr[j]) >= min(arr[i], arr[j])):\n                count += 1\n    return count\n","test":"\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3]\n    N = len(arr)\n    print(getPairsCount(arr, N))\n","output":"3\n","fn_call":"getPairsCount"}
{"text":"minimum steps to change n to 1 by changing it to 2 * n or n \/ 10 at any step | function to check if n can be changed to 1 or not . ; count the number of 2 in the prime factorisation of n ; count the number of 5 in the prime factorisation of n ; ","context":"","code":"def check(N):\n    twos = 0\n    fives = 0\n    while (N % 2 == 0):\n        N \/= 2\n        twos += 1\n    while (N % 5 == 0):\n        N \/= 5\n        fives += 1\n    if (N == 1 and twos <= fives):\n        print(2 * fives - twos)\n    else:\n        print(-1)\n","test":"\nif __name__ == '__main__':\n    N = 50\n    check(N)\n","output":"3\n","fn_call":"check"}
{"text":"sum of elements in given range from array formed by infinitely concatenating given array | function to find the sum of elements in a given range of an infinite array ; stores the sum of array elements from l to r ; traverse from l to r ; print the resultant sum ; ","context":"","code":"def rangeSum(arr, N, L, R):\n    sum = 0\n    for i in range(L - 1, R, 1):\n        sum += arr[i % N]\n    print(sum)\n","test":"\nif __name__ == '__main__':\n    arr = [5, 2, 6, 9]\n    L = 10\n    R = 13\n    N = len(arr)\n    rangeSum(arr, N, L, R)\n","output":"22\n","fn_call":"rangeSum"}
{"text":"sum of elements in given range from array formed by infinitely concatenating given array | function to find the sum of elements in a given range of an infinite array ; stores the prefix sum ; calculate the prefix sum ; stores the sum of elements from 1 to l - 1 ; stores the sum of elements from 1 to r ; print the resultant sum ; ","context":"","code":"def rangeSum(arr, N, L, R):\n    prefix = [0 for i in range(N + 1)]\n    prefix[0] = 0\n    for i in range(1, N + 1, 1):\n        prefix[i] = prefix[i - 1] + arr[i - 1]\n    leftsum = ((L - 1) \/\/ N) * prefix[N] + prefix[(L - 1) % N]\n    rightsum = (R \/\/ N) * prefix[N] + prefix[R % N]\n    print(rightsum - leftsum)\n","test":"\nif __name__ == '__main__':\n    arr = [5, 2, 6, 9]\n    L = 10\n    R = 13\n    N = len(arr)\n    rangeSum(arr, N, L, R)\n","output":"22\n","fn_call":"rangeSum"}
{"text":"exponential factorial of n | function to find exponential factorial of a ","context":"","code":"def ExpoFactorial(N):\n    res = 1\n    mod = (int)(1000000007)\n    for i in range(2, N + 1):\n        res = pow(i, res, mod)\n    return res\n","test":"\nN = 4\nprint(ExpoFactorial(N))\n","output":"262144\n","fn_call":"ExpoFactorial"}
{"text":"maximum subarray sum in an array created after repeated concatenation | set | function to find contiguous subarray with maximum sum if array is repeated k times ; store the sum of the array arr [ ] ; traverse the array and find sum ; store the answer ; if k = 1 ; apply kadane algorithm to find sum ; return the answer ; stores the twice repeated array ; traverse the range [ 0 , 2 * n ] ; stores the maximum suffix sum ; stores the maximum prefix sum ; apply kadane algorithm for 2 repetition of the array ; if the sum of the array is greater than 0 ; return the answer ; ","context":"","code":"def maxSubArraySumRepeated(arr, N, K):\n    sum = 0\n    for i in range(N):\n        sum += arr[i]\n    curr = arr[0]\n    ans = arr[0]\n    if (K == 1):\n        for i in range(1, N, 1):\n            curr = max(arr[i], curr + arr[i])\n            ans = max(ans, curr)\n        return ans\n    V = []\n    for i in range(2 * N):\n        V .append(arr[i % N])\n    maxSuf = V[0]\n    maxPref = V[2 * N - 1]\n    curr = V[0]\n    for i in range(1, 2 * N, 1):\n        curr += V[i]\n        maxPref = max(maxPref, curr)\n    curr = V[2 * N - 1]\n    i = 2 * N - 2\n    while (i >= 0):\n        curr += V[i]\n        maxSuf = max(maxSuf, curr)\n        i -= 1\n    curr = V[0]\n    for i in range(1, 2 * N, 1):\n        curr = max(V[i], curr + V[i])\n        ans = max(ans, curr)\n    if (sum > 0):\n        temp = sum * (K - 2)\n        ans = max(ans, max(temp + maxPref, temp + maxSuf))\n    return ans\n","test":"\nif __name__ == '__main__':\n    arr = [10, 20, -30, -1, 40]\n    N = len(arr)\n    K = 10\n    print(maxSubArraySumRepeated(arr, N, K))\n","output":"391\n","fn_call":"maxSubArraySumRepeated"}
{"text":"count of subarrays with largest element at least twice the largest of remaining elements | function to find count of subarrays which have max element greater than twice maximum of all other elements ; stores the count of subarrays ; generate all possible subarrays ; stores the maximum element of the subarray ; stores the maximum of all other elements ; find the maximum element in the subarray [ i , j ] ; find the maximum of all other elements ; if the maximum of subarray is greater than twice the maximum of other elements ; print the maximum value obtained ; ","context":"","code":"def countSubarray(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i, n, 1):\n            mxSubarray = 0\n            mxOther = 0\n            for k in range(i, j + 1, 1):\n                mxSubarray = max(mxSubarray, arr[k])\n            for k in range(0, i, 1):\n                mxOther = max(mxOther, arr[k])\n            for k in range(j + 1, n, 1):\n                mxOther = max(mxOther, arr[k])\n            if (mxSubarray > (2 * mxOther)):\n                count += 1\n    print(count)\n","test":"\nif __name__ == '__main__':\n    arr = [1, 6, 10, 9, 7, 3]\n    N = len(arr)\n    countSubarray(arr, N)\n","output":"4\n","fn_call":"countSubarray"}
{"text":"count of subarrays with largest element at least twice the largest of remaining elements | function to find count of subarrays which have max element greater than twice maximum of all other elements ; stores the maximum element of the array ; traverse the given array ; if the value of 2 * arr [ i ] is greater than mx ; update the value of l and break out of loop ; if the value 2 * arr [ i ] is greater than mx ; update the value of r and break out of loop ; print the final answer ; ","context":"","code":"def countSubarray(arr, n):\n    count = 0\n    L = 0\n    R = 0\n    mx = max(arr)\n    for i in range(n):\n        if (arr[i] * 2 > mx):\n            L = i\n            break\n    i = n - 1\n    while (i >= 0):\n        if (arr[i] * 2 > mx):\n            R = i\n            break\n        i -= 1\n    print((L + 1) * (n - R))\n","test":"\nif __name__ == '__main__':\n    arr = [1, 6, 10, 9, 7, 3]\n    N = len(arr)\n    countSubarray(arr, N)\n","output":"4\n","fn_call":"countSubarray"}
{"text":"find prime number just less than and just greater each element of given array | python3 program for the above approach ; utility function to check for primality of a number x by checking whether x haaccs any factors other than 1 and itself . ; factor found ; function to print primes just less than and just greater than of each element in an array ; traverse the array ; traverse for finding prime just less than a [ i ] ; prime just less than a [ i ] found ; traverse for finding prime just greater than a [ i ] ; prime just greater than a [ i ] found ; ","context":"\nfrom math import sqrt\n\n","code":"def isPrime(X):\n    for i in range(2, int(sqrt(X)) + 1, 1):\n        if (X % i == 0):\n            return False\n    return True\n\n\ndef printPrimes(A, N):\n    for i in range(N):\n        j = A[i] - 1\n        while (1):\n            if (isPrime(j)):\n                print(j, end=\" \")\n                break\n            j -= 1\n        j = A[i] + 1\n        while (1):\n            if (isPrime(j)):\n                print(j, end=\" \")\n                break\n            j += 1\n        print(\"\",  end=\"\")\n","test":"\nif __name__ == '__main__':\n    A = [17, 28]\n    N = len(A)\n    printPrimes(A, N)\n","output":"13 19 23 29 ","fn_call":"printPrimes"}
{"text":"kth smallest element in an array that contains a [ i ] exactly b [ i ] times | function to find the kth smallest element that contains a [ i ] exactly b [ i ] times ; traverse the given array ; stores the frequency of every elements ; traverse the given array ; initialize a variable to store the prefix sums ; iterate over the range [ 0 , m ] ; increment sum by freq [ i ] ; if sum is greater than or equal to k ; return the current element as answer ; return - 1 ; ","context":"","code":"def KthSmallest(A, B, N, K):\n    M = 0\n    for i in range(N):\n        M = max(A[i], M)\n    freq = [0] * (M + 1)\n    for i in range(N):\n        freq[A[i]] += B[i]\n    sum = 0\n    for i in range(M + 1):\n        sum += freq[i]\n        if (sum >= K):\n            return i\n    return -1\n","test":"\nif __name__ == \"__main__\":\n    A = [3, 4, 5]\n    B = [2, 1, 3]\n    N = len(A)\n    K = 4\n    print(KthSmallest(A, B, N, K))\n","output":"5\n","fn_call":"KthSmallest"}
{"text":"bitwise or of bitwise and of all subarrays of an array | function to find the bitwise or of bitwise and of all subarrays ; stores the required result ; generate all the subarrays ; store the current element ; find the bitwise or ; update the result ; print the result ; ","context":"","code":"def findbitwiseOR(a, n):\n    res = 0\n    for i in range(n):\n        curr_sub_array = a[i]\n        res = res | curr_sub_array\n        for j in range(i, n):\n            curr_sub_array = curr_sub_array & a[j]\n            res = res | curr_sub_array\n    print(res)\n","test":"\nif __name__ == '__main__':\n    A = [1, 2, 3]\n    N = len(A)\n    findbitwiseOR(A, N)\n","output":"3\n","fn_call":"findbitwiseOR"}
{"text":"bitwise or of bitwise and of all subarrays of an array | function to find the bitwise or of bitwise and of all consecutive subsets of the array ; stores the required result ; traverse the given array ; print the result ; ","context":"","code":"def findbitwiseOR(a, n):\n    res = 0\n    for i in range(n):\n        res = res | a[i]\n    print(res)\n","test":"\nif __name__ == '__main__':\n    A = [1, 2, 3]\n    N = len(A)\n    findbitwiseOR(A, N)\n","output":"3\n","fn_call":"findbitwiseOR"}
{"text":"check if sum of digits of a number exceeds the product of digits of that number | function to check if the sum of the digits of n is strictly greater than the product of the digits of n or not ; stores the sum and the product of the digits of n ; stores the last digit if n ; increment the value of sumofdigits ; update the prodofdigit ; divide n by 10 ; print the result ; ","context":"","code":"def check(n):\n    sumOfDigit = 0\n    prodOfDigit = 1\n    while n > 0:\n        rem = n % 10\n        sumOfDigit += rem\n        prodOfDigit *= rem\n        n = n \/\/ 10\n    if sumOfDigit > prodOfDigit:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\nN = 1234\ncheck(N)\n","output":"No\n","fn_call":"check"}
{"text":"print all distinct even and odd prefix bitwise xors of first n natural numbers | print all distinct even & odd prefix bitwise xors from 1 to n ; print the even number ; print the odd number ; ","context":"","code":"def evenOddBitwiseXOR(N):\n    print(\"Even: \", 0, end=\" \")\n    for i in range(4, N + 1, 4):\n        print(i, end=\" \")\n    print()\n    print(\"Odd: \", 1, end=\" \")\n    for i in range(4, N + 1, 4):\n        print(i - 1, end=\" \")\n    if (N % 4 == 2):\n        print(N + 1)\n    elif (N % 4 == 3):\n        print(N)\n","test":"\nN = 6\nevenOddBitwiseXOR(N)\n","output":"Even:  0 4 \nOdd:  1 3 7\n","fn_call":"evenOddBitwiseXOR"}
{"text":"lexicographically largest permutation possible by a swap that is smaller than a given array | function to lexicographic largest permutation possible by a swap that is smaller than given array ; find the index of first element such that arr [ i ] > arr [ i + 1 ] ; if the array is sorted in increasing order ; find the index of first element which is smaller than arr [ i ] ; if arr [ j ] = = arr [ j - 1 ] ; decrement j ; swap the element ; pr the array arr [ ] ; ","context":"","code":"def findPermutation(arr):\n    N = len(arr)\n    i = N - 2\n    while (i >= 0 and arr[i] <= arr[i + 1]):\n        i -= 1\n    if (i == -1):\n        print(\"-1\")\n        return\n    j = N - 1\n    while (j > i and arr[j] >= arr[i]):\n        j -= 1\n    while (j > i and arr[j] == arr[j - 1]):\n        j -= 1\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n    for it in arr:\n        print(it, end=\" \")\n","test":"\narr = [1, 2, 5, 3, 4, 6]\nfindPermutation(arr)\n","output":"1 2 4 3 5 6 ","fn_call":"findPermutation"}
{"text":"absolute difference between the count of odd and even factors of n | function to find the smallest prime factor of all the numbers using sieve of eratosthenes ; stores whether any number is prime or not ; initialize smallest factor as 2 for all the even numbers ; iterate over the range [ 3 , n ] ; if i is prime ; iterate all multiples of i ; i is the smallest prime factor of i * j ; function to find the absolute difference between the count of odd and even factors of n ; stores the smallest prime factor of i ; fill values in s [ ] using sieve of eratosthenes ; stores the total number of factors and the total number of odd and even factors ; store the current prime factor of the number n ; store the power of current prime factor ; loop while n is greater than 1 ; if n also has smallest prime factor as curr , then increment cnt by 1 ; update only total number of factors if curr is 2 ; update total number of factors and total number of odd factors ; update current prime factor as s [ n ] and count as 1 ; calculate the number of even factors ; print the difference ; ","context":"","code":"def sieveOfEratosthenes(N, s):\n    prime = [False] * (N + 1)\n    for i in range(2, N + 1, 2):\n        s[i] = 2\n    for i in range(3, N, 2):\n        if (prime[i] == False):\n            s[i] = i\n            for j in range(i, N, 2):\n                if j * i > N:\n                    break\n                if (not prime[i * j]):\n                    prime[i * j] = True\n                    s[i * j] = i\n\n\ndef findDifference(N):\n    s = [0] * (N + 1)\n    sieveOfEratosthenes(N, s)\n    total, odd, even = 1, 1, 0\n    curr = s[N]\n    cnt = 1\n    while (N > 1):\n        N \/\/= s[N]\n        if (curr == s[N]):\n            cnt += 1\n            continue\n        if (curr == 2):\n            total = total * (cnt + 1)\n        else:\n            total = total * (cnt + 1)\n            odd = odd * (cnt + 1)\n        curr = s[N]\n        cnt = 1\n    even = total - odd\n    print(abs(even - odd))\n","test":"\nif __name__ == '__main__':\n    N = 12\n    findDifference(N)\n","output":"2\n","fn_call":"findDifference"}
{"text":"calculate median from given values of mean and mode | function to find the median of a group of data with given mean and mode ; calculate the median ; print the median ; ","context":"","code":"def findMedian(Mean, Mode):\n    Median = (2 * Mean + Mode) \/\/ 3\n    print(Median)\n","test":"\nMode = 6\nMean = 3\nfindMedian(Mean, Mode)\n","output":"4\n","fn_call":"findMedian"}
{"text":"program to find the magnitude of a vector | python3 program for the above approach ; function to calculate magnitude of a 3 dimensional vector ; stores the sum of squares of coordinates of a vector ; return the magnitude ; ","context":"\nfrom math import sqrt\n\n","code":"def vectorMagnitude(x, y, z):\n    sum = x * x + y * y + z * z\n    return sqrt(sum)\n","test":"\nx = 1\ny = 2\nz = 3\nprint(vectorMagnitude(x, y, z))\n","output":"3.7416573867739413\n","fn_call":"vectorMagnitude"}
{"text":"program to find the product of a number with a mersenne number | python3 program for the above approach ; function to find prodcut of a mersenne number with another number ; stores the power of 2 of integer m + 1 ; return the product ; ","context":"\nimport math\n\n","code":"def multiplyByMersenne(N, M):\n    x = int(math .log2(M + 1))\n    return ((N << x) - N)\n","test":"\nN = 4\nM = 15\nprint(multiplyByMersenne(N, M))\n","output":"60\n","fn_call":"multiplyByMersenne"}
{"text":"nearest power of 2 of nearest perfect squares of non | python3 program for the above approach ; function to find nearest perfect square of num ; calculate square root of num ; calculate perfect square ; find the nearest perfect square ; function to find the power of 2 nearest to the number num ; calculate log base 2 of num ; highest power of 2 which is <= num ; function to find the nearest perfect square and the nearest power of 2 of every array element whose occurrence is 1 ; stores frequency of array elements ; traverse the array and update frequency of current array element ; traverse the map freq ; if the frequency is 1 ; find nearest perfect square ; print the nearest power of 2 ; if the any does not contain any non - repeating elements ; ","context":"\nfrom math import sqrt, log2, pow\n\n","code":"def perfectSquare(num):\n    sr = int(sqrt(num))\n    a = sr * sr\n    b = (sr + 1) * (sr + 1)\n    if ((num - a) < (b - num)):\n        return a\n    else:\n        return b\n\n\ndef powerOfTwo(num):\n    lg = int(log2(num))\n    p = int(pow(2, lg))\n    return p\n\n\ndef uniqueElement(arr, N):\n    ans = True\n    freq = {}\n    for i in range(N):\n        if (arr[i] in freq):\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    res = []\n    for key, value in freq .items():\n        if (value == 1):\n            ans = False\n            ps = perfectSquare(key)\n            res .append(powerOfTwo(ps))\n    res .sort(reverse=False)\n    for x in res:\n        print(x, end=\" \")\n    if (ans):\n        print(\"-1\")\n","test":"\nif __name__ == '__main__':\n    arr = [4, 11, 4, 3, 4]\n    N = len(arr)\n    uniqueElement(arr, N)\n","output":"4 8 ","fn_call":"uniqueElement"}
{"text":"partition array into two subarrays with every element in the right subarray strictly greater than every element in left subarray | python3 program for the above approach ; function to partition the array into two non - empty subarrays which satisfies the given condition ; stores the suffix min array ; stores the minimum of a suffix ; traverse the array in reverse ; update minimum ; store the minimum ; stores the maximum value of a prefix ; stores the index of the partition ; update max ; if max is less than min [ i + 1 ] ; store the index of partition ; break ; if ind is not - 1 ; print first subarray ; print second subarray ; otherwise ; ","context":"\nimport sys\n\n","code":"def partitionArray(a, n):\n    Min = [0] * n\n    Mini = sys.maxsize\n    for i in range(n - 1, -1, -1):\n        Mini = min(Mini, a[i])\n        Min[i] = Mini\n    Maxi = -sys.maxsize - 1\n    ind = -1\n    for i in range(n - 1):\n        Maxi = max(Maxi, a[i])\n        if (Maxi < Min[i + 1]):\n            ind = i\n            break\n    if (ind != -1):\n        for i in range(ind + 1):\n            print(a[i], end=\" \")\n        print()\n        for i in range(ind + 1, n, 1):\n            print(a[i], end=\" \")\n    else:\n        print(\"Impossible\")\n","test":"\narr = [5, 3, 2, 7, 9]\nN = 5\npartitionArray(arr, N)\n","output":"5 3 2 \n7 9 ","fn_call":"partitionArray"}
{"text":"check if a number can be represented as sum of k positive integers out of which at least k | python3 program for the above approach ; function to count all prime factors of a given number ; count the number of 2 s that divides n ; since n is odd at this point , skip one element ; while i divides n , count i and divide n ; if n is a prime number greater than 2 ; function to find the sum of first n nearly prime numbers ; store the required sum ; add this number if it is satisfies the condition ; increment count of nearly prime numbers ; function to check if n can be represented as sum of k different positive integers out of which at least k - 1 of them are nearly prime ; store the sum of first k - 1 nearly prime numbers ; if sum is great than or equal to n ; otherwise , pryes ; ","context":"\nimport math\n\n","code":"def countPrimeFactors(n):\n    count = 0\n    while (n % 2 == 0):\n        n = n \/\/ 2\n        count += 1\n    for i in range(3, int(math .sqrt(n) + 1), 2):\n        while (n % i == 0):\n            n = n \/\/ i\n            count += 1\n    if (n > 2):\n        count += 1\n    return (count)\n\n\ndef findSum(n):\n    sum = 0\n    i = 1\n    num = 2\n    while (i <= n):\n        if (countPrimeFactors(num) == 2):\n            sum += num\n            i += 1\n        num += 1\n    return sum\n\n\ndef check(n, k):\n    s = findSum(k - 1)\n    if (s >= n):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n","test":"\nn = 100\nk = 6\ncheck(n, k)\n","output":"Yes\n","fn_call":"check"}
{"text":"count ways to represent an integer as an exponent | python3 program for the above approach ; function to calculate gcd of a and b using euclidean algorithm ; iterate until b is non - zero ; return the gcd ; function to count the number of ways n can be expressed as x ^ y ; base case ; stores the gcd of powers ; calculate the degree of 2 in n ; calculate the degree of prime numbers in n ; calculate the degree of prime ' i ' in n ; if n is a prime , g becomes 1. ; stores the number of ways to represent n as x ^ y ; find the number of factors of g ; update the count of ways ; iterate to find rest of the prime numbers ; find the power of i ; update the count of ways ; if g is prime ; return the total number of ways ; ","context":"\nimport math\n\n","code":"def gcd(a, b):\n    while (b > 0):\n        rem = a % b\n        a = b\n        b = rem\n    return a\n\n\ndef countNumberOfWays(n):\n    if (n == 1):\n        return -1\n    g = 0\n    power = 0\n    while (n % 2 == 0):\n        power += 1\n        n \/\/= 2\n    g = gcd(g, power)\n    for i in range(3, int(math .sqrt(g)) + 1, 2):\n        power = 0\n        while (n % i == 0):\n            power += 1\n            n \/\/= i\n        g = gcd(g, power)\n    if (n > 2):\n        g = gcd(g, 1)\n    ways = 1\n    power = 0\n    while (g % 2 == 0):\n        g \/\/= 2\n        power += 1\n    ways *= (power + 1)\n    for i in range(3, int(math .sqrt(g)) + 1, 2):\n        power = 0\n        while (g % i == 0):\n            power += 1\n            g \/= i\n        ways *= (power + 1)\n    if (g > 2):\n        ways *= 2\n    return ways\n","test":"\nN = 64\nprint(countNumberOfWays(N))\n","output":"4\n","fn_call":"countNumberOfWays"}
{"text":"highest power of 2 less than or equal to given integer | python3 implementation of the above approach ; function to return the lowest power of 2 close to given positive number ; floor function is used to determine the value close to the number ; function to return the lowest power of 2 close to given negative number ; ceil function is used for negative numbers as - 1 > - 4. it would be opposite to positive numbers where 1 < 4 ; function to find the highest power of 2 ; to check if the given number is positive or negative ; if the number is negative , then the ceil of the positive number is calculated and negative sign is added ; ","context":"\nfrom math import floor, ceil, log2\n\n","code":"def powOfPositive(n):\n    pos = floor(log2(n))\n    return 2 ** pos\n\n\ndef powOfNegative(n):\n    pos = ceil(log2(n))\n    return (-1 * pow(2, pos))\n\n\ndef highestPowerOf2(n):\n    if (n > 0):\n        print(powOfPositive(n))\n    else:\n        n = -n\n        print(powOfNegative(n))\n","test":"\nif __name__ == \"__main__\":\n    n = -24\n    highestPowerOf2(n)\n","output":"-32\n","fn_call":"highestPowerOf2"}
{"text":"number of cards needed build a house of cards of a given level n | function to find number of cards needed ; ","context":"","code":"def noOfCards(n):\n    return n * (3 * n + 1) \/\/ 2\n","test":"\nn = 3\nprint(noOfCards(n))\n","output":"15\n","fn_call":"noOfCards"}
{"text":"find smallest possible number from a given large number with same count of digits | function for finding the smallest possible number after swapping the digits any number of times ; variable to store the final answer ; array to store the count of occurrence of each digit ; loop to calculate the number of occurrences of every digit ; loop to get smallest number ; returning the answer ; ","context":"","code":"def smallestPoss(s, n):\n    ans = \"\"\n    arr = [0] * 10\n    for i in range(n):\n        arr[ord(s[i]) - 48] += 1\n    for i in range(10):\n        for j in range(arr[i]):\n            ans = ans + str(i)\n    return ans\n","test":"\nif __name__ == '__main__':\n    N = 15\n    K = \"325343273113434\"\n    print(smallestPoss(K, N))\n","output":"112233333344457\n","fn_call":"smallestPoss"}
{"text":"count the subarray with sum strictly greater than the sum of remaining elements | function to count the number of sub - arrays with sum strictly greater than the remaining elements of array ; for loop for beginning point of a subarray ; for loop for ending point of the subarray ; initialise subarray_sum and remaining_sum to 0 ; for loop to calculate the sum of generated subarray ; for loop to calculate the sum remaining array element ; checking for condition when subarray sum is strictly greater than remaining sum of array element ; ","context":"","code":"def Count_subarray(arr, n):\n    subarray_sum, remaining_sum, count = 0, 0, 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray_sum = 0\n            remaining_sum = 0\n            for k in range(i, j + 1):\n                subarray_sum += arr[k]\n            for l in range(i):\n                remaining_sum += arr[l]\n            for l in range(j + 1, n):\n                remaining_sum += arr[l]\n            if (subarray_sum > remaining_sum):\n                count += 1\n    return count\n","test":"\nif __name__ == '__main__':\n    arr = [10, 9, 12, 6]\n    n = len(arr)\n    print(Count_subarray(arr, n))\n","output":"5\n","fn_call":"Count_subarray"}
{"text":"count the subarray with sum strictly greater than the sum of remaining elements | python3 implementation of the above approach ; calculating total sum of given array ; for loop for beginning point of a subarray ; initialise subarray_sum to 0 ; for loop for calculating subarray_sum and remaining_sum ; calculating subarray_sum and corresponding remaining_sum ; checking for the condition when subarray sum is strictly greater than the remaining sum of the array element ; ","context":"","code":"def Count_subarray(arr, n):\n    total_sum = 0\n    count = 0\n    for i in range(n):\n        total_sum += arr[i]\n    for i in range(n):\n        subarray_sum = 0\n        for j in range(i, n):\n            subarray_sum += arr[j]\n            remaining_sum = total_sum - subarray_sum\n            if (subarray_sum > remaining_sum):\n                count += 1\n    return count\n","test":"\nif __name__ == \"__main__\":\n    arr = [10, 9, 12, 6]\n    n = len(arr)\n    print(Count_subarray(arr, n))\n","output":"5\n","fn_call":"Count_subarray"}
{"text":"remove one element to get maximum xor | function to return the maximized xor after removing an element from the array ; find xor of the complete array ; to store the final answer ; iterating through the array to find the final answer ; return the final answer ; ","context":"","code":"def maxXOR(arr, n):\n    xorArr = 0\n    for i in range(n):\n        xorArr ^= arr[i]\n    ans = 0\n    for i in range(n):\n        ans = max(ans, (xorArr ^ arr[i]))\n    return ans\n","test":"\narr = [1, 1, 3]\nn = len(arr)\nprint(maxXOR(arr, n))\n","output":"2\n","fn_call":"maxXOR"}
{"text":"count of numbers from the range [ l , r ] which contains at least one digit that divides k | function that returns true if num contains at least one digit that divides k ; get the last digit ; if the digit is non - zero and it divides k ; remove the last digit ; there is no digit in num that divides k ; function to return the required count of elements from the given range which contain at least one digit that divides k ; to store the result ; for every number from the range ; if any digit of the current number divides k ; ","context":"","code":"def digitDividesK(num, k):\n    while (num):\n        d = num % 10\n        if (d != 0 and k % d == 0):\n            return True\n        num = num \/\/ 10\n    return False\n\n\ndef findCount(l, r, k):\n    count = 0\n    for i in range(l, r + 1):\n        if (digitDividesK(i, k)):\n            count += 1\n    return count\n","test":"\nl = 20\nr = 35\nk = 45\nprint(findCount(l, r, k))\n","output":"10\n","fn_call":"findCount"}
{"text":"check if a given number is factorial of any number | function to check if the given number is a factorial of any number ; ","context":"","code":"def isFactorial(n):\n    i = 1\n    while (True):\n        if (n % i == 0):\n            n \/\/= i\n        else:\n            break\n        i += 1\n    if (n == 1):\n        return True\n    else:\n        return False\n","test":"\nif __name__ == \"__main__\":\n    n = 24\n    ans = isFactorial(n)\n    if (ans == 1):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"isFactorial"}
{"text":"remove an element to minimize the lcm of the given array | python3 implementation of the above approach ; function to return the lcm of two numbers ; function to return the minimum lcm after removing a single element from the given array ; prefix and suffix arrays ; single state dynamic programming relation for storing lcm of first i elements from the left in prefix [ i ] ; initializing suffix array ; single state dynamic programming relation for storing lcm of all the elements having index greater than or equal to i in suffix [ i ] ; if first or last element of the array has to be removed ; if any other element is replaced ; return the minimum lcm ; ","context":"\nfrom math import gcd\n\n","code":"def lcm(a, b):\n    GCD = gcd(a, b)\n    return (a * b) \/\/ GCD\n\n\ndef MinLCM(a, n):\n    Prefix = [0] * (n + 2)\n    Suffix = [0] * (n + 2)\n    Prefix[1] = a[0]\n    for i in range(2, n + 1):\n        Prefix[i] = lcm(Prefix[i - 1], a[i - 1])\n    Suffix[n] = a[n - 1]\n    for i in range(n - 1, 0, -1):\n        Suffix[i] = lcm(Suffix[i + 1], a[i - 1])\n    ans = min(Suffix[2], Prefix[n - 1])\n    for i in range(2, n):\n        ans = min(ans, lcm(Prefix[i - 1], Suffix[i + 1]))\n    return ans\n","test":"\nif __name__ == \"__main__\":\n    a = [5, 15, 9, 36]\n    n = len(a)\n    print(MinLCM(a, n))\n","output":"45\n","fn_call":"MinLCM"}
{"text":"number of coloured 0 's in an n | function to return the count of coloured 0 s in an n - level hexagon ; ","context":"","code":"def count(n):\n    return n * (3 * n - 1) \/\/ 2\n","test":"\nif __name__ == \"__main__\":\n    n = 3\n    print(count(n))\n","output":"12\n","fn_call":"count"}
{"text":"minimum value to be assigned to the elements so that sum becomes greater than initial sum | function to return the minimum required value ; find the sum of the array elements ; return the required value ; ","context":"","code":"def findMinValue(arr, n):\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return (sum \/\/ n) + 1\n","test":"\narr = [4, 2, 1, 10, 6]\nn = len(arr)\nprint(findMinValue(arr, n))\n","output":"5\n","fn_call":"findMinValue"}
{"text":"color all boxes in line such that every m consecutive boxes are unique | python3 implementation of the approach ; function to return ( m ! % mod ) ; ","context":"\nMOD = 1000000007\n\n","code":"def modFact(n, m):\n    result = 1\n    for i in range(1, m + 1):\n        result = (result * i) % MOD\n    return result\n","test":"\nn = 3\nm = 2\nprint(modFact(n, m))\n","output":"2\n","fn_call":"modFact"}
{"text":"sum of squares of all subsets of given array | python3 implementation of the approach ; function to return ( 2 ^ p % mod ) ; function to return the sum of squares of subsets ; squaring the elements and adding it to ans ; ","context":"\nmod = 10 ** 9 + 7\n\n","code":"def power(p):\n    res = 1\n    for i in range(1, p + 1):\n        res *= 2\n        res %= mod\n    return res % mod\n\n\ndef subset_square_sum(A):\n    n = len(A)\n    ans = 0\n    for i in A:\n        ans += i * i % mod\n        ans %= mod\n    return ans * power(n - 1) % mod\n","test":"\nA = [3, 7]\nprint(subset_square_sum(A))\n","output":"116\n","fn_call":"subset_square_sum"}
{"text":"find the number of pairs such that their gcd is equals to 1 | python3 program to find the number of pairs such that gcd equals to 1 ; function to calculate least prime factor of each number ; if it is a prime number ; for all multiples which are not visited yet . ; function to find the value of mobius function for all the numbers from 1 to n ; if number is one ; if number has a squared prime factor ; multiply - 1 with the previous number ; function to find the number of pairs such that gcd equals to 1 ; to store maximum number ; to store frequency of each number ; find frequency and maximum number ; to store number of pairs with gcd equals to 1 ; traverse through the all possible elements ; return the number of pairs ; ","context":"\nN = 100050\nlpf = [0 for i in range(N)]\nmobius = [0 for i in range(N)]\n\n","code":"def least_prime_factor():\n    for i in range(2, N):\n        if (lpf[i] == 0):\n            for j in range(i, N, i):\n                if (lpf[j] == 0):\n                    lpf[j] = i\n\n\ndef Mobius():\n    for i in range(1, N):\n        if (i == 1):\n            mobius[i] = 1\n        else:\n            if (lpf[(i \/\/ lpf[i])] == lpf[i]):\n                mobius[i] = 0\n            else:\n                mobius[i] = -1 * mobius[i \/\/ lpf[i]]\n\n\ndef gcd_pairs(a, n):\n    maxi = 0\n    fre = [0 for i in range(N)]\n    for i in range(n):\n        fre[a[i]] += 1\n        maxi = max(a[i], maxi)\n    least_prime_factor()\n    Mobius()\n    ans = 0\n    for i in range(1, maxi + 1):\n        if (mobius[i] == 0):\n            continue\n        temp = 0\n        for j in range(i, maxi + 1, i):\n            temp += fre[j]\n        ans += temp * (temp - 1) \/\/ 2 * mobius[i]\n    return ans\n","test":"\na = [1, 2, 3, 4, 5, 6]\nn = len(a)\nprint(gcd_pairs(a, n))\n","output":"11\n","fn_call":"gcd_pairs"}
{"text":"comparing x ^ y and y ^ x for very large values of x and y | python3 implementation of the approach ; function to compare x ^ y and y ^ x ; storing values of x ^ y and y ^ x ; comparing values ; ","context":"\nfrom math import log\n\n","code":"def compareVal(x, y):\n    a = y * log(x)\n    b = x * log(y)\n    if (a > b):\n        print(x, \"^\", y, \">\", y, \"^\", x)\n    elif (a < b):\n        print(x, \"^\", y, \"<\", y, \"^\", x)\n    elif (a == b):\n        print(x, \"^\", y, \"=\", y, \"^\", x)\n","test":"\nif __name__ == \"__main__\":\n    x = 4\n    y = 5\n    compareVal(x, y)\n","output":"4 ^ 5 > 5 ^ 4\n","fn_call":"compareVal"}
{"text":"euler zigzag numbers ( alternating permutation ) | function to prfirst n zigzag numbers ; to store factorial and n 'th zig zag number ; initialize factorial upto n ; set first two zig zag numbers ; print first two zig zag number ; print the rest zig zag numbers ; binomial ( n , k ) * a ( k ) * a ( n - k ) ; store the value ; print the number ; ","context":"","code":"def ZigZag(n):\n    fact = [0 for i in range(n + 1)]\n    zig = [0 for i in range(n + 1)]\n    fact[0] = 1\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i\n    zig[0] = 1\n    zig[1] = 1\n    print(\"zig zag numbers: \", end=\" \")\n    print(zig[0], zig[1], end=\" \")\n    for i in range(2, n):\n        sum = 0\n        for k in range(0, i):\n            sum += ((fact[i - 1] \/\/ (fact[i - 1 - k] * fact[k]))\n                    * zig[k] * zig[i - 1 - k])\n        zig[i] = sum \/\/ 2\n        print(sum \/\/ 2, end=\" \")\n","test":"\nn = 10\nZigZag(n)\n","output":"zig zag numbers:  1 1 1 2 5 16 61 272 1385 7936 ","fn_call":"ZigZag"}
{"text":"gijswijt 's sequence | if the sequence is a ( 1 ) a ( 2 ) a ( 3 ) . . a ( n - 1 ) check if the sequence can be represented as x * ( y ^ k ) find the largest value of k ; count ; pattern of elements of size i from the end of sequence ; count ; extract the pattern in a reverse order ; check how many times the pattern is repeated ; if the element dosent match ; if the end of pattern is reached set value of k = 0 and increase the count ; return the max count ; print first n terms of gijswijt 's sequence ; set the count ; stoes the element ; print the first n terms of the sequence ; push the element ; find the count for next number ; ","context":"","code":"def find_count(ele):\n    count = 0\n    for i in range(len(ele)):\n        p = []\n        c = 0\n        j = len(ele) - 1\n        while j >= (len(ele) - 1 - i) and j >= 0:\n            p .append(ele[j])\n            j -= 1\n        j = len(ele) - 1\n        k = 0\n        while j >= 0:\n            if ele[j] != p[k]:\n                break\n            j -= 1\n            k += 1\n            if k == len(p):\n                c += 1\n                k = 0\n        count = max(count, c)\n    return count\n\n\ndef solve(n):\n    count = 1\n    ele = []\n    for i in range(n):\n        print(count, end=\" \")\n        ele .append(count)\n        count = find_count(ele)\n","test":"\nif __name__ == \"__main__\":\n    n = 10\n    solve(n)\n","output":"1 1 2 1 1 2 2 2 3 1 ","fn_call":"solve"}
{"text":"wedderburn \u2013 etherington number | stores the wedderburn etherington numbers ; function to return the nth wedderburn etherington numbers ; base case ; if n is even n = 2 x ; get x ; a ( 2 x ) = a ( 1 ) a ( 2 x - 1 ) + a ( 2 ) a ( 2 x - 2 ) + ... + a ( x - 1 ) a ( x + 1 ) ; a ( x ) ( a ( x ) + 1 ) \/ 2 ; store the ans ; return the required answer ; if n is odd ; a ( 2 x - 1 ) = a ( 1 ) a ( 2 x - 2 ) + a ( 2 ) a ( 2 x - 3 ) + ... + a ( x - 1 ) a ( x ) , ; store the ans ; return the required answer ; function to prfirst n wedderburn etherington numbers ; store first 3 numbers ; prn terms ; ","context":"\nstore = dict()\n\n","code":"def Wedderburn(n):\n    if (n <= 2):\n        return store[n]\n    elif (n % 2 == 0):\n        x = n \/\/ 2\n        ans = 0\n        for i in range(1, x):\n            ans += store[i] * store[n - i]\n        ans += (store[x] * (store[x] + 1)) \/\/ 2\n        store[n] = ans\n        return ans\n    else:\n        x = (n + 1) \/\/ 2\n        ans = 0\n        for i in range(1, x):\n            ans += store[i] * store[n - i]\n        store[n] = ans\n        return ans\n\n\ndef Wedderburn_Etherington(n):\n    store[0] = 0\n    store[1] = 1\n    store[2] = 1\n    for i in range(n):\n        print(Wedderburn(i), end=\"\")\n        if (i != n - 1):\n            print(end=\", \")\n","test":"\nn = 10\nWedderburn_Etherington(n)\n","output":"0, 1, 1, 1, 2, 3, 6, 11, 23, 46","fn_call":"Wedderburn_Etherington"}
{"text":"maximum value after merging all elements in the array | function to maximum value after merging all elements in the array ; to check if positive and negative elements present or not ; check for positive integer ; check for negative integer ; if both positive and negative elements are present ; to store maximum value possible ; to find minimum value ; remove minimum element ; replace with absolute values ; to find minimum value ; remove minimum element ; return the required sum ; ","context":"","code":"def Max_sum(a, n):\n    pos = 0\n    neg = 0\n    for i in range(n):\n        if (a[i] > 0):\n            pos = 1\n        elif (a[i] < 0):\n            neg = 1\n        if (pos == 1 and neg == 1):\n            break\n    sum = 0\n    if (pos == 1 and neg == 1):\n        for i in range(n):\n            sum += abs(a[i])\n    elif (pos == 1):\n        mini = a[0]\n        sum = a[0]\n        for i in range(1, n, 1):\n            mini = min(mini, a[i])\n            sum += a[i]\n        sum -= 2 * mini\n    elif (neg == 1):\n        for i in range(n):\n            a[i] = abs(a[i])\n        mini = a[0]\n        sum = a[0]\n        for i in range(1, n):\n            mini = min(mini, a[i])\n            sum += a[i]\n        sum -= 2 * mini\n    return sum\n","test":"\nif __name__ == '__main__':\n    a = [1, 3, 5, -2, -6]\n    n = len(a)\n    print(Max_sum(a, n))\n","output":"17\n","fn_call":"Max_sum"}
{"text":"decimal to binary using recursion and without using power operator | recursive function to convert n to its binary equivalent ; base case ; recursive call ; ","context":"","code":"def decimalToBinary(n):\n    if (n == 0):\n        print(\"0\", end=\"\")\n        return\n    decimalToBinary(n \/\/ 2)\n    print(n % 2, end=\"\")\n","test":"\nif __name__ == \"__main__\":\n    n = 13\n    decimalToBinary(n)\n","output":"01101","fn_call":"decimalToBinary"}
{"text":"find minimum possible values of a , b and c when two of the ( a + b ) , ( a + c ) and ( b + c ) are given | function to find a , b and c ; keep minimum number in x ; find the numbers ; ","context":"","code":"def MinimumValue(x, y):\n    if (x > y):\n        x, y = y, x\n    a = 1\n    b = x - 1\n    c = y - b\n    print(a, b, c)\n","test":"\nx = 123\ny = 13\nMinimumValue(x, y)\n","output":"1 12 111\n","fn_call":"MinimumValue"}
{"text":"check whether it is possible to convert a into b | function that returns true if a can be converted to b with the given operations ; if the current number ends with 1 ; if the current number is divisible by 2 ; if the above two conditions fail ; if it is possible to convert a to b ; ","context":"","code":"def canConvert(a, b):\n    while (b > a):\n        if (b % 10 == 1):\n            b \/\/= 10\n            continue\n        if (b % 2 == 0):\n            b \/= 2\n            continue\n        return false\n    if (b == a):\n        return True\n    return False\n","test":"\nif __name__ == \"__main__\":\n    A = 2\n    B = 82\n    if (canConvert(A, B)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"canConvert"}
{"text":"count distinct rectangles in n * n chessboard | function to return the count of distinct rectangles ; ","context":"","code":"def count(N):\n    a = 0\n    a = (N * (N + 1)) \/ 2\n    return int(a)\n","test":"\nN = 4\nprint(count(N))\n","output":"10\n","fn_call":"count"}
{"text":"total number of days taken to complete the task if after certain days one person leaves | function to return the number of days required ; ","context":"","code":"def numberOfDays(a, b, n):\n    Days = b * (n + a) \/\/ (a + b)\n    return Days\n","test":"\nif __name__ == \"__main__\":\n    a = 10\n    b = 20\n    n = 5\n    print(numberOfDays(a, b, n))\n","output":"10\n","fn_call":"numberOfDays"}
{"text":"find average of two numbers using bit operation | function to return the average of x and y using bit operations ; calculate the average floor value of ( x + y ) \/ 2 ; ","context":"","code":"def getAverage(x, y):\n    avg = (x & y) + ((x ^ y) >> 1)\n    return avg\n","test":"\nx = 10\ny = 9\nprint(getAverage(x, y))\n","output":"9\n","fn_call":"getAverage"}
{"text":"smallest index such that there are no 0 or 1 to its right | function to find the smallest index such that there are no 0 or 1 to its right ; initially ; traverse in the array ; check if array element is 1 ; a [ i ] = 0 ; return minimum of both ; ","context":"","code":"def smallestIndex(a, n):\n    right1 = 0\n    right0 = 0\n    for i in range(n):\n        if (a[i] == 1):\n            right1 = i\n        else:\n            right0 = i\n    return min(right1, right0)\n","test":"\nif __name__ == '__main__':\n    a = [1, 1, 1, 0, 0, 1, 0, 1, 1]\n    n = len(a)\n    print(smallestIndex(a, n))\n","output":"6\n","fn_call":"smallestIndex"}
{"text":"total position where king can reach on a chessboard in exactly m moves | set 2 | function to return the count of squares that can be visited by king in m moves ; to store the count of squares ; check all squares of the chessboard ; check if square ( i , j ) is at a distance <= m units from king 's current position ; return count of squares ; ","context":"","code":"def countSquares(r, c, m):\n    squares = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if (max(abs(i - r), abs(j - c)) <= m):\n                squares = squares + 1\n    return squares\n","test":"\nr = 4\nc = 4\nm = 1\nprint(countSquares(r, c, m))\n","output":"9\n","fn_call":"countSquares"}
{"text":"number of quadruples where the first three terms are in ap and last three terms are in gp | function to return the count of quadruples ; hash table to count the number of occurrences ; traverse and increment the count ; run two nested loop for second and third element ; if they are same ; initially decrease the count ; find the first element using common difference ; find the fourth element using gp y ^ 2 = x * z property ; if it is an integer ; if not equal ; same elements ; later increase the value for future calculations ; ","context":"","code":"def countQuadruples(a, n):\n    mpp = dict .fromkeys(a, 0)\n    for i in range(n):\n        mpp[a[i]] += 1\n    count = 0\n    for j in range(n):\n        for k in range(n):\n            if (j == k):\n                continue\n            mpp[a[j]] -= 1\n            mpp[a[k]] -= 1\n            first = a[j] - (a[k] - a[j])\n            if first not in mpp:\n                mpp[first] = 0\n            fourth = (a[k] * a[k]) \/\/ a[j]\n            if fourth not in mpp:\n                mpp[fourth] = 0\n            if ((a[k] * a[k]) % a[j] == 0):\n                if (a[j] != a[k]):\n                    count += mpp[first] * mpp[fourth]\n                else:\n                    count += (mpp[first] * (mpp[fourth] - 1))\n            mpp[a[j]] += 1\n            mpp[a[k]] += 1\n    return count\n","test":"\nif __name__ == \"__main__\":\n    a = [2, 6, 4, 9, 2]\n    n = len(a)\n    print(countQuadruples(a, n))\n","output":"2\n","fn_call":"countQuadruples"}
{"text":"numbers in a range with given digital root | function to return the count of required numbers ; count of numbers present in given range ; number of groups of 9 elements starting from l ; left over elements not covered in factor 9 ; one number in each group of 9 ; to check if any number in rem satisfy the property ; ","context":"","code":"def countNumbers(L, R, K):\n    if (K == 9):\n        K = 0\n    totalnumbers = R - L + 1\n    factor9 = totalnumbers \/\/ 9\n    rem = totalnumbers % 9\n    ans = factor9\n    for i in range(R, R - rem, -1):\n        rem1 = i % 9\n        if (rem1 == K):\n            ans += 1\n    return ans\n","test":"\nL = 10\nR = 22\nK = 3\nprint(countNumbers(L, R, K))\n","output":"2\n","fn_call":"countNumbers"}
{"text":"sum of even values and update queries on an array | function to return the sum of even elements after updating value at given index ; add given value to a [ index ] ; to store the sum of even elements ; if current element is even ; function to print result for every query ; resultant vector that stores the result for every query ; get sum of even elements after updating value at given index ; store sum for each query ; print the result for every query ; ","context":"","code":"def EvenSum(A, index, value):\n    A[index] = A[index] + value\n    sum = 0\n    for i in A:\n        if (i % 2 == 0):\n            sum = sum + i\n    return sum\n\n\ndef BalanceArray(A, Q):\n    ANS = []\n    i, sum = 0, 0\n    for i in range(len(Q)):\n        index = Q[i][0]\n        value = Q[i][1]\n        sum = EvenSum(A, index, value)\n        ANS .append(sum)\n    for i in ANS:\n        print(i, end=\" \")\n","test":"\nA = [1, 2, 3, 4]\nQ = [[0, 1], [1, -3], [0, -4], [3, 2]]\nBalanceArray(A, Q)\n","output":"8 6 2 4 ","fn_call":"BalanceArray"}
{"text":"sum of even values and update queries on an array | function to print the result for every query ; if current element is even ; if element is even then remove it from sum ; if the value becomes even after updating ; store sum for each query ; print the result for every query ; ","context":"","code":"def BalanceArray(A, Q):\n    ANS = []\n    sum = 0\n    for i in range(len(A)):\n        if (A[i] % 2 == 0):\n            sum += A[i]\n    for i in range(len(Q)):\n        index = Q[i][0]\n        value = Q[i][1]\n        if (A[index] % 2 == 0):\n            sum -= A[index]\n        A[index] += value\n        if (A[index] % 2 == 0):\n            sum += A[index]\n        ANS .append(sum)\n    for i in range(len(ANS)):\n        print(ANS[i], end=\" \")\n","test":"\nif __name__ == \"__main__\":\n    A = [1, 2, 3, 4]\n    Q = [[0, 1], [1, -3], [0, -4], [3, 2]]\n    BalanceArray(A, Q)\n","output":"8 6 2 4 ","fn_call":"BalanceArray"}
{"text":"number of hamiltonian cycle | python3 program for implementation of the above program ; function that calculates number of hamiltonian cycle ; calculating factorial ; ","context":"\nimport math as mt\n\n","code":"def Cycles(N):\n    fact = 1\n    result = N - 1\n    i = result\n    while (i > 0):\n        fact = fact * i\n        i -= 1\n    return fact \/\/ 2\n","test":"\nN = 5\nNumber = Cycles(N)\nprint(\"Hamiltonian cycles = \", Number)\n","output":"Hamiltonian cycles =  12\n","fn_call":"Cycles"}
{"text":"smallest integer greater than n such that it consists of digit m exactly k times | function that returns true if n contains digit m exactly k times ; function to return the smallest integer > n with digit m occurring exactly k times ; ","context":"","code":"def digitWell(n, m, k):\n    cnt = 0\n    while (n > 0):\n        if (n % 10 == m):\n            cnt = cnt + 1\n        n = (int)(n \/ 10)\n    return cnt == k\n\n\ndef findInt(n, m, k):\n    i = n + 1\n    while (True):\n        if (digitWell(i, m, k)):\n            return i\n        i = i + 1\n","test":"\nn = 111\nm = 2\nk = 2\nprint(findInt(n, m, k))\n","output":"122\n","fn_call":"findInt"}
{"text":"composite xor and coprime and | function to return the count of odd numbers in the array ; variable to count odd numbers ; odd number ; function to return the count of valid pairs ; ","context":"","code":"def countOdd(arr, n):\n    odd = 0\n    for i in range(0, n):\n        if (arr[i] % 2 == 1):\n            odd = odd + 1\n    return odd\n\n\ndef countValidPairs(arr, n):\n    odd = countOdd(arr, n)\n    return (odd * (odd - 1)) \/ 2\n","test":"\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(int(countValidPairs(arr, n)))\n","output":"3\n","fn_call":"countValidPairs"}
{"text":"smallest perfect cube divisible by all elements of an array | function to return the gcd of two numbers ; function to return the lcm of all the elements of the array ; to calculate lcm of two numbers multiply them and divide the result by gcd of both the numbers ; return the lcm of the array elements ; function to return the smallest perfect cube divisible by all the elements of arr [ ] ; lcm of all the elements of arr [ ] ; if 2 divides lcm cnt number of times ; check all the numbers that divide lcm ; return the answer ; ","context":"","code":"def gcd(a, b):\n    if (b == 0):\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef lcmOfArray(arr, n):\n    if (n < 1):\n        return 0\n    lcm = arr[0]\n    for i in range(n):\n        lcm = (lcm * arr[i]) \/\/ gcd(lcm, arr[i])\n    return lcm\n\n\ndef minPerfectCube(arr, n):\n    lcm = lcmOfArray(arr, n)\n    minPerfectCube = lcm\n    cnt = 0\n    while (lcm > 1 and lcm % 2 == 0):\n        cnt += 1\n        lcm \/\/= 2\n    if (cnt % 3 == 2):\n        minPerfectCube *= 2\n    elif (cnt % 3 == 1):\n        minPerfectCube *= 4\n    i = 3\n    while (lcm > 1):\n        cnt = 0\n        while (lcm % i == 0):\n            cnt += 1\n            lcm \/\/= i\n        if (cnt % 3 == 1):\n            minPerfectCube *= i * i\n        elif (cnt % 3 == 2):\n            minPerfectCube *= i\n        i += 2\n    return minPerfectCube\n","test":"\nif __name__ == \"__main__\":\n    arr = [10, 125, 14, 42, 100]\n    n = len(arr)\n    print(minPerfectCube(arr, n))\n","output":"9261000\n","fn_call":"minPerfectCube"}
{"text":"check if n is strong prime | python 3 program to check if given number is strong prime ; utility function to check if a number is prime or not ; corner cases ; this is checked so that we can skip middle five numbers in below loop ; function that returns true if n is a strong prime ; if n is not a prime number or n is the first prime then return false ; initialize previous_prime to n - 1 and next_prime to n + 1 ; find next prime number ; find previous prime number ; arithmetic mean ; if n is a strong prime ; ","context":"\nfrom math import sqrt\n\n","code":"def isPrime(n):\n    if (n <= 1):\n        return False\n    if (n <= 3):\n        return True\n    if (n % 2 == 0 or n % 3 == 0):\n        return False\n    k = int(sqrt(n)) + 1\n    for i in range(5, k, 6):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n    return True\n\n\ndef isStrongPrime(n):\n    if (isPrime(n) == False or n == 2):\n        return False\n    previous_prime = n - 1\n    next_prime = n + 1\n    while (isPrime(next_prime) == False):\n        next_prime += 1\n    while (isPrime(previous_prime) == False):\n        previous_prime -= 1\n    mean = (previous_prime + next_prime) \/ 2\n    if (n > mean):\n        return True\n    else:\n        return False\n","test":"\nif __name__ == '__main__':\n    n = 11\n    if (isStrongPrime(n)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"isStrongPrime"}
{"text":"minimum removals in a number to be divisible by 10 power raised to k | function to return the required number of digits to be removed ; converting the given number into string ; variable to store number of digits to be removed ; variable to denote if atleast one zero has been found ; zero found ; return size - 1 if k is not zero and atleast one zero is present , otherwise result ; ","context":"","code":"def countDigitsToBeRemoved(N, K):\n    s = str(N)\n    res = 0\n    f_zero = 0\n    for i in range(len(s) - 1, -1, -1):\n        if (K == 0):\n            return res\n        if (s[i] == '0'):\n            f_zero = 1\n            K -= 1\n        else:\n            res += 1\n    if (K == 0):\n        return res\n    elif (f_zero > 0):\n        return len(s) - 1\n    return -1\n","test":"\nN = 10904025\nK = 2\nprint(countDigitsToBeRemoved(N, K))\nN = 1000\nK = 5\nprint(countDigitsToBeRemoved(N, K))\nN = 23985\nK = 2\nprint(countDigitsToBeRemoved(N, K))\n","output":"3\n3\n-1\n","fn_call":"countDigitsToBeRemoved"}
{"text":"program to find the sum of the series ( 1 \/ a + 2 \/ a ^ 2 + 3 \/ a ^ 3 + ... + n \/ a ^ n ) | python 3 program to find the sum of the given series ; function to return the sum of the series ; variable to store the answer ; math . pow ( x , y ) returns x ^ y ; ","context":"\nimport math\n\n","code":"def getSum(a, n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (i \/ math .pow(a, i))\n    return sum\n","test":"\na = 3\nn = 3\nprint(getSum(a, n))\n","output":"0.6666666666666667\n","fn_call":"getSum"}
{"text":"check if a number is an unusual number or not | python program to check unusual number ; utility function to find largest prime factor of a number ; initialize the maximum prime factor variable with the lowest one ; print the number of 2 s that divide n ; n must be odd at this point , thus skip the even numbers and iterate only for odd integers ; this condition is to handle the case when n is a prime number greater than 2 ; function to check unusual number ; get the largest prime factor of the number ; check if largest prime factor is greater than sqrt ( n ) ; ","context":"\nfrom math import sqrt\n\n","code":"def largestPrimeFactor(n):\n    max = -1\n    while n % 2 == 0:\n        max = 2\n        n >>= 1\n    for i in range(3, int(sqrt(n))+1, 2):\n        while n % i == 0:\n            max = i\n            n = n \/ i\n    if n > 2:\n        max = n\n\n    return max\n\n\ndef checkUnusual(n):\n    factor = largestPrimeFactor(n)\n    if factor > sqrt(n):\n        return True\n    else:\n        return False\n","test":"\nif __name__ == '__main__':\n\n    n = 14\n\n    if checkUnusual(n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","output":"YES\n","fn_call":"checkUnusual"}
{"text":"check if at least half array is reducible to zero by performing some operations | function to print the desired result after computation ; ","context":"","code":"def isHalfReducible(arr, n, m):\n    frequencyHash = [0] * (m + 1)\n    i = 0\n    while (i < n):\n        frequencyHash[(arr[i] % (m + 1))] += 1\n        i += 1\n    i = 0\n    while (i <= m):\n        if (frequencyHash[i] >= (n \/ 2)):\n            break\n        i += 1\n    if (i <= m):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","test":"\narr = [8, 16, 32, 3, 12]\nn = len(arr)\nm = 7\nisHalfReducible(arr, n, m)\n","output":"Yes\n","fn_call":"isHalfReducible"}
{"text":"check if the given number is ore number or not | python3 program to check if the given number is ore number ; function that returns harmonic mean ; note that this loop runs till square root ; if divisors are equal , store 'i ; otherwise store ' i ' and ' n \/ i ' both ; utility function to calculate harmonic mean of the divisors ; declare sum variables and initialize with zero . ; calculate denominator ; calculate harmonic mean and return ; function to check if a number is ore number ; calculate harmonic mean of divisors of n ; check if harmonic mean is an integer or not ; ","context":"\narr = []\n\n","code":"def generateDivisors(n):\n    for i in range(1, int(n**(0.5)) + 1):\n        if n % i == 0:\n            if n \/\/ i == i:\n                arr.append(i)\n            else:\n                arr.append(i)\n                arr.append(n \/\/ i)\n\n\ndef harmonicMean(n):\n\n    generateDivisors(n)\n    Sum = 0\n    length = len(arr)\n    for i in range(0, length):\n        Sum = Sum + (n \/ arr[i])\n\n    Sum = Sum \/ n\n    return length \/ Sum\n\n\ndef isOreNumber(n):\n    mean = harmonicMean(n)\n    if mean - int(mean) == 0:\n        return True\n    else:\n        return False\n","test":"\nif __name__ == \"__main__\":\n\n    n = 28\n\n    if isOreNumber(n) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","output":"YES\n","fn_call":"isOreNumber"}
{"text":"area of a square inscribed in a circle which is inscribed in a hexagon | python 3 program to find the area of the square inscribed within the circle which in turn is inscribed in a hexagon ; function to find the area of the square ; side of hexagon cannot be negative ; area of the square ; ","context":"\nfrom math import pow, sqrt\n\n","code":"def area(a):\n    if (a < 0):\n        return -1\n    area = pow((a * sqrt(3)) \/ (sqrt(2)), 2)\n    return area\n","test":"\nif __name__ == '__main__':\n    a = 5\n    print(\"{0:.3}\".format(area(a)))\n","output":"37.5\n","fn_call":"area"}
{"text":"program to find nth term of series 1 , 6 , 17 , 34 , 56 , 86 , 121 , 162 , ... ... . | calculate nth term of series ; ","context":"","code":"def nthTerm(n):\n    return 3 * pow(n, 2) - 4 * n + 2\n","test":"\nN = 4\nprint(nthTerm(N))\n","output":"34\n","fn_call":"nthTerm"}
{"text":"Sum of the first N terms of the series 2 , 10 , 30 , 68 , ... . | Function to calculate the sum ; number of terms to be included in the sum ; find the Sum","context":"","code":"def calculateSum(n):\n    return (n * (n + 1) \/\/ 2 + pow((n * (n + 1) \/\/ 2), 2))\n","test":"\nn = 3\nprint(\"Sum = \", calculateSum(n))\n","output":"Sum =  42\n","fn_call":"calculateSum"}
{"text":"check if two arrays are permutations of each other using mathematical operation | function to check if arrays are permutations of each other ; calculating sum and multiply of first array ; calculating sum and multiply of second array ; if sum and mul of both arrays are equal , return true , else return false . ; ","context":"","code":"def arePermutations(a, b, n, m):\n    sum1, sum2, mul1, mul2 = 0, 0, 1, 1\n    for i in range(n):\n        sum1 += a[i]\n        mul1 *= a[i]\n    for i in range(m):\n        sum2 += b[i]\n        mul2 *= b[i]\n    return ((sum1 == sum2) and (mul1 == mul2))\n","test":"\nif __name__ == \"__main__\":\n    a = [1, 3, 2]\n    b = [3, 1, 2]\n    n = len(a)\n    m = len(b)\n    if arePermutations(a, b, n, m):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"arePermutations"}
{"text":"program to find the head start in a race | function to find the b start to c ; when b completed it 's 100 meter  then completed meters by c is ; ","context":"","code":"def Race(B, C):\n    result = 0\n    result = ((C * 100) \/\/ B)\n    return 100 - result\n","test":"\nif __name__ == \"__main__\":\n    B = 10\n    C = 28\n    B = 100 - B\n    C = 100 - C\n    print(str(Race(B, C)) + \" meters\")\n","output":"20 meters\n","fn_call":"Race"}
{"text":"minimum time required to fill a cistern using n pipes | function to calculate the time ; ","context":"","code":"def Time(arr, n, Emptypipe):\n    fill = 0\n    for i in range(0, n):\n        fill += (1 \/ arr[i])\n    fill = fill - (1 \/ float(Emptypipe))\n    return int(1 \/ fill)\n","test":"\nif __name__ == '__main__':\n    arr = [12, 14]\n    Emptypipe = 30\n    n = len(arr)\n    print((Time(arr, n, Emptypipe)), \"Hours\")\n","output":"8 Hours\n","fn_call":"Time"}
{"text":"check if decimal representation of an octal number is divisible by 7 | function to check divisibility ; sum of all individual digits ; condition ; ","context":"","code":"def check(n):\n    sum = 0\n    while n != 0:\n        sum += n % 10\n        n = n \/\/ 10\n    if sum % 7 == 0:\n        return 1\n    else:\n        return 0\n","test":"\nif __name__ == \"__main__\":\n    n = 25\n    print((\"YES\")if check(n) == 1 else print(\"NO\"))\n","output":"YES\n","fn_call":"check"}
{"text":"sum of all the prime divisors of a number | python 3 program to find sum of prime divisors of n ; function to check if the number is prime or not . ; corner cases ; this is checked so that we can skip middle five numbers in below loop ; function to find sum of prime divisors of n ; ","context":"\nN = 1000005\n\n","code":"def isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n    return True\n\n\ndef SumOfPrimeDivisors(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if isPrime(i):\n                sum += i\n    return sum\n","test":"\nn = 60\nprint(\"Sum of prime divisors of 60 is \" + str(SumOfPrimeDivisors(n)))\n","output":"Sum of prime divisors of 60 is 10\n","fn_call":"SumOfPrimeDivisors"}
{"text":"sum of all the prime divisors of a number | function to find prime divisors of all numbers from 1 to n ; if the number is prime ; add this prime to all it 's multiples ; ","context":"","code":"def Sum(N):\n    SumOfPrimeDivisors = [0] * (N + 1)\n    for i in range(2, N + 1):\n        if (SumOfPrimeDivisors[i] == 0):\n            for j in range(i, N + 1, i):\n                SumOfPrimeDivisors[j] += i\n    return SumOfPrimeDivisors[N]\n","test":"\nN = 60\nprint(\"Sum of prime\", \"divisors of 60 is\", Sum(N))\n","output":"Sum of prime divisors of 60 is 10\n","fn_call":"Sum"}
{"text":"find ( a ^ b ) % m where ' b ' is very large | function to find power ; update x if it is more than or equal to p ; if y is odd , multiply x with the result ; y must be even now y = y >> 1 y = y \/ 2 ; ","context":"","code":"def power(x, y, p):\n    res = 1\n    x = x % p\n\n    while (y > 0):\n        if (y & 1):\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n\n    return res\n","test":"\na = 3\n\nb = \"100000000000000000000000000\"\n\nremainderB = 0\nMOD = 1000000007\nfor i in range(len(b)):\n    remainderB = ((remainderB * 10 +\n                   ord(b[i]) - 48) %\n                  (MOD - 1))\n\nprint(power(a, remainderB, MOD))\n","output":"835987331\n","fn_call":"power"}
{"text":"squares of numbers with repeated single digits | set 1 ( 3 , 6 and 9 ) | function to find the square of 333. . .333 , 666. . .666 and 999. . .999 ; if the number is 333. . .333 ; if the number is 666. . .666 ; if the number is 999. . .999 ; variable for hold result ; find the no of digit ; add size - 1 time a in result ; add one time b in result ; add size - 1 time c in result ; add one time d in result ; return result ; ","context":"","code":"def find_Square_369(num):\n    if (num[0] == '3'):\n        a = '1'\n        b = '0'\n        c = '8'\n        d = '9'\n    elif (num[0] == '6'):\n        a = '4'\n        b = '3'\n        c = '5'\n        d = '6'\n    else:\n        a = '9'\n        b = '8'\n        c = '0'\n        d = '1'\n    result = \"\"\n    size = len(num)\n    for i in range(1, size):\n        result += a\n    result += b\n    for i in range(1, size):\n        result += c\n    result += d\n    return result\n","test":"\nnum_3 = \"3333\"\nnum_6 = \"6666\"\nnum_9 = \"9999\"\nresult = \"\"\nresult = find_Square_369(num_3)\nprint(\"Square of \" + num_3 + \" is : \" + result)\nresult = find_Square_369(num_6)\nprint(\"Square of \" + num_6 + \" is : \" + result)\nresult = find_Square_369(num_9)\nprint(\"Square of \" + num_9 + \" is : \" + result)\n","output":"Square of 3333 is : 11108889\nSquare of 6666 is : 44435556\nSquare of 9999 is : 99980001\n","fn_call":"find_Square_369"}
{"text":"ways to multiply n elements with an associative operation | function to find the required factorial ; function to find ncr ; function to find the number of ways ; ","context":"","code":"def fact(n):\n    if (n == 0 or n == 1):\n        return 1\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i\n    return ans\n\n\ndef nCr(n, r):\n    Nr = n\n    Dr = 1\n    ans = 1\n    for i in range(1, r + 1):\n        ans = int((ans * Nr) \/ (Dr))\n        Nr = Nr - 1\n        Dr = Dr + 1\n    return ans\n\n\ndef solve(n):\n    N = 2 * n - 2\n    R = n - 1\n    return (nCr(N, R) * fact(n - 1))\n","test":"\nn = 6\nprint(solve(n))\n","output":"30240\n","fn_call":"solve"}
{"text":"pythagorean triplet with given sum | python3 program to find pythagorean triplet of given sum . ; considering triplets in sorted order . the value of first element in sorted triplet can be at - most n \/ 3. ; the value of second element must be less than equal to n \/ 2 ; ","context":"","code":"def pythagoreanTriplet(n):\n    for i in range(1, int(n \/ 3) + 1):\n        for j in range(i + 1, int(n \/ 2) + 1):\n            k = n - i - j\n            if (i * i + j * j == k * k):\n                print(i, \", \", j, \", \", k, sep=\"\")\n                return\n    print(\"No Triplet\")\n","test":"\nn = 12\npythagoreanTriplet(n)\n","output":"3, 4, 5\n","fn_call":"pythagoreanTriplet"}
{"text":"program to print binomial expansion series | function to calculate factorial of a number ; function to print the series ; calculating the value of n ! ; loop to display the series ; for calculating the value of ncr ; calculating the value of a to the power k and x to the power k ; display the series ; ","context":"","code":"def factorial(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n    return f\n\n\ndef series(A, X, n):\n    nFact = factorial(n)\n    for i in range(0, n + 1):\n        niFact = factorial(n - i)\n        iFact = factorial(i)\n        aPow = pow(A, n - i)\n        xPow = pow(X, i)\n        print(int((nFact * aPow * xPow) \/ (niFact * iFact)), end=\" \")\n","test":"\nA = 3\nX = 4\nn = 5\nseries(A, X, n)\n","output":"243 1620 4320 5760 3840 1024 ","fn_call":"series"}
{"text":"sum of series with alternate signed squares of ap | function to calculate series sum ; ","context":"","code":"def seiresSum(n, a):\n    res = 0\n    for i in range(0, 2 * n):\n        if (i % 2 == 0):\n            res += a[i] * a[i]\n        else:\n            res -= a[i] * a[i]\n    return res\n","test":"\nn = 2\na = [1, 2, 3, 4]\nprint(seiresSum(n, a))\n","output":"-10\n","fn_call":"seiresSum"}
{"text":"power of a prime number \u2018 r \u2019 in n ! | function to return power of a no . ' r ' in factorial of n ; keep dividing n by powers of ' r ' and update count ; ","context":"","code":"def power(n, r):\n    count = 0\n    i = r\n    while ((n \/ i) >= 1):\n        count += n \/ i\n        i = i * r\n    return int(count)\n","test":"\nn = 6\nr = 3\nprint(power(n, r))\n","output":"2\n","fn_call":"power"}
{"text":"average of first n odd naturals numbers | returns the avg of first n odd numbers ; sum of first n odd number ; average of first n odd numbers ; ","context":"","code":"def avg_of_odd_num(n):\n    sm = 0\n    for i in range(0, n):\n        sm = sm + (2 * i + 1)\n    return sm \/\/ n\n","test":"\nn = 20\nprint(avg_of_odd_num(n))\n","output":"20\n","fn_call":"avg_of_odd_num"}
{"text":"average of first n odd naturals numbers | return the average of sum of first n odd numbers ; ","context":"","code":"def avg_of_odd_num(n):\n    return n\n","test":"\nn = 8\nprint(avg_of_odd_num(n))\n","output":"8\n","fn_call":"avg_of_odd_num"}
{"text":"program to print fibonacci triangle | function to fill fibonacci numbers in f [ ] ; 1 st and 2 nd number of the series are 1 and 1 ; add the previous 2 numbers in the series and store it ; fill fibonacci numbers in f [ ] using fib ( ) . we need n = n * ( n + 1 ) \/ 2 fibonacci numbers to make a triangle of height n ; to store next fibonacci number to print ; for loop to keep track of number of lines ; for loop to keep track of numbers in each line ; ","context":"","code":"def fib(f, N):\n    f[1] = 1\n    f[2] = 1\n    for i in range(3, N + 1):\n        f[i] = f[i - 1] + f[i - 2]\n\n\ndef fiboTriangle(n):\n    N = n * (n + 1) \/\/ 2\n    f = [0] * (N + 1)\n    fib(f, N)\n    fiboNum = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            print(f[fiboNum], \" \", end=\"\")\n            fiboNum = fiboNum + 1\n        print()\n","test":"\nn = 5\nfiboTriangle(n)\n","output":"1  \n1  2  \n3  5  8  \n13  21  34  55  \n89  144  233  377  610  \n","fn_call":"fiboTriangle"}
{"text":"average of odd numbers till a given odd number | function to calculate the average of odd numbers ; count odd numbers ; store the sum of odd numbers ; ","context":"","code":"def averageOdd(n):\n    if (n % 2 == 0):\n        print(\"Invalid Input\")\n        return -1\n    sm = 0\n    count = 0\n    while (n >= 1):\n        count = count + 1\n        sm = sm + n\n        n = n - 2\n    return sm \/\/ count\n","test":"\nn = 15\nprint(averageOdd(n))\n","output":"8\n","fn_call":"averageOdd"}
{"text":"average of odd numbers till a given odd number | function to calculate the average of odd numbers ; ","context":"","code":"def averageOdd(n):\n    if (n % 2 == 0):\n        print(\"Invalid Input\")\n        return -1\n    return (n + 1) \/\/ 2\n","test":"\nn = 15\nprint(averageOdd(n))\n","output":"8\n","fn_call":"averageOdd"}
{"text":"find max of two rational numbers | python program to find max between two rational numbers ; get lcm of two number 's ; get max rational number ; find the lcm of first -> denominator and sec -> denominator ; declare nume1 and nume2 for get the value of first numerator and second numerator ; ","context":"\nimport math\n\n","code":"def lcm(a, b):\n    return (a * b) \/\/ (math .gcd(a, b))\n\n\ndef maxRational(first, sec):\n    k = lcm(first[1], sec[1])\n    nume1 = first[0]\n    nume2 = sec[0]\n    nume1 *= k \/\/ (first[1])\n    nume2 *= k \/\/ (sec[1])\n    return first if (nume2 < nume1)else sec\n","test":"\nfirst = [3, 2]\nsec = [3, 4]\nres = maxRational(first, sec)\nprint(res[0], \"\/\", res[1], sep=\"\")\n","output":"3\/2\n","fn_call":"maxRational"}
{"text":"trinomial triangle | function to find the trinomial triangle value . ; base case ; base cas ; recursive step . ; function to print trinomial triangle of height n . ; printing n rows . ; printing first half of triangle ; printing second half of triangle . ; ","context":"","code":"def TrinomialValue(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k < -n or k > n:\n        return 0\n    return (\n        TrinomialValue(\n            n -\n            1,\n            k -\n            1) +\n        TrinomialValue(\n            n -\n            1,\n            k) +\n        TrinomialValue(\n            n -\n            1,\n            k +\n            1))\n\n\ndef printTrinomial(n):\n    for i in range(n):\n        for j in range(-i, 1):\n            print(TrinomialValue(i, j), end=\" \")\n        for j in range(1, i + 1):\n            print(TrinomialValue(i, j), end=\" \")\n        print(\"\", end='')\n","test":"\nn = 4\nprintTrinomial(n)\n","output":"1 1 1 1 1 2 3 2 1 1 3 6 7 6 3 1 ","fn_call":"printTrinomial"}
{"text":"trinomial triangle | function to find the trinomial triangle value . ; using property of trinomial triangle . ; if value already calculated , return that . ; base case ; base case ; recursive step and storing the value . ; function to print trinomial triangle of height n . ; printing n rows . ; printing first half of triangle ; printing second half of triangle . ; ","context":"","code":"def TrinomialValue(dp, n, k):\n    if k < 0:\n        k = -k\n    if dp[n][k] != 0:\n        return dp[n][k]\n    if n == 0 and k == 0:\n        return 1\n    if k < -n or k > n:\n        return 0\n    return (\n        TrinomialValue(\n            dp,\n            n -\n            1,\n            k -\n            1) +\n        TrinomialValue(\n            dp,\n            n -\n            1,\n            k) +\n        TrinomialValue(\n            dp,\n            n -\n            1,\n            k +\n            1))\n\n\ndef printTrinomial(n):\n    dp = [[0] * 10] * 10\n    for i in range(n):\n        for j in range(-i, 1):\n            print(TrinomialValue(dp, i, j), end=\" \")\n        for j in range(1, i + 1):\n            print(TrinomialValue(dp, i, j), end=\" \")\n        print(\"\", end='')\n","test":"\nn = 4\nprintTrinomial(n)\n","output":"1 1 1 1 1 2 3 2 1 1 3 6 7 6 3 1 ","fn_call":"printTrinomial"}
{"text":"sum of largest prime factor of each number less than equal to n | function to find sum of largest prime factor of each number less than equal to n ; create an integer array \" prime [ 0 . . n ] \" and initialize all entries of it as 0. a value in prime [ i ] will finally be 0 if ' i ' is a prime , else it will contain the largest prime factor of ' i ' . ; if prime [ p ] is '0' , then it is a prime number ; update all multiples of p ; sum up the largest prime factor of all the numbers ; if ' p ' is a non - prime number then prime [ p ] gives its largesr prime factor ; ' p ' is a prime number ; required sum ; ","context":"","code":"def sumOfLargePrimeFactor(n):\n    prime = [0] * (n + 1)\n    sum = 0\n    max = int(n \/ 2)\n    for p in range(2, max + 1):\n        if prime[p] == 0:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = p\n    for p in range(2, n + 1):\n        if prime[p]:\n            sum += prime[p]\n        else:\n            sum += p\n    return sum\n","test":"\nn = 12\nprint(\"Sum =\", sumOfLargePrimeFactor(n))\n","output":"Sum = 46\n","fn_call":"sumOfLargePrimeFactor"}
{"text":"sum of multiples of a number up to n | calculates sum of multiples of a number upto n ; number of multiples ; sum of first m natural numbers ; sum of multiples ; ","context":"","code":"def calculate_sum(a, N):\n    m = N \/ a\n    sum = m * (m + 1) \/ 2\n    ans = a * sum\n    print(\"Sum of multiples of \", a, \" up to \", N, \" = \", ans)\n","test":"\ncalculate_sum(7, 49)\n","output":"Sum of multiples of  7  up to  49  =  196.0\n","fn_call":"calculate_sum"}
{"text":"given a huge number check if it 's a power of two. | returns 1 when str is power of 2 return 0 when str is not a power of 2 ; sum stores the intermediate dividend while dividing . ; if the input is \"1\" then return 0 because 2 ^ k = 1 where k >= 1 and here k = 0 ; divide the number until it gets reduced to 1 if we are successfully able to reduce the number to 1 it means input string is power of two if in between an odd number appears at the end it means string is not divisible by two hence not a power of 2. ; if the last digit is odd then string is not divisible by 2 hence not a power of two return 0. ; divide the whole string by 2. i is used to track index in current number . j is used to track index for next iteration . ; if num < 2 then we have to take another digit to the right of a [ i ] to make it bigger than a [ i ] . e . g . 214 \/ 2 -- > 107 ; if it 's not the first index. e.g 214  then we have to include 0. ; for eg . \"124\" we will not write 064 so if it is the first index just ignore ; after every division by 2 the length of string is changed . ; if the string reaches to 1 then the str is a power of 2. ; ","context":"","code":"def isPowerOf2(sttr):\n    len_str = len(sttr)\n    sttr = list(sttr)\n    num = 0\n    if (len_str == 1 and sttr[len_str - 1] == '1'):\n        return 0\n    while (len_str != 1 or sttr[len_str - 1] != '1'):\n        if ((ord(sttr[len_str - 1]) - ord('0')) % 2 == 1):\n            return 0\n        j = 0\n        for i in range(len_str):\n            num = num * 10 + (ord(sttr[i]) - ord('0'))\n            if (num < 2):\n                if (i != 0):\n                    sttr[j] = '0'\n                    j += 1\n                continue\n            sttr[j] = chr((num \/\/ 2) + ord('0'))\n            j += 1\n            num = (num) - (num \/\/ 2) * 2\n        len_str = j\n    return 1\n","test":"\nstr1 = \"124684622466842024680246842024662202000002\"\nstr2 = \"1\"\nstr3 = \"128\"\nprint(\"\", isPowerOf2(str1), \"\", isPowerOf2(str2), \"\", isPowerOf2(str3))\n","output":" 0  0  1\n","fn_call":"isPowerOf2"}
{"text":"given a huge number check if it 's a power of two. | function to check whether a number is power of 2 or not ; ","context":"","code":"def ispowerof2(num):\n    if ((num & (num - 1)) == 0):\n        return 1\n    return 0\n","test":"\nif __name__ == '__main__':\n    num = 549755813888\n    print(ispowerof2(num))\n","output":"1\n","fn_call":"ispowerof2"}
{"text":"count divisors of array multiplication | to count number of factors in a number ; initialize count with 0 ; increment count for every factor of the given number x . ; return number of factors ; returns number of divisors in array multiplication ; multipliying all elements of the given array . ; calling function which count number of factors of the number ; ","context":"","code":"def counDivisors(X):\n    count = 0\n    for i in range(1, X + 1):\n        if (X % i == 0):\n            count += 1\n    return count\n\n\ndef countDivisorsMult(arr, n):\n    mul = 1\n    for i in range(n):\n        mul *= arr[i]\n    return counDivisors(mul)\n","test":"\narr = [2, 4, 6]\nn = len(arr)\nprint(countDivisorsMult(arr, n))\n","output":"10\n","fn_call":"countDivisorsMult"}
{"text":"count divisors of array multiplication | python 3 program to count divisors in array multiplication . ; create a boolean array \" isprime [ 0 . . n ] \" and initialize all entries it as true . a value in isprime [ i ] will finally be false if i is not a isprime , else true . ; if isprime [ p ] is not changed , then it is a isprime ; update all multiples of p ; print all isprime numbers ; returns number of divisors in array multiplication ; find all prime numbers smaller than the largest element . ; find counts of occurrences of each prime factor ; compute count of all divisors using counts prime factors . ; ","context":"\nfrom collections import defaultdict\n\n","code":"def SieveOfEratosthenes(largest, prime):\n    isPrime = [True] * (largest + 1)\n    p = 2\n    while p * p <= largest:\n        if (isPrime[p]):\n            for i in range(p * 2, largest + 1, p):\n                isPrime[i] = False\n        p += 1\n    for p in range(2, largest + 1):\n        if (isPrime[p]):\n            prime .append(p)\n\n\ndef countDivisorsMult(arr, n):\n    largest = max(arr)\n    prime = []\n    SieveOfEratosthenes(largest, prime)\n    mp = defaultdict(int)\n    for i in range(n):\n        for j in range(len(prime)):\n            while (arr[i] > 1 and arr[i] % prime[j] == 0):\n                arr[i] \/\/= prime[j]\n                mp[prime[j]] += 1\n        if (arr[i] != 1):\n            mp[arr[i]] += 1\n    res = 1\n    for it in mp .values():\n        res *= (it + 1)\n    return res\n","test":"\nif __name__ == \"__main__\":\n    arr = [2, 4, 6]\n    n = len(arr)\n    print(countDivisorsMult(arr, n))\n","output":"10\n","fn_call":"countDivisorsMult"}
{"text":"k distant prime pairs in a given range | python3 program for the above approach ; function to generate prime numbers in the given range [ l , r ] ; store all value in the range ; erase 1 as its non - prime ; perform sieve of eratosthenes ; find current multiple ; erase as it is a non - prime ; increment multiple ; function to print all the prime pairs in the given range that differs by k ; generate all prime number ; traverse the map m ; if it . first & ( it . first + k ) is prime then print this pair ; ","context":"\nfrom math import sqrt\n\n","code":"def findPrimeNos(L, R, M):\n    for i in range(L, R + 1):\n        M[i] = M .get(i, 0) + 1\n    if (1 in M):\n        M .pop(1)\n    for i in range(2, int(sqrt(R)) + 1, 1):\n        multiple = 2\n        while ((i * multiple) <= R):\n            if ((i * multiple) in M):\n                M .pop(i * multiple)\n            multiple += 1\n\n\ndef getPrimePairs(L, R, K):\n    M = {}\n    findPrimeNos(L, R, M)\n    for key, values in M .items():\n        if ((key + K) in M):\n            print(\"(\", key, \",\", key + K, \")\", end=\" \")\n","test":"\nif __name__ == '__main__':\n    L = 1\n    R = 19\n    K = 6\n    getPrimePairs(L, R, K)\n","output":"( 5 , 11 ) ( 7 , 13 ) ( 11 , 17 ) ( 13 , 19 ) ","fn_call":"getPrimePairs"}
{"text":"enneacontahexagon numbers | function to find the nth enneacontahexagon number ; ","context":"","code":"def EnneacontahexagonNum(n):\n    return (94 * n * n - 92 * n) \/\/ 2\n","test":"\nn = 3\nprint(EnneacontahexagonNum(n))\n","output":"285\n","fn_call":"EnneacontahexagonNum"}
{"text":"find two composite numbers such that there difference is n | function to find the two composite numbers ; ","context":"","code":"def find_composite_nos(n):\n    print(9 * n, 8 * n)\n","test":"\nif __name__ == \"__main__\":\n    n = 4\n    find_composite_nos(n)\n","output":"36 32\n","fn_call":"find_composite_nos"}
{"text":"count the number of pairs ( i , j ) such that either arr [ i ] is divisible by arr [ j ] or arr [ j ] is divisible by arr [ i ] | function to find number of unordered pairs ; maximum element from the array ; array to store the frequency of each element ; stores the number of unordered pairs ; store the frequency of each element ; find the number of unordered pairs ; if the number j divisible by ith element is present in the array ; if the ith element of the array has frequency more than one ; ","context":"","code":"def freqPairs(arr, n):\n    max = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    freq = [0 for i in range(max + 1)]\n    count = 0\n    for i in range(n):\n        freq[arr[i]] += 1\n    for i in range(n):\n        for j in range(2 * arr[i], max + 1, arr[i]):\n            if (freq[j] >= 1):\n                count += freq[j]\n        if (freq[arr[i]] > 1):\n            count += freq[arr[i]] - 1\n            freq[arr[i]] -= 1\n    return count\n","test":"\nif __name__ == '__main__':\n    arr = [3, 2, 4, 2, 6]\n    n = len(arr)\n    print(freqPairs(arr, n))\n","output":"6\n","fn_call":"freqPairs"}
{"text":"find the nth term of the series 1 + 2 + 6 + 15 + 31 + 56 + ... | calculate nth term of given series ; ","context":"","code":"def Nth_Term(n):\n    return (2 * pow(n, 3) - 3 * pow(n, 2) + n + 6) \/\/ 6\n","test":"\nN = 8\nprint(Nth_Term(N))\n","output":"141\n","fn_call":"Nth_Term"}
{"text":"program to find n | return n - th number in series made of 3 and 5 ; create an array of size ( n + 1 ) ; if i is odd ; ","context":"","code":"def printNthElement(n):\n    arr = [0] * (n + 1)\n    arr[1] = 3\n    arr[2] = 5\n    for i in range(3, n + 1):\n        if (i % 2 != 0):\n            arr[i] = arr[i \/\/ 2] * 10 + 3\n        else:\n            arr[i] = arr[(i \/\/ 2) - 1] * 10 + 5\n    return arr[n]\n","test":"\nn = 6\nprint(printNthElement(n))\n","output":"55\n","fn_call":"printNthElement"}
{"text":"Program to find Nth term of the series 3 , 6 , 18 , 24 , ... | function to calculate Nth term of series ; By using above formula ; get the value of N ; Calculate and print the Nth term","context":"","code":"def nthTerm(N):\n    return (N * ((N \/\/ 2) + ((N % 2) * 2) + N))\n","test":"\nif __name__ == '__main__':\n    N = 5\n    print(\"Nth term for N = \", N, \" : \", nthTerm(N))\n","output":"Nth term for N =  5  :  45\n","fn_call":"nthTerm"}
{"text":"program to print binomial expansion series | function to print the series ; calculating and printing first term ; computing and printing remaining terms ; find current term using previous terms we increment power of x by 1 , decrement power of a by 1 and compute nci using previous term by multiplying previous term with ( n - i + 1 ) \/ i ; ","context":"","code":"def series(A, X, n):\n    term = pow(A, n)\n    print(term, end=\" \")\n    for i in range(1, n + 1):\n        term = int(term * X * (n - i + 1) \/ (i * A))\n        print(term, end=\" \")\n","test":"\nA = 3\nX = 4\nn = 5\nseries(A, X, n)\n","output":"243 1620 4320 5760 3840 1024 ","fn_call":"series"}
{"text":"check if a number is divisible by 8 using bitwise operators | python program to check whether the number is divisible by 8 or not using bitwise operator ; function to check number is div by 8 or not using bitwise operator ; ","context":"\nimport math\n\n","code":"def Div_by_8(n):\n    return (((n >> 3) << 3) == n)\n","test":"\nn = 16\nif (Div_by_8(n)):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","output":"YES\n","fn_call":"Div_by_8"}
{"text":"average of even numbers till a given even number | function to calculate the average of even numbers ; count even numbers ; store the sum of even numbers ; ","context":"","code":"def averageEven(n):\n    if (n % 2 != 0):\n        print(\"Invalid Input\")\n        return -1\n    sm = 0\n    count = 0\n    while (n >= 2):\n        count = count + 1\n        sm = sm + n\n        n = n - 2\n    return sm \/\/ count\n","test":"\nn = 16\nprint(averageEven(n))\n","output":"9\n","fn_call":"averageEven"}
{"text":"average of even numbers till a given even number | function to calculate the average of even numbers ; ","context":"","code":"def averageEven(n):\n    if (n % 2 != 0):\n        print(\"Invalid Input\")\n        return -1\n    return (n + 2) \/\/ 2\n","test":"\nn = 16\nprint(averageEven(n))\n","output":"9\n","fn_call":"averageEven"}
{"text":"Largest number that divides x and is co | Recursive function to return gcd of a and b ; Everything divides 0 ; base case ; a is greater ; function to find largest coprime divisor ; divisor code","context":"","code":"def gcd(a, b):\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\ndef cpFact(x, y):\n    while gcd(x, y) != 1:\n        x = x \/ gcd(x, y)\n    return int(x)\n","test":"\nx = 15\ny = 3\nprint(cpFact(x, y))\nx = 14\ny = 28\nprint(cpFact(x, y))\nx = 7\ny = 3\nprint(cpFact(x, y))\n","output":"5\n1\n7\n","fn_call":"cpFact"}
{"text":"count numbers with unit digit k in given range | returns count of numbers with k as last digit . ; ","context":"","code":"def counLastDigitK(low, high, k):\n    count = 0\n    for i in range(low, high + 1):\n        if (i % 10 == k):\n            count += 1\n    return count\n","test":"\nlow = 3\nhigh = 35\nk = 3\nprint(counLastDigitK(low, high, k))\n","output":"4\n","fn_call":"counLastDigitK"}
{"text":"taxicab numbers | python3 implementation to print first n taxicab ( 2 ) numbers ; starting from 1 , check every number if it is taxicab until count reaches n . ; try all possible pairs ( j , k ) whose cube sums can be i . ; taxicab ( 2 ) found ; ","context":"\nimport math\n\n","code":"def printTaxicab2(N):\n    i, count = 1, 0\n    while (count < N):\n        int_count = 0\n        for j in range(1, math .ceil(pow(i, 1.0 \/ 3)) + 1):\n            for k in range(j + 1, math .ceil(pow(i, 1.0 \/ 3)) + 1):\n                if (j * j * j + k * k * k == i):\n                    int_count += 1\n        if (int_count == 2):\n            count += 1\n            print(count, \" \", i)\n        i += 1\n","test":"\nN = 5\nprintTaxicab2(N)\n","output":"1   1729\n2   4104\n3   13832\n4   20683\n5   32832\n","fn_call":"printTaxicab2"}
{"text":"composite number | a optimized school method based python program to check if a number is composite . ; corner cases ; this is checked so that we can skip middle five numbers in below loop ; ","context":"","code":"def isComposite(n):\n    if (n <= 1):\n        return False\n    if (n <= 3):\n        return False\n    if (n % 2 == 0 or n % 3 == 0):\n        return True\n    i = 5\n    while (i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return True\n        i = i + 6\n    return False\n","test":"\nprint(\"true\")if (isComposite(11))else print(\"false\")\nprint(\"true\")if (isComposite(15))else print(\"false\")\n","output":"false\ntrue\n","fn_call":"isComposite"}
{"text":"insert minimum number in array so that sum of array becomes prime | function to check if a number is prime or not ; corner case ; check from 2 to n - 1 ; find prime number greater than a number ; find prime greater than n ; check if num is prime ; increment num ; to find number to be added so sum of array is prime ; to find sum of array elements ; if sum is already prime return 0 ; to find prime number greater than sum ; return difference of sum and num ; ","context":"","code":"def isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef findPrime(n):\n    num = n + 1\n    while (num):\n        if isPrime(num):\n            return num\n        num += 1\n    return 0\n\n\ndef minNumber(arr):\n    s = 0\n    for i in range(0, len(arr)):\n        s += arr[i]\n    if isPrime(s):\n        return 0\n    num = findPrime(s)\n    return num - s\n","test":"\narr = [2, 4, 6, 8, 12]\nprint(minNumber(arr))\n","output":"5\n","fn_call":"minNumber"}
{"text":"sum of divisors of factorial of a number | function to calculate factorial ; function to calculate sum of divisor ; returns sum of divisors of n ! ; ","context":"","code":"def fact(n):\n    if (n == 0):\n        return 1\n    return n * fact(n - 1)\n\n\ndef div(x):\n    ans = 0\n    for i in range(1, x + 1):\n        if (x % i == 0):\n            ans += i\n    return ans\n\n\ndef sumFactDiv(n):\n    return div(fact(n))\n","test":"\nn = 4\nprint(sumFactDiv(n))\n","output":"60\n","fn_call":"sumFactDiv"}
{"text":"sum of divisors of factorial of a number | allprimes [ ] stores all prime numbers less than or equal to n . ; fills above vector allprimes [ ] for a given n ; create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . a value in prime [ i ] will finally be false if i is not a prime , else true . ; loop to update prime [ ] ; if prime [ p ] is not changed , then it is a prime ; update all multiples of p ; store primes in the vector allprimes ; function to find all result of factorial number ; initialize result ; find exponents of all primes which divides n and less than n ; current divisor ; find the highest power ( stored in exp ) ' \u2581 \u2581 of \u2581 allprimes [ i ] \u2581 that \u2581 divides \u2581 n \u2581 using \u2581 \u2581 legendre ' s formula . ; using the divisor function to calculate the sum ; return total divisors ; ","context":"\nallPrimes = []\n\n","code":"def sieve(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while (p * p <= n):\n        if (prime[p]):\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if (prime[p]):\n            allPrimes .append(p)\n\n\ndef factorialDivisors(n):\n    result = 1\n    for i in range(len(allPrimes)):\n        p = allPrimes[i]\n        exp = 0\n        while (p <= n):\n            exp = exp + int(n \/ p)\n            p = p * allPrimes[i]\n        result = int(\n            result * (pow(allPrimes[i], exp + 1) - 1) \/ (allPrimes[i] - 1))\n    return result\n","test":"\nprint(factorialDivisors(4))\n","output":"1\n","fn_call":"factorialDivisors"}
{"text":"pandigital number in a given base | return true if n is pandigit else return false . ; checking length is less than base ; traversing each digit of the number . ; if digit is integer ; if digit is alphabet ; checking hash array , if any index is unmarked . ; ","context":"","code":"def checkPandigital(b, n):\n    if (len(n) < b):\n        return 0\n    hash = [0] * b\n    for i in range(len(n)):\n        if (n[i] >= '0' and n[i] <= '9'):\n            hash[ord(n[i]) - ord('0')] = 1\n        elif (ord(n[i]) - ord('A') <= b - 11):\n            hash[ord(n[i]) - ord('A') + 10] = 1\n    for i in range(b):\n        if (hash[i] == 0):\n            return 0\n    return 1\n","test":"\nb = 13\nn = \"1298450376ABC\"\nif (checkPandigital(b, n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"checkPandigital"}
{"text":"convert a number m to n using minimum number of given operations | function to find minimum number of given operations to convert m to n ; only way is to do - 1 ( m - n ) : times ; not possible ; n is greater and n is odd ; perform ' - 1' on m ( or + 1 on n ) : ; n is even ; perform ' * 2' on m ( or n \/ 2 on n ) : ; ","context":"","code":"def conver(m, n):\n    if (m == n):\n        return 0\n    if (m > n):\n        return m - n\n    if (m <= 0 and n > 0):\n        return -1\n    if (n % 2 == 1):\n        return 1 + conver(m, n + 1)\n    else:\n        return 1 + conver(m, n \/ 2)\n","test":"\nm = 3\nn = 11\nprint(\"Minimum number of operations :\", conver(m, n))\n","output":"Minimum number of operations : 3\n","fn_call":"conver"}
{"text":"seeds ( or seed roots ) of a number | python3 program to find seed of a number ; stores product of digits of x in proddig [ x ] ; if x has single digit ; if digit product is already computed ; if digit product is not computed before . ; prints all seeds of n ; find all seeds using proddig [ ] ; if there was no seed ; print seeds ; ","context":"\nMAX = 10000\nprodDig = [0] * MAX\n\n","code":"def getDigitProduct(x):\n    if (x < 10):\n        return x\n    if (prodDig[x] != 0):\n        return prodDig[x]\n    prod = (int(x % 10) * getDigitProduct(int(x \/ 10)))\n    prodDig[x] = prod\n    return prod\n\n\ndef findSeed(n):\n    res = []\n    for i in range(1, int(n \/ 2 + 2)):\n        if (i * getDigitProduct(i) == n):\n            res .append(i)\n    if (len(res) == 0):\n        print(\"NO seed exists\")\n        return\n    for i in range(len(res)):\n        print(res[i], end=\" \")\n","test":"\nn = 138\nfindSeed(n)\n","output":"23 ","fn_call":"findSeed"}
{"text":"number with maximum number of prime factors | python 3 program to find integer having maximum number of prime factor in first n natural numbers . ; return smallest number having maximum prime factors . ; sieve of eratosthenes method to count number of prime factors . ; finding number having maximum number of prime factor . ; ","context":"\nfrom math import sqrt\n\n","code":"def maxPrimefactorNum(N):\n    arr = [0 for i in range(N + 5)]\n    for i in range(2, int(sqrt(N)) + 1, 1):\n        if (arr[i] == 0):\n            for j in range(2 * i, N + 1, i):\n                arr[j] += 1\n        arr[i] = 1\n    maxval = 0\n    maxint = 1\n    for i in range(1, N + 1, 1):\n        if (arr[i] > maxval):\n            maxval = arr[i]\n            maxint = i\n    return maxint\n","test":"\nif __name__ == '__main__':\n    N = 40\n    print(maxPrimefactorNum(N))\n","output":"30\n","fn_call":"maxPrimefactorNum"}
{"text":"sum of all subarrays | set 1 | function compute sum all sub - array ; computing sum of subarray using formula ; return all subarray sum ; ","context":"","code":"def SubArraySum(arr, n):\n    result = 0\n    for i in range(0, n):\n        result += (arr[i] * (i + 1) * (n - i))\n    return result\n","test":"\narr = [1, 2, 3]\nn = len(arr)\nprint(\"Sum of SubArray : \", SubArraySum(arr, n))\n","output":"Sum of SubArray :  20\n","fn_call":"SubArraySum"}
{"text":"highest power of 2 less than or equal to given number | python3 program to find highest power of 2 smaller than or equal to n . ; if i is a power of 2 ; ","context":"","code":"def highestPowerof2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if ((i & (i - 1)) == 0):\n            res = i\n            break\n    return res\n","test":"\nn = 10\nprint(highestPowerof2(n))\n","output":"8\n","fn_call":"highestPowerof2"}
{"text":"find cube pairs | set 2 ( a n ^ ( 1 \/ 3 ) solution ) | python3 program to find pairs that can represent the given number as sum of two cubes ; function to find pairs that can represent the given number as sum of two cubes ; find cube root of n ; create a array of size of size 'cuberoot ; for index i , cube [ i ] will contain i ^ 3 ; find all pairs in above sorted array cube [ ] whose sum is equal to n ; ","context":"\nimport math\n\n","code":"def findPairs(n):\n    cubeRoot = int(math.pow(n, 1.0 \/ 3.0))\n    cube = [0] * (cubeRoot + 1)\n    for i in range(1, cubeRoot + 1):\n        cube[i] = i * i * i\n    l = 1\n    r = cubeRoot\n\n    while (l < r):\n        if (cube[l] + cube[r] < n):\n            l += 1\n        elif (cube[l] + cube[r] > n):\n            r -= 1\n        else:\n            print(\"(\", l, \", \", math.floor(r),\n                  \")\", end=\"\")\n            print()\n            l += 1\n            r -= 1\n","test":"\nn = 20683\nfindPairs(n)\n","output":"( 10 ,  27 )\n( 19 ,  24 )\n","fn_call":"findPairs"}
{"text":"find cube pairs | set 1 ( a n ^ ( 2 \/ 3 ) solution ) | function to find pairs that can represent the given number as sum of two cubes ; find cube root of n ; create an empty map ; consider all pairs such with values less than cuberoot ; find sum of current pair ( x , y ) ; do nothing if sum is not equal to given number ; if sum is seen before , we found two pairs ; if sum is seen for the first time ; ","context":"","code":"def findPairs(n):\n    cubeRoot = pow(n, 1.0 \/ 3.0)\n    s = {}\n    for x in range(int(cubeRoot)):\n        for y in range(x + 1, int(cubeRoot) + 1):\n            sum = x * x * x + y * y * y\n            if (sum != n):\n                continue\n            if sum in s .keys():\n                print(\"(\" +\n                      str(s[sum][0]) +\n                      \", \" +\n                      str(s[sum][1]) +\n                      \") and (\" +\n                      str(x) +\n                      \", \" +\n                      str(y) +\n                      \")\" +\n                      \"\")\n            else:\n                s[sum] = [x, y]\n","test":"\nif __name__ == \"__main__\":\n    n = 13832\n    findPairs(n)\n","output":"(2, 24) and (18, 20)\n","fn_call":"findPairs"}
{"text":"find the minimum difference between shifted tables of two numbers | python3 program to find the minimum difference between any two terms of two tables ; utility function to find gcd of a and b ; returns minimum difference between any two terms of shifted tables of ' a ' and ' b ' . ' x ' is shift in table of ' a ' and ' y ' is shift in table of ' b ' . ; calculate gcd of a nd b ; calculate difference between x and y ; ","context":"\nimport math as mt\n\n","code":"def gcd(a, b):\n    while (b != 0):\n        t = b\n        b = a % b\n        a = t\n    return a\n\n\ndef findMinDiff(a, b, x, y):\n    g = gcd(a, b)\n    diff = abs(x - y) % g\n    return min(diff, g - diff)\n","test":"\na, b, x, y = 20, 52, 5, 7\nprint(findMinDiff(a, b, x, y))\n","output":"2\n","fn_call":"findMinDiff"}
{"text":"find all divisors of a natural number | set 2 | a o ( sqrt ( n ) ) java program that prints all divisors in sorted order ; method to print the divisors ; list to store half of the divisors ; check if divisors are equal ; otherwise print both ; the list will be printed in reverse ; ","context":"\nimport math\n\n","code":"def printDivisors(n):\n    list = []\n    for i in range(1, int(math .sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n \/ i == i):\n                print(i, end=\" \")\n            else:\n                print(i, end=\" \")\n                list .append(int(n \/ i))\n    for i in list[::-1]:\n        print(i, end=\" \")\n","test":"\nprint(\"The divisors of 100 are: \")\nprintDivisors(100)\n","output":"The divisors of 100 are: \n1 2 4 5 10 20 25 50 100 ","fn_call":"printDivisors"}
{"text":"find all divisors of a natural number | set 2 | a o ( sqrt ( n ) ) program that prints all divisors in sorted order ; function to print the divisors ; ","context":"\nfrom math import *\n\n","code":"def printDivisors(n):\n    i = 1\n    while (i * i < n):\n        if (n % i == 0):\n            print(i, end=\" \")\n        i += 1\n    for i in range(int(sqrt(n)), 0, -1):\n        if (n % i == 0):\n            print(n \/\/ i, end=\" \")\n","test":"\nprint(\"The divisors of 100 are: \")\nprintDivisors(100)\n","output":"The divisors of 100 are: \n1 2 4 5 10 20 25 50 100 ","fn_call":"printDivisors"}
{"text":"find all factors of a natural number | set 1 | method to print the divisors ; ","context":"","code":"def printDivisors(n):\n    i = 1\n    while i <= n:\n        if (n % i == 0):\n            print(i,)\n        i = i + 1\n","test":"\nprint(\"The divisors of 100 are: \")\nprintDivisors(100)\n","output":"The divisors of 100 are: \n1\n2\n4\n5\n10\n20\n25\n50\n100\n","fn_call":"printDivisors"}
{"text":"find all factors of a natural number | set 1 | a better ( than naive ) solution to find all divisiors ; method to print the divisors ; note that this loop runs till square root ; if divisors are equal , print only one ; otherwise print both ; ","context":"\nimport math\n\n","code":"def printDivisors(n):\n    i = 1\n    while i <= math .sqrt(n):\n        if (n % i == 0):\n            if (n \/ i == i):\n                print(i,)\n            else:\n                print(i, n \/ i,)\n        i = i + 1\n","test":"\nprint(\"The divisors of 100 are: \")\nprintDivisors(100)\n","output":"The divisors of 100 are: \n1 100.0\n2 50.0\n4 25.0\n5 20.0\n10\n","fn_call":"printDivisors"}
{"text":"sieve of atkin | python 3 program for implementation of sieve of atkin ; 2 and 3 are known to be prime ; initialise the sieve array with false values ; mark sieve [ n ] is true if one of the following is true : a ) n = ( 4 * x * x ) + ( y * y ) has odd number of solutions , i . e . , there exist odd number of distinct pairs ( x , y ) that satisfy the equation and n % 12 = 1 or n % 12 = 5. b ) n = ( 3 * x * x ) + ( y * y ) has odd number of solutions and n % 12 = 7 c ) n = ( 3 * x * x ) - ( y * y ) has odd number of solutions , x > y and n % 12 = 11 ; main part of sieve of atkin ; mark all multiples of squares as non - prime ; print primes using sieve [ ] ; ","context":"","code":"def SieveOfAtkin(limit):\n    if (limit > 2):\n        print(2, end=\" \")\n    if (limit > 3):\n        print(3, end=\" \")\n    sieve = [False] * limit\n    for i in range(0, limit):\n        sieve[i] = False\n    x = 1\n    while (x * x < limit):\n        y = 1\n        while (y * y < limit):\n            n = (4 * x * x) + (y * y)\n            if (n <= limit and (n % 12 == 1 or n % 12 == 5)):\n                sieve[n] ^= True\n            n = (3 * x * x) + (y * y)\n            if (n <= limit and n % 12 == 7):\n                sieve[n] ^= True\n            n = (3 * x * x) - (y * y)\n            if (x > y and n <= limit and n % 12 == 11):\n                sieve[n] ^= True\n            y += 1\n        x += 1\n    r = 5\n    while (r * r < limit):\n        if (sieve[r]):\n            for i in range(r * r, limit, r * r):\n                sieve[i] = False\n    for a in range(5, limit):\n        if (sieve[a]):\n            print(a, end=\" \")\n","test":"\nlimit = 20\nSieveOfAtkin(limit)\n","output":"2 3 5 7 11 13 17 19 ","fn_call":"SieveOfAtkin"}
{"text":"find if a point lies inside a circle | python3 program to check if a point lies inside a circle or not ; compare radius of circle with distance of its center from given point ; ","context":"","code":"def isInside(circle_x, circle_y, rad, x, y):\n    if ((x - circle_x) * (x - circle_x) +\n            (y - circle_y) * (y - circle_y) <= rad * rad):\n        return True\n    else:\n        return False\n","test":"\nx = 1\ny = 1\ncircle_x = 0\ncircle_y = 1\nrad = 2\nif (isInside(circle_x, circle_y, rad, x, y)):\n    print(\"Inside\")\nelse:\n    print(\"Outside\")\n","output":"Inside\n","fn_call":"isInside"}
{"text":"program to check if a given number is lucky ( all digits are different ) | python program to check if a given number is lucky ; this function returns true if n is lucky ; create an array of size 10 and initialize all elements as false . this array is used to check if a digit is already seen or not . ; traverse through all digits of given number ; find the last digit ; if digit is already seen , return false ; mark this digit as seen ; remove the last digit from number ; ","context":"\nimport math\n\n","code":"def isLucky(n):\n    ar = [0] * 10\n    while (n > 0):\n        digit = math .floor(n % 10)\n        if (ar[digit]):\n            return 0\n        ar[digit] = 1\n        n = n \/ 10\n    return 1\n","test":"\narr = [1291, 897, 4566, 1232, 80, 700]\nn = len(arr)\nfor i in range(0, n):\n    k = arr[i]\n    if (isLucky(k)):\n        print(k, \" is Lucky \")\n    else:\n        print(k, \" is not Lucky \")\n","output":"1291  is not Lucky \n897  is not Lucky \n4566  is not Lucky \n1232  is not Lucky \n80  is not Lucky \n700  is not Lucky \n","fn_call":"isLucky"}
{"text":"print squares of first n natural numbers without using * , \/ and | python3 program to print squares of first ' n ' natural numbers wothout using * , \/ and - ; initialize ' square ' and first odd number ; calculate and print squares ; print square ; update ' square ' and 'odd ; ","context":"","code":"def printSquares(n):\n    square = 0\n    odd = 1\n    for x in range(0, n):\n        print(square, end=\" \")\n        square = square + odd\n        odd = odd + 2\n","test":"\nn = 5\nprintSquares(n)\n","output":"0 1 4 9 16 ","fn_call":"printSquares"}
{"text":"write a program to reverse digits of a number | python 3 program to reverse digits of a number ; recursive function to reverse digits of num ; ","context":"\nrev_num = 0\nbase_pos = 1\n\n","code":"def reversDigits(num):\n    global rev_num\n    global base_pos\n    if (num > 0):\n        reversDigits((int)(num \/ 10))\n        rev_num += (num % 10) * base_pos\n        base_pos *= 10\n    return rev_num\n","test":"\nnum = 4562\nprint(\"Reverse of no. is \", reversDigits(num))\n","output":"Reverse of no. is  2654\n","fn_call":"reversDigits"}
{"text":"find a number such that maximum in array is minimum possible after xor | recursive function that find the minimum value after exclusive - or ; condition if ref size is zero or bit is negative then return 0 ; condition if current bit is off then push current value in curr_off vector ; condition if current bit is on then push current value in curr_on vector ; condition if curr_off is empty then call recursive function on curr_on vector ; condition if curr_on is empty then call recursive function on curr_off vector ; return the minimum of curr_off and curr_on and add power of 2 of current bit ; function that print the minimum value after exclusive - or ; pushing values in vector ; printing answer ; ","context":"","code":"def RecursiveFunction(ref, bit):\n    if (len(ref) == 0 or bit < 0):\n        return 0\n    curr_on = []\n    curr_off = []\n    for i in range(len(ref)):\n        if (((ref[i] >> bit) & 1) == 0):\n            curr_off .append(ref[i])\n        else:\n            curr_on .append(ref[i])\n    if (len(curr_off) == 0):\n        return RecursiveFunction(curr_on, bit - 1)\n    if (len(curr_on) == 0):\n        return RecursiveFunction(curr_off, bit - 1)\n    return (min(RecursiveFunction(curr_off, bit - 1),\n            RecursiveFunction(curr_on, bit - 1)) + (1 << bit))\n\n\ndef PrintMinimum(a, n):\n    v = []\n    for i in range(n):\n        v .append(a[i])\n    print(RecursiveFunction(v, 30))\n","test":"\narr = [3, 2, 1]\nsize = len(arr)\nPrintMinimum(arr, size)\n","output":"2\n","fn_call":"PrintMinimum"}
{"text":"count of elements which are equal to the xor of the next two elements | function to return the count of elements which are equal to the xor of the next two elements ; to store the required count ; for every element of the array such that it has at least two elements appearing after it in the array ; if current element is equal to the xor of the next two elements in the array ; ","context":"","code":"def cntElements(arr, n):\n    cnt = 0\n    for i in range(n - 2):\n        if (arr[i] == (arr[i + 1] ^ arr[i + 2])):\n            cnt += 1\n    return cnt\n","test":"\narr = [4, 2, 1, 3, 7, 8]\nn = len(arr)\nprint(cntElements(arr, n))\n","output":"1\n","fn_call":"cntElements"}
{"text":"number of triplets in array having subarray xor equal | function to return the count ; initialise result ; pick 1 st element of the triplet ; pick 2 nd element of the triplet ; pick 3 rd element of the triplet ; taking xor in the first subarray ; taking xor in the second subarray ; if both xor is equal ; ","context":"","code":"def xor_triplet(arr, n):\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j, n):\n                xor1 = 0\n                xor2 = 0\n                for x in range(i, j):\n                    xor1 ^= arr[x]\n                for x in range(j, k + 1):\n                    xor2 ^= arr[x]\n                if (xor1 == xor2):\n                    ans += 1\n    return ans\n","test":"\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    n = len(arr)\n    print(xor_triplet(arr, n))\n","output":"5\n","fn_call":"xor_triplet"}
{"text":"print bitwise and set of a number n | function to find bitwise subsets efficient approach ; ","context":"","code":"def printSubsets(n):\n    i = n\n    while (i != 0):\n        print(i, end=\" \")\n        i = (i - 1) & n\n    print(\"0\")\n","test":"\nn = 9\nprintSubsets(n)\n","output":"9 8 1 0\n","fn_call":"printSubsets"}
{"text":"check if a number is divisible by 17 using bitwise operators | function to check recursively if the number is divisible by 17 or not ; if n = 0 or n = 17 then yes ; if n is less then 17 , not divisible by 17 ; reducing the number by floor ( n \/ 16 ) - n % 16 ; ","context":"","code":"def isDivisibleby17(n):\n    if (n == 0 or n == 17):\n        return True\n    if (n < 17):\n        return False\n    return isDivisibleby17((int)(n >> 4) - (int)(n & 15))\n","test":"\nn = 35\nif (isDivisibleby17(n)):\n    print(n, \"is divisible by 17\")\nelse:\n    print(n, \"is not divisible by 17\")\n","output":"35 is not divisible by 17\n","fn_call":"isDivisibleby17"}
{"text":"largest number with binary representation is m 1 's and m | python3 program to find largest number smaller than equal to n with m set bits then m - 1 0 bits . ; returns largest number with m set bits then m - 1 0 bits . ; start with 2 bits . ; initial answer is 1 which meets the given condition ; check for all numbers ; compute the number ; if less then n ; increment m to get the next number ; ","context":"\nimport math\n\n","code":"def answer(n):\n    m = 2\n    ans = 1\n    r = 1\n    while r < n:\n        r = (int)((pow(2, m) - 1) * (pow(2, m - 1)))\n        if r < n:\n            ans = r\n        m = m + 1\n    return ans\n","test":"\nprint(answer(7))\n","output":"6\n","fn_call":"answer"}
{"text":"find most significant set bit of a number | simple python3 program to find msb number for given n . ; ","context":"","code":"def setBitNumber(n):\n    if (n == 0):\n        return 0\n    msb = 0\n    n = int(n \/ 2)\n    while (n > 0):\n        n = int(n \/ 2)\n        msb += 1\n    return (1 << msb)\n","test":"\nn = 0\nprint(setBitNumber(n))\n","output":"0\n","fn_call":"setBitNumber"}
{"text":"find most significant set bit of a number | python program to find msb number for given n . ; suppose n is 273 ( binary is 100010001 ) . it does following 100010001 | 010001000 = 110011001 ; this makes sure 4 bits ( from msb and including msb ) are set . it does following 110011001 | 001100110 = 111111111 ; increment n by 1 so that there is only one set bit which is just before original msb . n now becomes 1000000000 ; return original msb after shifting . n now becomes 100000000 ; ","context":"","code":"def setBitNumber(n):\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n = n + 1\n    return (n >> 1)\n","test":"\nn = 273\nprint(setBitNumber(n))\n","output":"256\n","fn_call":"setBitNumber"}
{"text":"count trailing zero bits using lookup table | python 3 code for counting trailing zeros in binary representation of a number ; ","context":"","code":"def countTrailingZero(x):\n    count = 0\n    while ((x & 1) == 0):\n        x = x >> 1\n        count += 1\n    return count\n","test":"\nif __name__ == '__main__':\n    print(countTrailingZero(11))\n","output":"0\n","fn_call":"countTrailingZero"}
{"text":"count trailing zero bits using lookup table | python3 code for counting trailing zeros in binary representation of a number ; map a bit value mod 37 to its position ; only difference between ( x and - x ) is the value of signed magnitude ( leftmostbit ) negative numbers signed bit is 1 ; ","context":"","code":"def countTrailingZero(x):\n    lookup = [\n        32,\n        0,\n        1,\n        26,\n        2,\n        23,\n        27,\n        0,\n        3,\n        16,\n        24,\n        30,\n        28,\n        11,\n        0,\n        13,\n        4,\n        7,\n        17,\n        0,\n        25,\n        22,\n        31,\n        15,\n        29,\n        10,\n        12,\n        6,\n        0,\n        21,\n        14,\n        9,\n        5,\n        20,\n        8,\n        19,\n        18]\n    return lookup[(-x & x) % 37]\n","test":"\nif __name__ == \"__main__\":\n    print(countTrailingZero(48))\n","output":"4\n","fn_call":"countTrailingZero"}
{"text":"calculate 7 n \/ 8 without using division and multiplication operators | python program to evaluate ceil ( 7 n \/ 8 ) without using * and \/ ; note the inner bracket here . this is needed because precedence of ' - ' operator is higher than '<< ; ","context":"","code":"def multiplyBySevenByEight(n):\n    return (n - (n >> 3))\n","test":"\nn = 9\nprint(multiplyBySevenByEight(n))\n","output":"8\n","fn_call":"multiplyBySevenByEight"}
{"text":"calculate 7 n \/ 8 without using division and multiplication operators | python3 program to evaluate 7 n \/ 8 without using * and \/ ; step 1 ) first multiply number by 7 i . e . 7 n = ( n << 3 ) - n step 2 ) divide result by 8 ; ","context":"","code":"def multiplyBySevenByEight(n):\n    return ((n << 3) - n) >> 3\n","test":"\nn = 15\nprint(multiplyBySevenByEight(n))\n","output":"13\n","fn_call":"multiplyBySevenByEight"}
{"text":"longest set of palindrome numbers from the range [ l , r ] with at most k difference between its maximum and minimum | function to find the maximum size of group of palindrome numbers having difference between maximum and minimum element at most k ; stores the all the palindromic numbers in the range [ l , r ] ; traverse over the range [ l , r ] ; if i is a palindrome ; append the number in the list ; stores count of maximum palindromic numbers ; iterate each element in the list ; calculate rightmost index in the list < current element + k ; check if there is rightmost index from the current index ; return the count ; function to search the rightmost index of given number ; store the rightmost index ; calculate the mid ; if given number <= num ; assign ans = mid ; update low ; update high ; return ans ; function to check if the given number is palindrome or not ; generate reverse of the given number ; if n is a palindrome ; ","context":"","code":"def search(list, num):\n    low, high = 0, len(list) - 1\n    ans = -1\n    while (low <= high):\n        mid = low + (high - low) \/\/ 2\n        if (list[mid] <= num):\n            ans = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    return ans\n\n\ndef isPalindrome(n):\n    rev = 0\n    temp = n\n    while (n > 0):\n        rev = rev * 10 + n % 10\n        n \/\/= 10\n    return rev == temp\n\ndef countNumbers(L, R, K):\n    list = []\n    for i in range(L, R + 1):\n        if (isPalindrome(i)):\n            list .append(i)\n    count = 0\n    for i in range(len(list)):\n        right_index = search(list, list[i] + K - 1)\n        if (right_index != -1):\n            count = max(count, right_index - i + 1)\n    return count\n","test":"\nif __name__ == '__main__':\n    L, R = 98, 112\n    K = 13\n    print(countNumbers(L, R, K))\n","output":"3\n","fn_call":"countNumbers"}
{"text":"maximize sum possible by subtracting same value from all elements of a subarray of the given array | function to find the maximum sum by subtracting same value from all elements of a subarray ; stores previous smaller element ; stores next smaller element ; calculate contribution of each element ; return answer ; function to generate previous smaller element for each array element ; the first element has no previous smaller ; stack to keep track of elements that have occurred previously ; push the first index ; pop all the elements until the previous element is smaller than current element ; store the previous smaller element ; push the index of the current element ; return the array ; function to generate next smaller element for each array element ; stack to keep track of elements that have occurring next ; iterate in reverse order for calculating next smaller ; pop all the elements until the next element is smaller than current element ; store the next smaller element ; push the index of the current element ; return the array ; ","context":"","code":"def findPrevious(a, n):\n    ps = [0] * n\n    ps[0] = -1\n    stack = []\n    stack .append(0)\n    for i in range(1, n):\n        while len(stack) > 0 and a[stack[-1]] >= a[i]:\n            stack .pop()\n        ps[i] = stack[-1]if len(stack) > 0 else -1\n        stack .append(i)\n    return ps\n\n\ndef findNext(a, n):\n    ns = [0] * n\n    ns[n - 1] = n\n    stack = []\n    stack .append(n - 1)\n    for i in range(n - 2, -1, -1):\n        while (len(stack) > 0 and a[stack[-1]] >= a[i]):\n            stack .pop()\n        ns[i] = stack[-1]if len(stack) > 0 else n\n        stack .append(i)\n    return ns\n\ndef findMaximumSum(a, n):\n    prev_smaller = findPrevious(a, n)\n    next_smaller = findNext(a, n)\n    max_value = 0\n    for i in range(n):\n        max_value = max(max_value,\n                        a[i] * (next_smaller[i] - prev_smaller[i] - 1))\n    return max_value\n","test":"\nn = 3\na = [80, 48, 82]\nprint(findMaximumSum(a, n))\n","output":"144\n","fn_call":"findMaximumSum"}
{"text":"check if the given string is shuffled substring of another string | ''this function returns true if contents of arr1[] and arr2[] are same, otherwise false. ; this function search for all permutations of pat [ ] in txt [ ] ; countp [ ] : store count of all characters of pattern counttw [ ] : store count of current window of text ; traverse through remaining characters of pattern ; compare counts of current window of text with counts of pattern [ ] ; add current character to current window ; remove the first character of previous window ; check for the last window in text ; ","context":"\nMAX = 256\n\n","code":"def compare(arr1, arr2):\n    global MAX\n    for i in range(MAX):\n        if (arr1[i] != arr2[i]):\n            return False\n    return True\n\n\ndef search(pat, txt):\n    M = len(pat)\n    N = len(txt)\n    countP = [0 for i in range(MAX)]\n    countTW = [0 for i in range(MAX)]\n    for i in range(M):\n        countP[ord(pat[i])] += 1\n        countTW[ord(txt[i])] += 1\n    for i in range(M, N):\n        if (compare(countP, countTW)):\n            return True\n        countTW[ord(txt[i])] += 1\n        countTW[ord(txt[i - M])] -= 1\n    if (compare(countP, countTW)):\n        return True\n        return False\n","test":"\ntxt = \"BACDGABCDA\"\npat = \"ABCD\"\nif (search(pat, txt)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"search"}
{"text":"maximize the median of the given array after adding k elements to the same array | function to return the maximized median ; sort the array ; if size is even ; if size is odd ; ","context":"","code":"def getMaxMedian(arr, n, k):\n    size = n + k\n    arr .sort(reverse=False)\n    if (size % 2 == 0):\n        median = (arr[int(size \/ 2) - 1] + arr[int(size \/ 2)]) \/ 2\n        return median\n    median = arr[int(size \/ 2)]\n    return median\n","test":"\nif __name__ == '__main__':\n    arr = [3, 2, 3, 4, 2]\n    n = len(arr)\n    k = 2\n    print(getMaxMedian(arr, n, k))\n","output":"3\n","fn_call":"getMaxMedian"}
{"text":"sort 3 integers without using if condition or using only max ( ) function | python3 program to print three numbers in sorted order using max function ; find maximum element ; find minimum element ; ","context":"","code":"def printSorted(a, b, c):\n    get_max = max(a, max(b, c))\n    get_min = -max(-a, max(-b, -c))\n    get_mid = (a + b + c) - (get_max + get_min)\n    print(get_min, \" \", get_mid, \" \", get_max)\n","test":"\na, b, c = 4, 1, 9\nprintSorted(a, b, c)\n","output":"1   4   9\n","fn_call":"printSorted"}
{"text":"binary insertion sort | iterative implementation ; function to sort an array a [ ] of size 'n ; find location where selected should be inseretd ; move all elements after location to create space ; ","context":"","code":"def binarySearch(a, item, low, high):\n    while (low <= high):\n        mid = low + (high - low) \/\/ 2\n        if (item == a[mid]):\n            return mid + 1\n        elif (item > a[mid]):\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n\n\ndef insertionSort(a, n):\n    for i in range(n):\n        j = i - 1\n        selected = a[i]\n        loc = binarySearch(a, selected, 0, j)\n        while (j >= loc):\n            a[j + 1] = a[j]\n            j -= 1\n        a[j + 1] = selected\n","test":"\na = [37, 23, 0, 17, 12, 72, 31, 46, 100, 88, 54]\nn = len(a)\ninsertionSort(a, n)\nprint(\"Sorted array: \")\nfor i in range(n):\n    print(a[i], end=\" \")\n","output":"Sorted array: \n0 12 17 23 31 37 46 54 72 88 100 ","fn_call":"insertionSort"}
{"text":"insertion sort | function to do insertion sort ; move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position ; ","context":"","code":"def insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n","test":"\narr = [12, 11, 13, 5, 6]\ninsertionSort(arr)\nfor i in range(len(arr)):\n    print(\"% d\" % arr[i])\n","output":" 5\n 6\n 11\n 12\n 13\n","fn_call":"insertionSort"}
{"text":"count of distinct permutation of a string obtained by swapping only unequal characters | function to calculate total number of valid permutations ; creating count which is equal to the total number of characters present and ans that will store the number of unique permutations ; storing frequency of each character present in the string ; adding count of characters by excluding characters equal to current char ; reduce the frequency of the current character and count by 1 , so that it cannot interfere with the calculations of the same elements present to the right of it . ; return ans + 1 ( because the given string is also a unique permutation ) ; ","context":"","code":"def validPermutations(str):\n    m = {}\n    count = len(str)\n    ans = 0\n    for i in range(len(str)):\n        if (str[i] in m):\n            m[str[i]] += 1\n        else:\n            m[str[i]] = 1\n    for i in range(len(str)):\n        ans += count - m[str[i]]\n        m[str[i]] -= 1\n        count -= 1\n    return ans + 1\n","test":"\nif __name__ == '__main__':\n    str = \"sstt\"\n    print(validPermutations(str))\n","output":"5\n","fn_call":"validPermutations"}
{"text":"counts paths from a point to reach origin | recursive function to count number of paths ; if we reach bottom or top left , we are have only one way to reach ( 0 , 0 ) ; else count sum of both ways ; ","context":"","code":"def countPaths(n, m):\n    if (n == 0 or m == 0):\n        return 1\n    return (countPaths(n - 1, m) + countPaths(n, m - 1))\n","test":"\nn = 3\nm = 2\nprint(\"Number of Paths\", countPaths(n, m))\n","output":"Number of Paths 10\n","fn_call":"countPaths"}
{"text":"coin change | dp | returns the count of ways we can sum s [ 0. . . m - 1 ] coins to get sum n ; if n is 0 then there is 1 solution ( do not include any coin ) ; if n is less than 0 then no solution exists ; if there are no coins and n is greater than 0 , then no solution exist ; count is sum of solutions ( i ) including s [ m - 1 ] ( ii ) excluding s [ m - 1 ] ; ","context":"","code":"def count(S, m, n):\n    if (n == 0):\n        return 1\n    if (n < 0):\n        return 0\n    if (m <= 0 and n >= 1):\n        return 0\n    return count(S, m - 1, n) + count(S, m, n - S[m - 1])\n","test":"\narr = [1, 2, 3]\nm = len(arr)\nprint(count(arr, m, 4))\n","output":"4\n","fn_call":"count"}
{"text":"check if two strings are same ignoring their cases | function to compare two strings ignoring their cases ; convert to uppercase ; if strings are equal , return true otherwise false ; function to print the same or not same if strings are equal or not equal ; ","context":"","code":"def equalIgnoreCase(str1, str2):\n    str1 = str1 .upper()\n    str2 = str2 .upper()\n    x = str1 == str2\n    return x\n\n\ndef equalIgnoreCaseUtil(str1, str2):\n    res = equalIgnoreCase(str1, str2)\n    if (res):\n        print(\"Same\")\n    else:\n        print(\"Not Same\")\n","test":"\nif __name__ == \"__main__\":\n    str1 = \"Geeks\"\n    str2 = \"geeks\"\n    equalIgnoreCaseUtil(str1, str2)\n    str1 = \"Geek\"\n    str2 = \"geeksforgeeks\"\n    equalIgnoreCaseUtil(str1, str2)\n","output":"Same\nNot Same\n","fn_call":"equalIgnoreCaseUtil"}
{"text":"replace every consonant sequence with its length in the given string | function to return the converted string after replacing every consonant sequence with its length ; to store the resultant string ; checking each character for consonant sequence ; count the length of consonants sequence ; add the length in the string ; add the vowel ; check for the last consonant sequence in the string ; return the resultant string ; ","context":"","code":"def replaceConsonants(string):\n    res = \"\"\n    i = 0\n    count = 0\n    while (i < len(string)):\n        if (string[i] != 'a' and string[i] != 'e' and string[i]\n                != 'i' and string[i] != 'o' and string[i] != 'u'):\n            i += 1\n            count += 1\n        else:\n            if (count > 0):\n                res += str(count)\n            res += string[i]\n            i += 1\n            count = 0\n    if (count > 0):\n        res += str(count)\n    return res\n","test":"\nif __name__ == \"__main__\":\n    string = \"abcdeiop\"\n    print(replaceConsonants(string))\n","output":"a3eio1\n","fn_call":"replaceConsonants"}
{"text":"encrypt string with product of number of vowels and consonants in substring of size k | isvowel ( ) is a function that returns true for a vowel and false otherwise . ; function to encrypt the dtring ; for each substring ; substring of size k ; counting number of vowels and consonants ; append product to answer ; ","context":"","code":"def isVowel(c):\n    return (c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u')\n\n\ndef encryptString(s, n, k):\n    countVowels = 0\n    countConsonants = 0\n    ans = \"\"\n    for l in range(n - k + 1):\n        countVowels = 0\n        countConsonants = 0\n        for r in range(l, l + k):\n            if (isVowel(s[r])):\n                countVowels += 1\n            else:\n                countConsonants += 1\n        ans += (str)(countVowels * countConsonants)\n    return ans\n","test":"\nif __name__ == '__main__':\n    s = \"hello\"\n    n = len(s)\n    k = 2\n    print(encryptString(s, n, k))\n","output":"1101\n","fn_call":"encryptString"}
{"text":"string containing first letter of every word in a given string with spaces | an efficient python3 implementation of above approach ; we are splitting the input based on spaces ( s ) + : this regular expression will handle scenarios where we have words separated by multiple spaces ; charat ( 0 ) will pick only the first character from the string and append to buffer ; ","context":"\ncharBuffer = []\n\n","code":"def processWords(input):\n    s = input .split(\" \")\n    for values in s:\n        charBuffer .append(values[0])\n    return charBuffer\n","test":"\nif __name__ == '__main__':\n    input = \"geeks for geeks\"\n    print(*processWords(input), sep=\"\")\n","output":"gfg\n","fn_call":"processWords"}
{"text":"generate all binary strings without consecutive 1 's | a utility function generate all string without consecutive 1 'sof size k ; print binary string without consecutive 1 's ; terminate binary string ; if previous character is '1' then we put only 0 at end of string example str = \"01\" then new string be \"000\" ; if previous character is '0' than we put both '1' and '0' at end of string example str = \"00\" then new string \"001\" and \"000\" ; function generate all binary string without consecutive 1 's ; base case ; one by one stores every binary string of length k ; generate all binary string starts with '0 ; generate all binary string starts with '1 ; ","context":"","code":"def generateAllStringsUtil(K, str, n):\n    if (n == K):\n        print(*str[:n], sep=\"\", end=\" \")\n        return\n    if (str[n-1] == '1'):\n        str[n] = '0'\n        generateAllStringsUtil(K, str, n + 1)\n    if (str[n-1] == '0'):\n        str[n] = '0'\n        generateAllStringsUtil(K, str, n + 1)\n        str[n] = '1'\n        generateAllStringsUtil(K, str, n + 1)\n\n\ndef generateAllStrings(K):\n    if (K <= 0):\n        return\n    str = [0] * K\n    str[0] = '0'\n    generateAllStringsUtil(K, str, 1)\n    str[0] = '1'\n    generateAllStringsUtil(K, str, 1)\n","test":"\nK = 3\ngenerateAllStrings(K)\n","output":"000 001 010 100 101 ","fn_call":"generateAllStrings"}
{"text":"largest right circular cylinder within a cube | function to find the biggest right circular cylinder ; side cannot be negative ; radius of right circular cylinder ; height of right circular cylinder ; volume of right circular cylinder ; ","context":"","code":"def findVolume(a):\n    if (a < 0):\n        return -1\n    r = a \/ 2\n    h = a\n    V = 3.14 * pow(r, 2) * h\n    return V\n","test":"\nif __name__ == \"__main__\":\n    a = 5\n    print(findVolume(a))\n","output":"98.125\n","fn_call":"findVolume"}
{"text":"program to find area of a trapezoid | function for the area ; ","context":"","code":"def Area(b1, b2, h):\n    return ((b1 + b2) \/ 2) * h\n","test":"\nbase1 = 8\nbase2 = 10\nheight = 6\narea = Area(base1, base2, height)\nprint(\"Area is:\", area)\n","output":"Area is: 54.0\n","fn_call":"Area"}
{"text":"find number of diagonals in n sided convex polygon | ''python3 program to find number of diagonals in n sided convex polygon ; ''","context":"","code":"def numberOfDiagonals(n):\n    return n * (n - 3) \/ 2\n\n\ndef main():\n    n = 5\n    print(n, \" sided convex polygon have \")\n    print(numberOfDiagonals(n), \" diagonals\")\n","test":"\nif __name__ == '__main__':\n    main()\n","output":"5  sided convex polygon have \n5.0  diagonals\n","fn_call":"main"}
{"text":"area of the largest rectangle without a given point | function to find the maximum area such that it does not contains any hole ; area for all the possible positions of the cut ; find the maximum area among the above rectangles ; ","context":"","code":"def maximumArea(l, b, x, y):\n    left, right, above, below = 0, 0, 0, 0\n    left = x * b\n    right = (l - x - 1) * b\n    above = l * y\n    below = (b - y - 1) * l\n    print(max(max(left, right), max(above, below)))\n","test":"\nl = 8\nb = 8\nx = 0\ny = 0\nmaximumArea(l, b, x, y)\n","output":"56\n","fn_call":"maximumArea"}
{"text":"minimize cost of removals required to make all remaining characters of the string unique | function to find the minimum cost of removing characters to make the string unique ; store the minimum cost required ; create a dictionary to store the maximum cost of removal a character ; create a dictionary to store the total deletion cost of a character ; traverse the string , s ; keep track of maximum cost of each character ; update the maximum deletion cost ; keep track of the total cost of each character ; update the total deletion cost ; traverse through all the unique characters ; keep the maximum cost character and delete the rest ; return the answer ; given string ; ","context":"","code":"def delCost(s, cost):\n    ans = 0\n    forMax = {}\n    forTot = {}\n    for i in range(len(s)):\n        if s[i]not in forMax:\n            forMax[s[i]] = cost[i]\n        else:\n            forMax[s[i]] = max(cost[i], forMax[s[i]])\n        if s[i]not in forTot:\n            forTot[s[i]] = cost[i]\n        else:\n            forTot[s[i]] += cost[i]\n    for i in forMax:\n        ans += forTot[i] - forMax[i]\n    return ans\n","test":"\nstring = \"AAABBB\"\ncost = [1, 2, 3, 4, 5, 6]\nprint(delCost(string, cost))\n","output":"12\n","fn_call":"delCost"}
{"text":"smallest divisor of n closest to x | python3 program for the above approach ; stores divisors for all numbers in the vector divisors ; i is the divisor and j is the multiple ; function to compare the closeness of the given target ; function to find the element closest to target in divisors vector ; corner cases ; perform binary search ; check if target is less than the array element then search in left half ; check if target is greater than previous to mid , return closest of two ; repeat for left half ; check if target is greater than mid ; update i ; only single element left after search ; function to print the divisor of n closest to x ; function call to calculate and stores divisors of all numbers in a vector ; stores the closest value to target ; print the answer ; ","context":"\nMAX = 10000\ndivisors = [[]for i in range(MAX + 1)]\n\n","code":"def computeDivisors():\n    global divisors\n    global MAX\n    for i in range(1, MAX + 1, 1):\n        for j in range(i, MAX + 1, i):\n            divisors[j].append(i)\n\n\ndef getClosest(val1, val2, target):\n    if (target - val1 >= val2 - target):\n        return val2\n    else:\n        return val1\n\n\ndef findClosest(arr, n, target):\n    if (target <= arr[0]):\n        return arr[0]\n    if (target >= arr[n - 1]):\n        return arr[n - 1]\n    i = 0\n    j = n\n    mid = 0\n    while (i < j):\n        mid = (i + j) \/\/ 2\n        if (arr[mid] == target):\n            return arr[mid]\n        if (target < arr[mid]):\n            if (mid > 0 and target > arr[mid - 1]):\n                return getClosest(arr[mid - 1], arr[mid], target)\n            j = mid\n        else:\n            if (mid < n - 1 and target < arr[mid + 1]):\n                return getClosest(arr[mid], arr[mid + 1], target)\n            i = mid + 1\n    return arr[mid]\n\n\ndef printClosest(N, X):\n    global divisors\n    computeDivisors()\n    ans = findClosest(divisors[N], len(divisors[N]), X)\n    print(ans)\n","test":"\nif __name__ == '__main__':\n    N = 16\n    X = 5\n    printClosest(N, X)\n","output":"4\n","fn_call":"printClosest"}
{"text":"count elements of same value placed at same indices of two given arrays | function to count maximum matched elements from the arrays a [ ] and b [ ] ; stores position of elements of array a [ ] in the array b [ ] ; keep track of difference between the indices ; traverse the array a [ ] ; traverse the array b [ ] ; if difference is negative , add n to it ; keep track of the number of shifts required to place elements at same indices ; return the max matches ; ","context":"","code":"def maxMatch(A, B):\n    Aindex = {}\n    diff = {}\n    for i in range(len(A)):\n        Aindex[A[i]] = i\n    for i in range(len(B)):\n        if i - Aindex[B[i]] < 0:\n            if len(A) + i - Aindex[B[i]]not in diff:\n                diff[len(A) + i - Aindex[B[i]]] = 1\n            else:\n                diff[len(A) + i - Aindex[B[i]]] += 1\n        else:\n            if i - Aindex[B[i]]not in diff:\n                diff[i - Aindex[B[i]]] = 1\n            else:\n                diff[i - Aindex[B[i]]] += 1\n    return max(diff .values())\n","test":"\nA = [5, 3, 7, 9, 8]\nB = [8, 7, 3, 5, 9]\nprint(maxMatch(A, B))\n","output":"3\n","fn_call":"maxMatch"}
{"text":"check if given sudoku solution is valid or not | function to check if all elements of the board [ ] [ ] array store value in the range [ 1 , 9 ] ; traverse board [ ] [ ] array ; check if board [ i ] [ j ] lies in the range ; function to check if the solution of sudoku puzzle is valid or not ; check if all elements of board [ ] [ ] stores value in the range [ 1 , 9 ] ; stores unique value from 1 to n ; traverse each row of the given array ; initialize unique [ ] array to false ; traverse each column of current row ; stores the value of board [ i ] [ j ] ; check if current row stores duplicate value ; traverse each column of the given array ; initialize unique [ ] array to false ; traverse each row of current column ; stores the value of board [ j ] [ i ] ; check if current column stores duplicate value ; traverse each block of size 3 * 3 in board [ ] [ ] array ; j stores first column of each 3 * 3 block ; initialize unique [ ] array to false ; traverse current block ; stores row number of current block ; stores column number of current block ; stores the value of board [ x ] [ y ] ; check if current block stores duplicate value ; if all conditions satisfied ; ","context":"","code":"def isinRange(board):\n\n    N = 9\n    for i in range(0, N):\n        for j in range(0, N):\n            if ((board[i][j] <= 0) or\n                    (board[i][j] > 9)):\n                return False\n\n    return True\n\n\ndef isValidSudoku(board):\n\n    N = 9\n    if (isinRange(board) == False):\n        return False\n    unique = [False] * (N + 1)\n    for i in range(0, N):\n        for m in range(0, N + 1):\n            unique[m] = False\n        for j in range(0, N):\n            Z = board[i][j]\n            if (unique[Z] == True):\n                return False\n\n            unique[Z] = True\n    for i in range(0, N):\n        for m in range(0, N + 1):\n            unique[m] = False\n        for j in range(0, N):\n            Z = board[j][i]\n            if (unique[Z] == True):\n                return False\n\n            unique[Z] = True\n    for i in range(0, N - 2, 3):\n        for j in range(0, N - 2, 3):\n            for m in range(0, N + 1):\n                unique[m] = False\n            for k in range(0, 3):\n                for l in range(0, 3):\n                    X = i + k\n                    Y = j + l\n                    Z = board[X][Y]\n                    if (unique[Z] == True):\n                        return False\n\n                    unique[Z] = True\n    return True\n","test":"\nif __name__ == '__main__':\n\n    board = [[7, 9, 2, 1, 5, 4, 3, 8, 6],\n             [6, 4, 3, 8, 2, 7, 1, 5, 9],\n             [8, 5, 1, 3, 9, 6, 7, 2, 4],\n             [2, 6, 5, 9, 7, 3, 8, 4, 1],\n             [4, 8, 9, 5, 6, 1, 2, 7, 3],\n             [3, 1, 7, 4, 8, 2, 9, 6, 5],\n             [1, 3, 6, 7, 4, 8, 5, 9, 2],\n             [9, 7, 4, 2, 1, 5, 6, 3, 8],\n             [5, 2, 8, 6, 3, 9, 4, 1, 7]]\n\n    if (isValidSudoku(board)):\n        print(\"Valid\")\n    else:\n        print(\"Not Valid\")\n","output":"Valid\n","fn_call":"isValidSudoku"}
{"text":"subarray of length k whose concatenation forms a palindrome | function to check if a number is palindrome or not here i is the starting index and j is the last index of the subarray ; if the integer at i is not equal to j then the subarray is not palindrome ; otherwise ; all a [ i ] is equal to a [ j ] then the subarray is palindrome ; function to find a subarray whose concatenation forms a palindrome and return its starting index ; iterating over subarray of length k and checking if that subarray is palindrome ; if no subarray is palindrome ; ","context":"","code":"def palindrome(a, i, j):\n    while (i < j):\n        if (a[i] != a[j]):\n            return False\n        i += 1\n        j -= 1\n    return True\n\n\ndef findSubArray(arr, k):\n    n = len(arr)\n    for i in range(n - k + 1):\n        if (palindrome(arr, i, i + k - 1)):\n            return i\n    return -1\n","test":"\narr = [2, 3, 5, 1, 3]\nk = 4\nans = findSubArray(arr, k)\nif (ans == -1):\n    print(-1)\nelse:\n    for i in range(ans, ans + k):\n        print(arr[i], end=\" \")\n","output":"-1\n","fn_call":"findSubArray"}
{"text":"check if a sequence of path visits any coordinate twice or not | function to check if the man crosses previous visited coordinate or not ; stores the count of crossed vertex ; stores ( x , y ) coordinates ; the coordinates for the origin ; iterate over the string ; condition to increment x or y co - ordinates respectively ; check if ( x , y ) is already visited ; print the result ; ","context":"","code":"def isCrossed(path):\n    if (len(path) == 0):\n        return bool(False)\n    ans = bool(False)\n    Set = set()\n    x, y = 0, 0\n    Set .add((x, y))\n    for i in range(len(path)):\n        if (path[i] == 'N'):\n            Set .add((x, y))\n            y = y + 1\n        if (path[i] == 'S'):\n            Set .add((x, y))\n            y = y - 1\n        if (path[i] == 'E'):\n            Set .add((x, y))\n            x = x + 1\n        if (path[i] == 'W'):\n            Set .add((x, y))\n            x = x - 1\n        if (x, y) in Set:\n            ans = bool(True)\n            break\n    if (ans):\n        print(\"Crossed\")\n    else:\n        print(\"Not Crossed\")\n","test":"\npath = \"NESW\"\nisCrossed(path)\n","output":"Crossed\n","fn_call":"isCrossed"}
{"text":"maximum width of an n | python3 program to implement the above approach ; function to find the maximum width of . he tree using level order traversal ; store the edges of the tree ; stores maximum width of the tree ; stores the nodes of each level ; insert root node ; perform level order traversal on the tree ; stores the size of the queue ; update maximum width ; push the nodes of the next level and pop the elements of the current level ; get element from the front the queue ; push all nodes of the next level . ; return the result . ; ","context":"\nfrom collections import deque\n\n","code":"def maxWidth(N, M, cost, s):\n    adj = [[]for i in range(N)]\n    for i in range(M):\n        adj[s[i][0]].append(s[i][1])\n    result = 0\n    q = deque()\n    q .append(0)\n    while (len(q) > 0):\n        count = len(q)\n        result = max(count, result)\n        while (count > 0):\n            temp = q .popleft()\n            for i in adj[temp]:\n                q .append(i)\n            count -= 1\n    return result\n","test":"\nif __name__ == '__main__':\n    N = 11\n    M = 10\n    edges = []\n    edges .append([0, 1])\n    edges .append([0, 2])\n    edges .append([0, 3])\n    edges .append([1, 4])\n    edges .append([1, 5])\n    edges .append([3, 6])\n    edges .append([4, 7])\n    edges .append([6, 1])\n    edges .append([6, 8])\n    edges .append([6, 9])\n    cost = [1, 2, -1, 3, 4, 5, 8, 2, 6, 12, 7]\n    print(maxWidth(N, M, cost, edges))\n","output":"4\n","fn_call":"maxWidth"}
{"text":"minimize sum of prime numbers added to make an array non | pthon3 program to implement the above approach ; stores if an index is a prime \/ non - prime value ; stores the prime ; function to generate all prime numbers ; if current element is prime ; set all its multiples non - prime ; store all prime numbers ; function to find the closest prime to a particular number ; applying binary search on primes vector ; if the prime added makes the elements equal ; return this as the closest prime ; if the array remains non - decreasing ; search for a bigger prime number ; otherwise ; check if a smaller prime can make array non - decreasing or not ; return closest number ; function to find the minimum cost ; find all primes ; store the result ; iterate over the array ; current element is less than the previous element ; find the closest prime which makes the array non decreasing ; add to overall cost ; update current element ; return the minimum cost ; ","context":"\nMAX = 10000000\nisPrime = [True] * (MAX + 1)\nprimes = []\n\n","code":"def SieveOfEratosthenes():\n    global isPrime\n    p = 2\n    while p * p <= MAX:\n        if (isPrime[p]):\n            for i in range(p * p, MAX + 1, p):\n                isPrime[i] = False\n        p += 1\n    for p in range(2, MAX + 1):\n        if (isPrime[p]):\n            primes .append(p)\n\n\ndef prime_search(primes, diff):\n    low = 0\n    high = len(primes) - 1\n    while (low <= high):\n        mid = (low + high) \/\/ 2\n        if (primes[mid] == diff):\n            return primes[mid]\n        elif (primes[mid] < diff):\n            low = mid + 1\n        else:\n            res = primes[mid]\n            high = mid - 1\n    return res\n\n\ndef minCost(arr, n):\n    SieveOfEratosthenes()\n    res = 0\n    for i in range(1, n):\n        if (arr[i] < arr[i - 1]):\n            diff = arr[i - 1] - arr[i]\n            closest_prime = prime_search(primes, diff)\n            res += closest_prime\n            arr[i] += closest_prime\n    return res\n","test":"\nif __name__ == \"__main__\":\n    arr = [2, 1, 5, 4, 3]\n    n = 5\n    print(minCost(arr, n))\n","output":"7\n","fn_call":"minCost"}
{"text":"count ways to split a binary string into three substrings having equal count of zeros | function to return ways to split a string into three parts with the equal number of 0 ; store total count of 0 s ; count total no . of 0 s character in given string ; if total count of 0 character is not divisible by 3 ; initialize map to store frequency of k ; traverse string to find ways to split string ; increment count if 0 appears ; increment result if sum equal to 2 * k and k exists in map ; insert sum in map ; return result ; ","context":"","code":"def count(s):\n    cnt = 0\n    for c in s:\n        if c == '0':\n            cnt += 1\n    if (cnt % 3 != 0):\n        return 0\n    res = 0\n    k = cnt \/\/ 3\n    sum = 0\n    mp = {}\n    for i in range(len(s)):\n        if s[i] == '0':\n            sum += 1\n        if (sum == 2 * k and k in mp and i < len(s) - 1 and i > 0):\n            res += mp[k]\n        if sum in mp:\n            mp[sum] += 1\n        else:\n            mp[sum] = 1\n    return res\n","test":"\nif __name__ == \"__main__\":\n    st = \"01010\"\n    print(count(st))\n","output":"4\n","fn_call":"count"}
{"text":"check if a string can be converted to another by swapping of adjacent characters of given type | function to check if it is possible to transform start to end ; check the sequence of a , b in both strings str1 and str2 ; if both the strings are not equal ; traverse the strings ; check for indexes of a and b ; ","context":"","code":"def canTransform(str1, str2):\n    s1 = \"\"\n    s2 = \"\"\n    for c in str1:\n        if (c != 'C'):\n            s1 += c\n    for c in str2:\n        if (c != 'C'):\n            s2 += c\n    if (s1 != s2):\n        return False\n    i = 0\n    j = 0\n    n = len(str1)\n    while (i < n and j < n):\n        if (str1[i] == 'C'):\n            i += 1\n        elif (str2[j] == 'C'):\n            j += 1\n        else:\n            if ((str1[i] == 'A' and i < j) or (str1[i] == 'B' and i > j)):\n                return False\n            i += 1\n            j += 1\n    return True\n","test":"\nif __name__ == '__main__':\n    str1 = \"BCCABCBCA\"\n    str2 = \"CBACCBBAC\"\n    if (canTransform(str1, str2)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"Yes\n","fn_call":"canTransform"}
{"text":"longest substring having equal count of vowels and consonants | function to return the length of the longest substring having equal number of vowel and consonant ; generate the array ; initialize variable to store result ; stores the sum of subarray ; map to store indices of the sum ; loop through the array ; if sum is 0 ; count of vowels and consonants are equal ; update the maximum length of substring in hashmap ; store the index of the sum ; return the maximum length of required substring ; ","context":"","code":"def maxsubstringLength(S, N):\n\n    arr = [0] * N\n    for i in range(N):\n        if (S[i] == 'a' or S[i] == 'e' or\n           S[i] == 'i' or S[i] == 'o' or\n           S[i] == 'u'):\n            arr[i] = 1\n        else:\n            arr[i] = -1\n    maxLen = 0\n    curr_sum = 0\n    hash = {}\n    for i in range(N):\n        curr_sum += arr[i]\n        if (curr_sum == 0):\n            maxLen = max(maxLen, i + 1)\n        if (curr_sum in hash.keys()):\n            maxLen = max(maxLen, i - hash[curr_sum])\n        else:\n            hash[curr_sum] = i\n    return maxLen\n","test":"\nS = \"geeksforgeeks\"\nn = len(S)\nprint(maxsubstringLength(S, n))\n","output":"10\n","fn_call":"maxsubstringLength"}
{"text":"minimum distance from a given cell to all other cells of a matrix | python3 program to implement the above approach ; stores the accessible directions ; function to find the minimum distance from a given cell to all other cells in the matrix ; stores the accessible cells from current cell ; insert pair ( x , y ) ; iterate untill queue is empty ; extract the pair ; pop them ; checking boundary condition ; if the cell is not visited ; assign the minimum distance ; insert the traversed neighbour into the queue ; ","context":"\nmat = [[0 for x in range(1001)]for y in range(1001)]\ndx = [0, -1, -1, -1, 0, 1, 1, 1]\ndy = [1, 1, 0, -1, -1, -1, 0, 1]\n\n","code":"def FindMinimumDistance():\n    global x, y, r, c\n    q = []\n    q .append([x, y])\n    mat[x][y] = 0\n    while (len(q) != 0):\n        x = q[0][0]\n        y = q[0][1]\n        q .pop(0)\n        for i in range(8):\n            a = x + dx[i]\n            b = y + dy[i]\n            if (a < 0 or a >= r or b >= c or b < 0):\n                continue\n            if (mat[a][b] == 0):\n                mat[a][b] = mat[x][y] + 1\n                q .append([a, b])\n","test":"\nr = 5\nc = 5\nx = 1\ny = 1\nt = x\nl = y\nmat[x][y] = 0\nFindMinimumDistance()\nmat[t][l] = 0\nfor i in range(r):\n    for j in range(c):\n        print(mat[i][j], end=\" \")\n    print()\n","output":"1 1 1 2 3 \n1 0 1 2 3 \n1 1 1 2 3 \n2 2 2 2 3 \n3 3 3 3 3 \n","fn_call":"FindMinimumDistance"}
{"text":"minimum flips required to convert given string into concatenation of equal substrings of length k | function that returns the minimum number of flips to convert the s into a concatenation of k - length sub - string ; stores the result ; iterate through string index ; stores count of 0 s & 1 s ; iterate making k jumps ; count 0 's ; count 1 's ; add minimum flips for index i ; return minimum number of flips ; ","context":"","code":"def minOperations(S, K):\n    ans = 0\n    for i in range(K):\n        zero, one = 0, 0\n        for j in range(i, len(S), K):\n            if (S[j] == '0'):\n                zero += 1\n            else:\n                one += 1\n        ans += min(zero, one)\n    return ans\n","test":"\nif __name__ == '__main__':\n    s = \"110100101\"\n    K = 3\n    print(minOperations(s, K))\n","output":"2\n","fn_call":"minOperations"}
{"text":"find the missing number in unordered arithmetic progression | function to get the missing element ; for maximum element in the array ; for minimum element in the array ; for xor of all elements ; common difference of ap series ; find maximum and minimum element ; calculating common difference ; calculate the xor of all elements ; perform xor with actual ap series resultant x will be the ans ; return the missing element ; ","context":"","code":"def missingElement(arr, n):\n    max_ele = arr[0]\n    min_ele = arr[0]\n    x = 0\n    d = 0\n    for i in range(n):\n        if (arr[i] > max_ele):\n            max_ele = arr[i]\n        if (arr[i] < min_ele):\n            min_ele = arr[i]\n    d = (max_ele - min_ele) \/\/ n\n    for i in range(n):\n        x = x ^ arr[i]\n    for i in range(n + 1):\n        x = x ^ (min_ele + (i * d))\n    return x\n","test":"\nif __name__ == '__main__':\n    arr = [12, 3, 6, 15, 18]\n    n = len(arr)\n    element = missingElement(arr, n)\n    print(element)\n","output":"9\n","fn_call":"missingElement"}
{"text":"given a string and an integer k , find the kth sub | function to prints kth sub - string ; total sub - strings possible ; if k is greater than total number of sub - strings ; to store number of sub - strings starting with ith character of the string ; compute the values ; substring [ i - 1 ] is added to store the cumulative sum ; binary search to find the starting index of the kth sub - string ; to store the ending index of the kth sub - string ; print the sub - string ; ","context":"","code":"def Printksubstring(str1, n, k):\n    total = int((n * (n + 1)) \/ 2)\n    if (k > total):\n        print(\"-1\")\n        return\n    substring = [0 for i in range(n + 1)]\n    substring[0] = 0\n    temp = n\n    for i in range(1, n + 1, 1):\n        substring[i] = substring[i - 1] + temp\n        temp -= 1\n    l = 1\n    h = n\n    start = 0\n    while (l <= h):\n        m = int((l + h) \/ 2)\n        if (substring[m] > k):\n            start = m\n            h = m - 1\n        elif (substring[m] < k):\n            l = m + 1\n        else:\n            start = m\n            break\n    end = n - (substring[start] - k)\n    for i in range(start - 1, end):\n        print(str1[i], end=\"\")\n","test":"\nif __name__ == '__main__':\n    str1 = \"abc\"\n    k = 4\n    n = len(str1)\n    Printksubstring(str1, n, k)\n","output":"b","fn_call":"Printksubstring"}
{"text":"lower insertion point | function to return the lower insertion point of an element in a sorted array ; base cases ; final check for the remaining elements which are < x ; ","context":"","code":"def LowerInsertionPoint(arr, n, X):\n    if (X < arr[0]):\n        return 0\n    elif (X > arr[n - 1]):\n        return n\n    lowerPnt = 0\n    i = 1\n    while (i < n and arr[i] < X):\n        lowerPnt = i\n        i = i * 2\n    while (lowerPnt < n and arr[lowerPnt] < X):\n        lowerPnt += 1\n    return lowerPnt\n","test":"\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 4, 5, 6, 7, 9]\n    n = len(arr)\n    X = 4\n    print(LowerInsertionPoint(arr, n, X))\n","output":"2\n","fn_call":"LowerInsertionPoint"}
{"text":"number of positions with same address in row major and column major order | returns count of required positions ; horizontal 1d array ; vertical 1d array ; iterating for all possible i ; checking if j is integer ; checking if j lies b \/ w 1 to n ; iterating for all possible j ; checking if i is integer ; checking if i lies b \/ w 1 to m ; ","context":"","code":"def getCount(M, N):\n    count = 0\n    if (M == 1):\n        return N\n    if (N == 1):\n        return M\n    if (N > M):\n        for i in range(1, M + 1):\n            numerator = N * i - N + M - i\n            denominator = M - 1\n            if (numerator % denominator == 0):\n                j = numerator \/ denominator\n                if (j >= 1 and j <= N):\n                    count += 1\n    else:\n        for j in range(1, N + 1):\n            numerator = M * j - M + N - j\n            denominator = N - 1\n            if (numerator % denominator == 0):\n                i = numerator \/ denominator\n                if (i >= 1 and i <= M):\n                    count += 1\n    return count\n","test":"\nif __name__ == '__main__':\n    M, N = 3, 5\n    print(getCount(M, N))\n","output":"3\n","fn_call":"getCount"}
{"text":"maximum in an array that can make another array sorted | python3 program to make array sorted ; function to check whether there is any swappable element present to make the first array sorted ; wrongidx is the index of the element which is making the first array unsorted ; find the maximum element which satisfies the above mentioned neighboring conditions ; if res is true then swap the element and make the first array sorted ; function to print the sorted array if elements are swapped . ; ","context":"\nimport sys\n\n","code":"def swapElement(arr1, arr2, n):\n    wrongIdx = 0\n    for i in range(1, n):\n        if (arr1[i] < arr1[i - 1]):\n            wrongIdx = i\n    maximum = -(sys .maxsize - 1)\n    maxIdx = -1\n    res = False\n    for i in range(n):\n        if (arr2[i] > maximum and arr2[i] >= arr1[wrongIdx - 1]):\n            if (wrongIdx + 1 <= n - 1 and arr2[i] <= arr1[wrongIdx + 1]):\n                maximum = arr2[i]\n                maxIdx = i\n                res = True\n    if (res):\n        (arr1[wrongIdx], arr2[maxIdx]) = (arr2[maxIdx], arr1[wrongIdx])\n    return res\n\n\ndef getSortedArray(arr1, arr2, n):\n    if (swapElement(arr1, arr2, n)):\n        for i in range(n):\n            print(arr1[i], end=\" \")\n    else:\n        print(\"Not Possible\")\n","test":"\nif __name__ == \"__main__\":\n    arr1 = [1, 3, 7, 4, 10]\n    arr2 = [2, 1, 6, 8, 9]\n    n = len(arr1)\n    getSortedArray(arr1, arr2, n)\n","output":"1 3 7 9 10 ","fn_call":"getSortedArray"}
{"text":"middle of three using minimum comparisons | function to find the middle of three numbers ; compare each three number to find middle number . enter only if a > b ; decided a is not greater than b . ; ","context":"","code":"def middleOfThree(a, b, c):\n    if a > b:\n        if (b > c):\n            return b\n        elif (a > c):\n            return c\n        else:\n            return a\n    else:\n        if (a > c):\n            return a\n        elif (b > c):\n            return c\n        else:\n            return b\n","test":"\na = 20\nb = 30\nc = 40\nprint(middleOfThree(a, b, c))\n","output":"30\n","fn_call":"middleOfThree"}
{"text":"sort the matrix column | function to find the transpose of the matrix mat [ ] ; stores the transpose of matrix mat [ ] [ ] ; traverse each row of the matrix ; traverse each column of the matrix ; transpose matrix elements ; function to sort the given matrix in row wise manner ; traverse the row ; row - wise sorting ; function to print the matrix in column wise sorted manner ; function call to find transpose of the the matrix mat [ ] [ ] ; sorting the matrix row - wise ; calculate transpose of b [ ] [ ] ; print the matrix mat [ ] [ ] ; ","context":"","code":"def transpose(mat, row, col):\n    tr = [[0 for i in range(row)]for i in range(col)]\n    for i in range(row):\n        for j in range(col):\n            tr[j][i] = mat[i][j]\n    return tr\n\n\ndef RowWiseSort(B):\n    for i in range(len(B)):\n        B[i] = sorted(B[i])\n    return B\n\n\ndef sortCol(mat, N, M):\n    B = transpose(mat, N, M)\n    B = RowWiseSort(B)\n    mat = transpose(B, M, N)\n    for i in range(N):\n        for j in range(M):\n            print(mat[i][j], end=\" \")\n        print()\n","test":"\nif __name__ == '__main__':\n    mat = [[1, 6, 10], [8, 5, 9], [9, 4, 15], [7, 3, 60]]\n    N = len(mat)\n    M = len(mat[0])\n    sortCol(mat, N, M)\n","output":"1 3 9 \n7 4 10 \n8 5 15 \n9 6 60 \n","fn_call":"sortCol"}
{"text":"largest area possible after removal of a series of horizontal & vertical bars | function to find the largest area when a series of horizontal & vertical bars are removed ; stores all bars ; insert horizontal bars ; insert vertictal bars ; remove horizontal separators from s1 ; remove vertical separators from s2 ; stores left out horizontal and vertical separators ; sort both list in ascending order ; find maximum difference of neighbors of list1 ; find max difference of neighbors of list2 ; print largest volume ; ","context":"","code":"def largestArea(N, M, H, V, h, v):\n    s1 = set([])\n    s2 = set([])\n    for i in range(1, N + 2):\n        s1 .add(i)\n    for i in range(1, M + 2):\n        s2 .add(i)\n    for i in range(h):\n        s1 .remove(H[i])\n    for i in range(v):\n        s2 .remove(V[i])\n    list1 = [0] * len(s1)\n    list2 = [0] * len(s2)\n    i = 0\n    for it1 in s1:\n        list1[i] = it1\n        i += 1\n    i = 0\n    for it2 in s2:\n        list2[i] = it2\n        i += 1\n    list1 .sort()\n    list2 .sort()\n    maxH = 0\n    p1 = 0\n    maxV = 0\n    p2 = 0\n    for j in range(len(s1)):\n        maxH = max(maxH, list1[j] - p1)\n        p1 = list1[j]\n    for j in range(len(s2)):\n        maxV = max(maxV, list2[j] - p2)\n        p2 = list2[j]\n    print((maxV * maxH))\n","test":"\nif __name__ == \"__main__\":\n    N = 3\n    M = 3\n    H = [2]\n    V = [2]\n    h = len(H)\n    v = len(V)\n    largestArea(N, M, H, V, h, v)\n","output":"4\n","fn_call":"largestArea"}
{"text":"check if an array can be sorted by swapping pairs from indices consisting of unequal elements in another array | function to check if array , a [ ] can be converted into sorted array by swapping ( a [ i ] , a [ j ] ) if b [ i ] not equal to b [ j ] ; stores if array a [ ] is sorted in descending order or not ; traverse the array a [ ] ; if a [ i ] is greater than a [ i + 1 ] ; update flag ; if array is sorted in ascending order ; count = 2 : check if 0 s and 1 s both present in the b [ ] ; traverse the array ; if current element is 0 ; update count ; traverse the array b [ ] ; if current element is 1 ; if both 0 s and 1 s are present in the array ; input array a [ ] ; ","context":"","code":"def checkifSorted(A, B, N):\n    flag = False\n    for i in range(N - 1):\n        if (A[i] > A[i + 1]):\n            flag = True\n            break\n    if (not flag):\n        return True\n    count = 0\n    for i in range(N):\n        if (B[i] == 0):\n            count += 1\n            break\n    for i in range(N):\n        if B[i]:\n            count += 1\n            break\n    if (count == 2):\n        return True\n\n    return False\n","test":"\nA = [3, 1, 2]\nB = [0, 1, 1]\nN = len(A)\ncheck = checkifSorted(A, B, N)\nif (check):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","output":"YES\n","fn_call":"checkifSorted"}
{"text":"minimum swaps required between two strings to make one string strictly greater than the other | function to find the minimum number of steps to make a > b ; if all character are same and m <= n ; if there lies any character in b which is greater than b [ 0 ] ; if there lies any character in a which is smaller than a [ 0 ] ; if there lies a character which is in a and greater than a [ 0 ] ; if there lies a character which is in b and less than b [ 0 ] ; otherwise ; ","context":"","code":"def minSteps(A, B, M, N):\n    if (A[0] > B[0]):\n        return 0\n    if (B[0] > A[0]):\n        return 1\n    if (M <= N and A[0] == B[0] and A .count(\n            A[0]) == M and B .count(B[0]) == N):\n        return -1\n    for i in range(1, N):\n        if (B[i] > B[0]):\n            return 1\n    for i in range(1, M):\n        if (A[i] < A[0]):\n            return 1\n    for i in range(1, M):\n        if (A[i] > A[0]):\n            A[0], B[i] = B[i], A[0]\n            A[0], B[0] = B[0], A[0]\n            return 2\n    for i in range(1, N):\n        if (B[i] < B[0]):\n            A[0], B[i] = B[i], A[0]\n            A[0], B[0] = B[0], A[0]\n            return 2\n    return 0\n","test":"\nif __name__ == '__main__':\n    A = \"adsfd\"\n    B = \"dffff\"\n    M = len(A)\n    N = len(B)\n    print(minSteps(A, B, M, N))\n","output":"1\n","fn_call":"minSteps"}
{"text":"maximize sum of pairwise products generated from the given arrays | python3 program for the above approach ; variables which represent the size of the array ; stores the results ; function to return the maximum possible sum ; stores the count of arrays processed ; if more than two arrays have been processed ; if an already computed subproblem occurred ; explore all the possible pairs ; recursive function call ; memoize the maximum ; returning the value ; function to return the maximum sum of products of pairs possible ; initialising the dp array to - 1 ; sort the arrays in descending order ; ","context":"\nmaxN = 201\nn1, n2, n3 = 0, 0, 0\ndp = [[[0 for i in range(maxN)]for j in range(maxN)]for j in range(maxN)]\n\n","code":"def getMaxSum(i, j, k, arr1, arr2, arr3):\n    cnt = 0\n    if (i >= n1):\n        cnt += 1\n    if (j >= n2):\n        cnt += 1\n    if (k >= n3):\n        cnt += 1\n    if (cnt >= 2):\n        return 0\n    if (dp[i][j][k] != -1):\n        return dp[i][j][k]\n    ans = 0\n    if (i < n1 and j < n2):\n        ans = max(\n            ans,\n            getMaxSum(\n                i +\n                1,\n                j +\n                1,\n                k,\n                arr1,\n                arr2,\n                arr3) +\n            arr1[i] *\n            arr2[j])\n    if (i < n1 and k < n3):\n        ans = max(\n            ans,\n            getMaxSum(\n                i +\n                1,\n                j,\n                k +\n                1,\n                arr1,\n                arr2,\n                arr3) +\n            arr1[i] *\n            arr3[k])\n    if (j < n2 and k < n3):\n        ans = max(\n            ans,\n            getMaxSum(\n                i,\n                j +\n                1,\n                k +\n                1,\n                arr1,\n                arr2,\n                arr3) +\n            arr2[j] *\n            arr3[k])\n    dp[i][j][k] = ans\n    return dp[i][j][k]\n\n\ndef reverse(tmp):\n    i, k, t = 0, 0, 0\n    n = len(tmp)\n    for i in range(n \/\/ 2):\n        t = tmp[i]\n        tmp[i] = tmp[n - i - 1]\n        tmp[n - i - 1] = t\n\n\ndef maxProductSum(arr1, arr2, arr3):\n    for i in range(len(dp)):\n        for j in range(len(dp[0])):\n            for k in range(len(dp[j][0])):\n                dp[i][j][k] = -1\n    arr1 .sort()\n    reverse(arr1)\n    arr2 .sort()\n    reverse(arr2)\n    arr3 .sort()\n    reverse(arr3)\n    return getMaxSum(0, 0, 0, arr1, arr2, arr3)\n","test":"\nif __name__ == '__main__':\n    n1 = 2\n    arr1 = [3, 5]\n    n2 = 2\n    arr2 = [2, 1]\n    n3 = 3\n    arr3 = [4, 3, 5]\n    print(maxProductSum(arr1, arr2, arr3))\n","output":"43\n","fn_call":"maxProductSum"}
{"text":"largest lexicographic triplet from a given array that forms a triangle | function to find lexicographically largest triplet that forms a triangle in the given array ; sort the array ; iterate from the end of the array ; if the triplet forms a triangle ; if triplet found ; print the triplet ; otherwise ; ","context":"","code":"def findTriplet(arr, N):\n    arr .sort()\n    i = N - 1\n    while i - 2 >= 0:\n        if (arr[i - 2] + arr[i - 1] > arr[i]):\n            flag = 1\n            break\n        i -= 1\n    if (flag):\n        print(arr[i - 2], arr[i - 1], arr[i])\n    else:\n        print(-1)\n","test":"\nif __name__ == '__main__':\n    arr = [4, 2, 10, 3, 5]\n    N = len(arr)\n    findTriplet(arr, N)\n","output":"3 4 5\n","fn_call":"findTriplet"}
{"text":"count of all pairs in an array with minimum absolute difference | function to return the count of all pairs having minimal absolute difference ; stores the count of pairs ; sort the array ; stores the minimum difference between adjacent pairs ; update the minimum difference between pairs ; increase count of pairs with difference equal to that of minimum difference ; return the final count ; ","context":"","code":"def numberofpairs(arr, N):\n    answer = 0\n    arr .sort()\n    minDiff = 10000000\n    for i in range(0, N - 1):\n        minDiff = min(minDiff, arr[i + 1] - arr[i])\n    for i in range(0, N - 1):\n        if arr[i + 1] - arr[i] == minDiff:\n            answer += 1\n    return answer\n","test":"\nif __name__ == '__main__':\n    arr = [4, 2, 1, 3]\n    N = len(arr)\n    print(numberofpairs(arr, N))\n","output":"3\n","fn_call":"numberofpairs"}
{"text":"maximum size subset with given sum using backtracking | initialise maximum possible length of subsequence ; store elements to compare max_length with its size and change the value of max_length accordingly ; store the elements of the longest subsequence ; function to find the length of longest subsequence ; update max_length ; store the subsequence elements ; recursively proceed with obtained sum ; poping elements from back of vector store ; if sum > 0 then we don 't  required thatsubsequence  so return and continue  with earlier elements ; sort the given array ; traverse the array ; if max_length is already greater than or equal than remaining length ; ","context":"\nmax_length = 0\nstore = []\nans = []\n\n","code":"def find_max_length(arr, index, sum, k):\n    global max_length\n    sum = sum + arr[index]\n    store .append(arr[index])\n    if (sum == k):\n        if (max_length < len(store)):\n            max_length = len(store)\n            ans = store\n    for i in range(index + 1, len(arr)):\n        if (sum + arr[i] <= k):\n            find_max_length(arr, i, sum, k)\n            store .pop()\n        else:\n            return\n    return\n\n\ndef longestSubsequence(arr, n, k):\n    arr .sort()\n    for i in range(n):\n        if (max_length >= n - i):\n            break\n        store .clear()\n        find_max_length(arr, i, 0, k)\n    return max_length\n","test":"\nif __name__ == \"__main__\":\n    arr = [-3, 0, 1, 1, 2]\n    n = len(arr)\n    k = 1\n    print(longestSubsequence(arr, n, k))\n","output":"5\n","fn_call":"longestSubsequence"}
{"text":"sort decreasing permutation of n using triple swaps | function to sort array ; check if possible to sort array ; swapping to bring element at required position bringing at least one element at correct position ; tracing changes in array ; print the sorted array ; if not possible to sort ; ","context":"","code":"def sortArray(A, N):\n    if (N % 4 == 0 or N % 4 == 1):\n        for i in range(N \/\/ 2):\n            x = i\n            if (i % 2 == 0):\n                y = N - i - 2\n                z = N - i - 1\n            A[z] = A[y]\n            A[y] = A[x]\n            A[x] = x + 1\n        print(\"Sorted Array: \", end=\"\")\n        for i in range(N):\n            print(A[i], end=\" \")\n    else:\n        print(\"-1\")\n","test":"\nA = [5, 4, 3, 2, 1]\nN = len(A)\nsortArray(A, N)\n","output":"Sorted Array: 1 2 3 4 5 ","fn_call":"sortArray"}
{"text":"find k such that changing all elements of the array greater than k to k will make array sum n | function to return k such that changing all elements greater than k to k will make array sum n otherwise return - 1 ; sorting the array in increasing order ; loop through all the elements of the array ; checking if sum of array equals n ; ","context":"","code":"def findK(arr, size, N):\n    arr = sorted(arr)\n    temp_sum = 0\n    for i in range(size):\n        temp_sum += arr[i]\n        if (N - temp_sum == arr[i] * (size - i - 1)):\n            return arr[i]\n    return -1\n","test":"\narr = [3, 1, 10, 4, 8]\nsize = len(arr)\nN = 16\nprint(findK(arr, size, N))\n","output":"4\n","fn_call":"findK"}
{"text":"find three element from given three arrays such that their sum is x | set 2 | function that returns true if there exists a triplet with sum x ; sorting arrays such that a represents smallest array ; iterating the smallest array ; two pointers on second and third array ; if a valid triplet is found ; ","context":"","code":"def existsTriplet(a, b, c, x, l1, l2, l3):\n    if (l2 <= l1 and l2 <= l3):\n        l1, l2 = l2, l1\n        a, b = b, a\n    elif (l3 <= l1 and l3 <= l2):\n        l1, l3 = l3, l1\n        a, c = c, a\n    for i in range(l1):\n        j = 0\n        k = l3 - 1\n        while (j < l2 and k >= 0):\n            if (a[i] + b[j] + c[k] == x):\n                return True\n            if (a[i] + b[j] + c[k] < x):\n                j += 1\n            else:\n                k -= 1\n    return False\n","test":"\na = [2, 7, 8, 10, 15]\nb = [1, 6, 7, 8]\nc = [4, 5, 5]\nl1 = len(a)\nl2 = len(b)\nl3 = len(c)\nx = 14\nif (existsTriplet(a, b, c, x, l1, l2, l3)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"existsTriplet"}
{"text":"arrange given numbers to form the smallest number | utility function to print the contents of an array ; a comparison function that return true if ' ab ' is smaller than ' ba ' when we concatenate two numbers ' a ' and ' b ' for example , it will return true if we pass 12 and 24 as arguments . this function will be used by sort ( ) function ; convert first number to string format ; convert second number to string format ; check if ' ab ' is smaller or ' ba ' and return bool value since comparison operator ' < = ' returns true or false ;  ; function to print the arrangement with the smallest value ; if we pass the name of the comparison function it will sort the array according to the compare function ; print the sorted array ; ","context":"","code":"def printArr(arr, n):\n    for i in range(0, n):\n        print(arr[i], end=\"\")\n\n\ndef compare(num1, num2):\n    A = str(num1)\n    B = str(num2)\n    return int(A + B) <= int(B + A)\n\n\ndef sort(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if compare(arr[i], arr[j]) == False:\n                arr[i], arr[j] = arr[j], arr[i]\n\n\ndef printSmallest(N, arr):\n    sort(arr)\n    printArr(arr, N)\n","test":"\nif __name__ == \"__main__\":\n    arr = [5, 6, 2, 9, 21, 1]\n    N = len(arr)\n    printSmallest(N, arr)\n","output":"1212569","fn_call":"printSmallest"}
{"text":"permute two arrays such that sum of every pair is greater or equal to k | check whether any permutation exists which satisfy the condition . ; sort the array a [ ] in decreasing order . ; sort the array b [ ] in increasing order . ; checking condition on each index . ; ","context":"","code":"def isPossible(a, b, n, k):\n    a .sort(reverse=True)\n    b .sort()\n    for i in range(n):\n        if (a[i] + b[i] < k):\n            return False\n    return True\n","test":"\na = [2, 1, 3]\nb = [7, 8, 9]\nk = 10\nn = len(a)\nif (isPossible(a, b, n, k)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","output":"Yes\n","fn_call":"isPossible"}
{"text":"sort an array according to count of set bits | function to count setbits ; function to sort by setbitcount ; iterate over all values and insert into multimap ; ","context":"","code":"def setBitCount(num):\n    count = 0\n    while (num):\n        if (num & 1):\n            count += 1\n        num = num >> 1\n    return count\n\n\ndef sortBySetBitCount(arr, n):\n    count = []\n    for i in range(n):\n        count .append([(-1) * setBitCount(arr[i]), arr[i]])\n    count .sort(key=lambda x: x[0])\n    for i in range(len(count)):\n        print(count[i][1], end=\" \")\n","test":"\narr = [1, 2, 3, 4, 5, 6]\nn = len(arr)\nsortBySetBitCount(arr, n)\n","output":"3 5 6 1 2 4 ","fn_call":"sortBySetBitCount"}
{"text":"check if end of given binary string can be reached by choosing jump value in between given range | function to check if it is possible to reach the end of the binary string using the given jumps ; stores the dp states ; initial state ; stores count of indices from which it is possible to reach index i ; traverse the given string ; update the values of pre accordingly ; if the jump size is out of the range [ l , r ] ; return answer ; ","context":"","code":"def canReach(s, L, R):\n    dp = [0 for _ in range(len(s))]\n    dp[0] = 1\n    pre = 0\n    for i in range(1, len(s)):\n        if (i >= L):\n            pre += dp[i - L]\n        if (i > R):\n            pre -= dp[i - R - 1]\n        dp[i] = (pre > 0) and (s[i] == '0')\n    return dp[len(s) - 1]\n","test":"\nif __name__ == \"__main__\":\n    S = \"01101110\"\n    L = 2\n    R = 3\n    if canReach(S, L, R):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","output":"No\n","fn_call":"canReach"}
{"text":"split an array into subarrays with maximum bitwise xor of their respective bitwise or values | recursive function to find all the possible breaking of arrays o subarrays and find the maximum bitwise xor ; if the value of n is 0 ; stores the result if the new group is formed with the first element as arr [ i ] ; stores if the result if the arr [ i ] is included in the last group ; returns the maximum of x and y ; function to find the maximum possible bitwise xor of all possible values of the array after breaking the arrays o subarrays ; return the result ; ","context":"","code":"def maxXORUtil(arr, N, xrr, orr):\n    if (N == 0):\n        return xrr ^ orr\n    x = maxXORUtil(arr, N - 1, xrr ^ orr, arr[N - 1])\n    y = maxXORUtil(arr, N - 1, xrr, orr | arr[N - 1])\n    return max(x, y)\n\n\ndef maximumXOR(arr, N):\n    return maxXORUtil(arr, N, 0, 0)\n","test":"\narr = 1, 5, 7\nN = len(arr)\nprint(maximumXOR(arr, N))\n","output":"7\n","fn_call":"maximumXOR"}
{"text":"construct an n | python3 program to implement the above approach ; keep track of visited nodes ; function to construct a tree such that there are no two adjacent nodes with the same weight ; if minimum and maximum elements are equal , i . e . array contains one distinct element ; tree cannot be constructed ; otherwise ; tree can be constructed ; choose weights [ 0 ] as root ; first node is visited ; traverse the array ; otherwise , make an edge ; mark this node as visited ; find a weight not same as the root & make edges with that node ; join non - roots with remaining nodes ; check if current node ' s \u2581 weight \u2581 \u2581 is \u2581 same \u2581 as \u2581 root \u2581 node ' s weight and if it is not visited or not ; ","context":"\nN = 10 ** 5 + 5\nvisited = [0] * N\n\n","code":"def construct_tree(weights, n):\n    minimum = min(weights)\n    maximum = max(weights)\n    if (minimum == maximum):\n        print(\"No\")\n        return\n    else:\n        print(\"Yes\")\n    root = weights[0]\n    visited[1] = 1\n    for i in range(n):\n        if (weights[i] != root and visited[i + 1] == 0):\n            print(1, i + 1)\n            visited[i + 1] = 1\n    notroot = 0\n    for i in range(n):\n        if (weights[i] != root):\n            notroot = i + 1\n            break\n    for i in range(n):\n        if (weights[i] == root and visited[i + 1] == 0):\n            print(notroot, i + 1)\n            visited[i + 1] = 1\n","test":"\nif __name__ == '__main__':\n    weights = [1, 2, 1, 2, 5]\n    N = len(weights)\n    construct_tree(weights, N)\n","output":"Yes\n1 2\n1 4\n1 5\n2 3\n","fn_call":"construct_tree"}
{"text":"minimize cost to convert given string into concatenation of equal substrings of length k | python3 program for the above approach ; function to find minimum cost to convert given string into string of k length same substring ; stores length of string ; stores the minimum cost ; traverse left substring of k length ; stores the frequency ; stores minimum cost for sequence of s [ i ] % k indices ; check for optimal character ; find sum of distance ' a ' + ch from character s [ i ] % k indices ; choose minimum cost for each index i ; increment ans ; print minimum cost to convert string ; ","context":"\nimport sys\n\n","code":"def minCost(s, k):\n    n = len(s)\n    ans = 0\n    for i in range(k):\n        a = [0] * 26\n        for j in range(i, n, k):\n            a[ord(s[j]) - ord('a')] += 1\n        min_cost = sys .maxsize - 1\n        for ch in range(26):\n            cost = 0\n            for tr in range(26):\n                cost += abs(ch - tr) * a[tr]\n            min_cost = min(min_cost, cost)\n        ans += min_cost\n    print(ans)\n","test":"\nS = \"abcdefabc\"\nK = 3\nminCost(S, K)\n","output":"9\n","fn_call":"minCost"}
{"text":"split first n natural numbers into two sets with minimum absolute difference of their sums | function to split the first n natural numbers into two sets having minimum absolute difference of their sums ; ","context":"","code":"def minAbsDiff(N):\n    if (N % 4 == 0 or N % 4 == 3):\n        return 0\n    return 1\n","test":"\nN = 6\nprint(minAbsDiff(N))\n","output":"1\n","fn_call":"minAbsDiff"}
{"text":"minimize cost to swap two given arrays | python3 program to implement the above approach ; function to calculate and return the minimum cost required to swap two arrays ; return the total minimum cost ; ","context":"\nimport sys\n\n","code":"def getMinCost(A, B, N):\n    mini = sys .maxsize\n    for i in range(N):\n        mini = min(mini, min(A[i], B[i]))\n    return mini * (2 * N - 1)\n","test":"\nN = 3\nA = [1, 4, 2]\nB = [10, 6, 12]\nprint(getMinCost(A, B, N))\n","output":"5\n","fn_call":"getMinCost"}
{"text":"print all possible ways to write n as sum of two or more positive integers | function to print the values stored in vector arr ; traverse the vector arr ; recursive function to prdifferent ways in which n can be written as a sum of at 2 or more positive integers ; if n is zero then prthis ways of breaking numbers ; start from previous element in the representation till n ; include current element from representation ; call function again with reduced sum ; backtrack to remove current element from representation ; ","context":"","code":"def printVector(arr):\n    if (len(arr) != 1):\n        for i in range(len(arr)):\n            print(arr[i], end=\" \")\n        print()\n\n\ndef findWays(arr, i, n):\n    if (n == 0):\n        printVector(arr)\n    for j in range(i, n + 1):\n        arr .append(j)\n        findWays(arr, j, n - j)\n        del arr[-1]\n","test":"\nif __name__ == '__main__':\n    n = 4\n    arr = []\n    findWays(arr, 1, n)\n","output":"1 1 1 1 \n1 1 2 \n1 3 \n2 2 \n","fn_call":"findWays"}
{"text":"check if a string can be split into two strings with same number of k | function to print the arrangement of characters ; stores frequency of characters ; count the character having frequency k ; count the character having frequency greater than k and not equal to 2 k ; case 1 ; case 2 ; case 3 ; if all cases fail ; ","context":"","code":"def DivideString(s, n, k):\n    c = 0\n    no = 1\n    c1 = 0\n    c2 = 0\n    fr = [0] * 26\n    ans = []\n    for i in range(n):\n        fr[ord(s[i]) - ord('a')] += 1\n    for i in range(26):\n        if (fr[i] == k):\n            c += 1\n        if (fr[i] > k and fr[i] != 2 * k):\n            c1 += 1\n            ch = chr(ord('a') + i)\n        if (fr[i] == 2 * k):\n            c2 += 1\n            ch1 = chr(ord('a') + i)\n    for i in range(n):\n        ans .append(\"1\")\n    mp = {}\n    if (c % 2 == 0 or c1 > 0 or c2 > 0):\n        for i in range(n):\n            if (fr[ord(s[i]) - ord('a')] == k):\n                if (s[i] in mp):\n                    ans[i] = '2'\n                else:\n                    if (no <= (c \/\/ 2)):\n                        ans[i] = '2'\n                        no += 1\n                        mp[s[i]] = 1\n        if (c % 2 == 1 and c1 > 0):\n            no = 1\n            for i in range(n):\n                if (s[i] == ch and no <= k):\n                    ans[i] = '2'\n                    no += 1\n        if (c % 2 == 1 and c1 == 0):\n            no = 1\n            flag = 0\n            for i in range(n):\n                if (s[i] == ch1 and no <= k):\n                    ans[i] = '2'\n                    no += 1\n                if (fr[s[i] - 'a'] == k and flag == 0 and ans[i] == '1'):\n                    ans[i] = '2'\n                    flag = 1\n        print(\"\".join(ans))\n    else:\n        print(\"NO\")\n","test":"\nif __name__ == '__main__':\n    S = \"abbbccc\"\n    N = len(S)\n    K = 1\n    DivideString(S, N, K)\n","output":"1111211\n","fn_call":"DivideString"}
{"text":"check if two items can be selected from two different categories without exceeding price | function to check if two items can be selected from two different categories without exceeding the total price ; loop to choose two different pairs using two nested loops ; condition to check if the price of these two elements is less than s ; ","context":"","code":"def check(S, prices, type1, n):\n    for j in range(0, n):\n        for k in range(j + 1, n):\n            if ((type1[j] == 0 and type1[k] == 1) or (\n                    type1[j] == 1 and type1[k] == 0)):\n                if (prices[j] + prices[k] <= S):\n                    return \"Yes\"\n    return \"No\"\n","test":"\nprices = [3, 8, 6, 5]\ntype1 = [0, 1, 1, 0]\nS = 10\nn = 4\nprint(check(S, prices, type1, n))\n","output":"Yes\n","fn_call":"check"}
{"text":"find the maximum sum ( a + b ) for a given input integer n satisfying the given condition | function to return the maximum sum of a + b satisfying the given condition ; consider all possible pairs and check the sum divides product property ; to find the largest factor k ; check if the product is divisible by the sum ; storing the maximum sum in the max_sum variable ; return the max_sum value ; ","context":"","code":"def getLargestSum(N):\n    max_sum = 0\n    for i in range(1, int(N ** (1 \/ 2)) + 1):\n        for j in range(i + 1, int(N ** (1 \/ 2)) + 1):\n            k = N \/\/ j\n            a = k * i\n            b = k * j\n            if (a <= N and b <= N and a * b % (a + b) == 0):\n                max_sum = max(max_sum, a + b)\n    return max_sum\n","test":"\nif __name__ == \"__main__\":\n    N = 25\n    max_sum = getLargestSum(N)\n    print(max_sum)\n","output":"36\n","fn_call":"getLargestSum"}
{"text":"encrypt a string by repeating i | function to return the encrypted string ; number of times the current character will be repeated ; repeat the current character in the encrypted string ; ","context":"","code":"def encryptString(string, n):\n    i, cnt = 0, 0\n    encryptedStr = \"\"\n    while i < n:\n        cnt = i + 1\n        while cnt > 0:\n            encryptedStr += string[i]\n            cnt -= 1\n        i += 1\n    return encryptedStr\n","test":"\nif __name__ == \"__main__\":\n    string = \"geeks\"\n    n = len(string)\n    print(encryptString(string, n))\n","output":"geeeeekkkksssss\n","fn_call":"encryptString"}
{"text":"minimize the difference between the maximum and minimum values of the modified array | function to return required minimum difference ; finding minimum and maximum values ; returning minimum possible difference ; ","context":"","code":"def minDiff(n, x, A):\n    mn = A[0]\n    mx = A[0]\n    for i in range(0, n):\n        mn = min(mn, A[i])\n        mx = max(mx, A[i])\n    return max(0, mx - mn - 2 * x)\n","test":"\nn = 3\nx = 3\nA = [1, 3, 6]\nprint(minDiff(n, x, A))\n","output":"0\n","fn_call":"minDiff"}
{"text":"minimum swaps for bracket balancing | python3 program to count swaps required to balance string ; stores total number of left and right brackets encountered ; swap stores the number of swaps required imbalance maintains the number of imbalance pair ; increment count of left bracket ; swaps count is last swap count + total number imbalanced brackets ; imbalance decremented by 1 as it solved only one imbalance of left and right ; increment count of right bracket ; imbalance is reset to current difference between left and right brackets ; ","context":"","code":"def swapCount(s):\n    chars = s\n    countLeft = 0\n    countRight = 0\n    swap = 0\n    imbalance = 0\n    for i in range(len(chars)):\n        if chars[i] == '[':\n            countLeft += 1\n            if imbalance > 0:\n                swap += imbalance\n                imbalance -= 1\n        elif chars[i] == ']':\n            countRight += 1\n            imbalance = (countRight - countLeft)\n    return swap\n","test":"\ns = \"[]][][\"\nprint(swapCount(s))\ns = \"[[][]]\"\nprint(swapCount(s))\n","output":"2\n0\n","fn_call":"swapCount"}
{"text":"longest subsequence from an array of pairs having first element increasing and second element decreasing . | function to find the length of the longest subsequence of pairs whose first element is increasing and second is decreasing ; dp [ i ] : stores the longest subsequence upto i ; base case ; when the conditions hold ; finally , prthe required answer ; ","context":"","code":"def longestSubSequence(A, N):\n    dp = [0] * N\n    for i in range(N):\n        dp[i] = 1\n        for j in range(i):\n            if (A[j][0] < A[i][0] and A[j][1] > A[i][1]):\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(dp[N - 1])\n","test":"\nif __name__ == '__main__':\n    A = [[1, 2], [2, 2], [3, 1]]\n    N = len(A)\n    longestSubSequence(A, N)\n","output":"2\n","fn_call":"longestSubSequence"}
{"text":"count ways to obtain given sum by repeated throws of a dice | function to calculate the total number of ways to have sum n ; base case ; return already stored result ; recur for all 6 states ; return the result ; ","context":"","code":"def findWays(N, dp):\n    if (N == 0):\n        return 1\n    if (dp[N] != -1):\n        return dp[N]\n    cnt = 0\n    for i in range(1, 7):\n        if (N - i >= 0):\n            cnt = (cnt + findWays(N - i, dp))\n    dp[N] = cnt\n    return dp[N]\n","test":"\nif __name__ == \"__main__\":\n    N = 4\n    dp = [-1] * (N + 1)\n    print(findWays(N, dp))\n","output":"8\n","fn_call":"findWays"}
{"text":"count ways to obtain given sum by repeated throws of a dice | function to calculate the total number of ways to have sum n ; initialize dp array ; iterate over all the possible intermediate values to reach n ; calculate the sum for all 6 faces ; print total number of ways ; ","context":"","code":"def findWays(N):\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for i in range(1, N + 1):\n        dp[i] = 0\n        for j in range(1, 7):\n            if (i - j >= 0):\n                dp[i] = dp[i] + dp[i - j]\n    print(dp[N])\n","test":"\nif __name__ == '__main__':\n    N = 4\n    findWays(N)\n","output":"8\n","fn_call":"findWays"}
{"text":"split the string into minimum parts such that each part is in the another string | python3 implementation to split the string into minimum number of parts such that each part is also present in the another string ; node of trie ; function to insert a node in the trie data structure ; inserting every character from idx till end to string into trie ; if there is no edge corresponding to the ith character , then make a new node ; function to find the minimum number of parts such that each part is present into another string ; making a new trie ; inserting every substring of s2 in trie ; creating dp array and init it with infinity ; base case ; starting the cut from ith character taking temporary node pointer for checking whether the substring [ i , j ) is present in trie of not ; if the jth character is not in trie we 'll break ; updating the the ending of jth character with dp [ i ] + 1 ; descending the trie pointer ; answer not possible ; ","context":"\nINF = 1e9 + 9\n\n\nclass TrieNode ():\n    def __init__(self):\n        self .child = [None] * 26\n\n","code":"def insert(idx, s, root):\n    temp = root\n    for i in range(idx, len(s)):\n        if temp .child[ord(s[i]) - ord('a')] is None:\n            temp .child[ord(s[i]) - ord('a')] = TrieNode()\n        temp = temp .child[ord(s[i]) - ord('a')]\n\n\ndef minCuts(S1, S2):\n    n1 = len(S1)\n    n2 = len(S2)\n    root = TrieNode()\n    for i in range(n2):\n        insert(i, S2, root)\n    dp = [INF] * (n1 + 1)\n    dp[0] = 0\n    for i in range(n1):\n        temp = root\n        for j in range(i + 1, n1 + 1):\n            if temp .child[ord(S1[j - 1]) - ord('a')] is None:\n                break\n            dp[j] = min(dp[j], dp[i] + 1)\n            temp = temp .child[ord(S1[j - 1]) - ord('a')]\n    if dp[n1] >= INF:\n        return -1\n    else:\n        return dp[n1]\n","test":"\nS1 = \"abcdab\"\nS2 = \"dabc\"\nprint(minCuts(S1, S2))\n","output":"2\n","fn_call":"minCuts"}
{"text":"largest square in a binary matrix with at most k 1 s for multiple queries | function to find the largest square in the matrix such that it contains atmost k 1 's  ; precomputing the countdp prefix sum of the matrix ; loop to solve queries ; calculating the maximum possible distance of the centre from edge ; count total number of 1 s in the sub square considered ; if the count is less than or equals to the maximum move to right half ; ","context":"","code":"def largestSquare(matrix, R, C, q_i, q_j, K, Q):\n    countDP = [[0 for x in range(C)]for x in range(R)]\n    countDP[0][0] = matrix[0][0]\n    for i in range(1, R):\n        countDP[i][0] = (countDP[i - 1][0] + matrix[i][0])\n    for j in range(1, C):\n        countDP[0][j] = (countDP[0][j - 1] + matrix[0][j])\n    for i in range(1, R):\n        for j in range(1, C):\n            countDP[i][j] = (matrix[i][j] + countDP[i - 1]\n                             [j] + countDP[i][j - 1] - countDP[i - 1][j - 1])\n    for q in range(0, Q):\n        i = q_i[q]\n        j = q_j[q]\n        min_dist = min(i, j, R - i - 1, C - j - 1)\n        ans = -1\n        l = 0\n        u = min_dist\n        while (l <= u):\n            mid = int((l + u) \/ 2)\n            x1 = i - mid\n            x2 = i + mid\n            y1 = j - mid\n            y2 = j + mid\n            count = countDP[x2][y2]\n            if (x1 > 0):\n                count -= countDP[x1 - 1][y2]\n            if (y1 > 0):\n                count -= countDP[x2][y1 - 1]\n            if (x1 > 0 and y1 > 0):\n                count += countDP[x1 - 1][y1 - 1]\n            if (count <= K):\n                ans = 2 * mid + 1\n                l = mid + 1\n            else:\n                u = mid - 1\n        print(ans)\n","test":"\nmatrix = [[1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0]]\nK = 9\nQ = 1\nq_i = [1]\nq_j = [2]\nlargestSquare(matrix, 4, 5, q_i, q_j, K, Q)\n","output":"3\n","fn_call":"largestSquare"}
